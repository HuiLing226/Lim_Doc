# -*- coding: utf-8 -*-
"""mod4&5_inf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ktZymzhy8gKI6HSyIboaZY3YD8GwGKdI
"""

cimport numpy as np
import librosa

# Params for BAD (16x188)
SR = 16000
N_MELS = 16
HOP = 256
FFT = 512
DURATION = 3.0

def export_bad_header(bird_file, nobird_file, out_h="bad_inputs.h"):
    def make_mel(file):
        y, _ = librosa.load(file, sr=SR, duration=DURATION)
        mel = librosa.feature.melspectrogram(y=y, sr=SR,
                                             n_fft=FFT,
                                             hop_length=HOP,
                                             n_mels=N_MELS)
        mel_db = librosa.power_to_db(mel, ref=np.max)
        mel_norm = 2 * (mel_db - mel_db.min()) / (mel_db.max() - mel_db.min()) - 1
        return (mel_norm * 127).astype(np.int8)

    mel_bird = make_mel(bird_file)
    mel_nobird = make_mel(nobird_file)

    with open(out_h, "w") as f:
        f.write("// BAD Model Test Inputs\n")
        f.write("#ifndef BAD_INPUTS_H\n#define BAD_INPUTS_H\n\n")

        # Bird array
        f.write("const int8_t mel_bad_bird[16*188] = {\n")
        flat = mel_bird.flatten()
        for i, v in enumerate(flat):
            f.write(f"{v}, ")
            if (i+1) % 20 == 0:
                f.write("\n")
        f.write("};\n\n")

        # NoBird array
        f.write("const int8_t mel_bad_nobird[16*188] = {\n")
        flat = mel_nobird.flatten()
        for i, v in enumerate(flat):
            f.write(f"{v}, ")
            if (i+1) % 20 == 0:
                f.write("\n")
        f.write("};\n\n")

        f.write("#endif // BAD_INPUTS_H\n")

    print(f"[✓] Saved {out_h}")

# ---------------------------
# Run with your files
# ---------------------------
if __name__ == "__main__":
    bird_file   = r"C:\Users\End User\Downloads\0.920_0001_200609_1348_12.wav"
    nobird_file = r"C:\Users\End User\Downloads\0.920_0001_399673661.wav"

    export_bad_header(bird_file, nobird_file, out_h="bad_inputs.h")

import numpy as np
import librosa
import tensorflow as tf

# Parameters for Species Classifier (Module 5)
SR = 44100
N_MELS = 224
IMG_SIZE = (224,224)
DURATION = 3.0

def export_species_header(species_files, out_h="species_inputs.h"):
    with open(out_h, "w") as f:
        f.write("// Species Classifier Test Inputs (10 species)\n")
        f.write("#ifndef SPECIES_INPUTS_H\n#define SPECIES_INPUTS_H\n\n")

        for species_name, file in species_files.items():
            print(f"[INFO] Processing {species_name}: {file}")
            y, _ = librosa.load(file, sr=SR, duration=DURATION)

            # Compute mel spectrogram
            mel = librosa.feature.melspectrogram(y=y, sr=SR, n_mels=N_MELS)
            mel_db = librosa.power_to_db(mel, ref=np.max)

            # Normalize 0–255
            mel_norm = (mel_db - mel_db.min()) / (mel_db.max() - mel_db.min() + 1e-8)
            mel_uint8 = (mel_norm * 255).astype(np.uint8)

            # Resize to 224x224 and expand to 3 channels
            mel_resized = tf.image.resize(mel_uint8[..., np.newaxis], IMG_SIZE).numpy().astype(np.uint8)
            mel_rgb = np.repeat(mel_resized, 3, axis=-1)

            arr = mel_rgb.flatten()

            # Write array
            f.write(f"const uint8_t mel_species_{species_name}[224*224*3] = {{\n")
            for i, v in enumerate(arr):
                f.write(f"{v}, ")
                if (i+1) % 30 == 0:
                    f.write("\n")
            f.write("};\n\n")

        f.write("#endif // SPECIES_INPUTS_H\n")

    print(f"[✓] Saved {out_h}")


# ---------------------------
# Run with your 10 species files
# ---------------------------
if __name__ == "__main__":
    species_files = {
        "Asian Koel": r"C:\Users\End User\Downloads\putra_dataset-20250918T145916Z-1-001\putra_dataset\Asian Koel\20200322_060000_HSBU_0_00902_151.wav",
        "Collared Kingfisher": r"C:\Users\End User\Downloads\putra_dataset-20250918T145916Z-1-001\putra_dataset\Collared Kingfisher\20200719_110000_HSKT_0_01072_555.wav",
        "Large-tailed Nightjar": r"C:\Users\End User\Downloads\putra_dataset-20250918T145916Z-1-001\putra_dataset\Large-tailed Nightjar\20200327_010000_HSBU_0_00597_141.wav",
        "Crested-serpent Eagle": r"C:\Users\End User\Downloads\putra_dataset-20250918T145916Z-1-001\putra_dataset\Crested-serpent Eagle\20200302_190000_KSNP_0_00390_170.wav",
        "Pied Fantail": r"C:\Users\End User\Downloads\putra_dataset-20250918T145916Z-1-001\putra_dataset\Pied Fantail\20200323_190000_HSBU_0_00594_674.wav",
        "Common Iora": r"C:\Users\End User\Downloads\putra_dataset-20250918T145916Z-1-001\putra_dataset\Common Iora\20200308_180000_KSNP_0_00105_330.wav",
        "Black-naped Oriole": r"C:\Users\End User\Downloads\putra_dataset-20250918T145916Z-1-001\putra_dataset\Black-naped Oriole\20200308_110000_KSNP_0_01126_419.wav",
        "Zebra Dove": r"C:\Users\End User\Downloads\putra_dataset-20250918T145916Z-1-001\putra_dataset\Zebra Dove\20200722_100000_HSKT_0_00136_813.wav",
        "Cinereous Tit": r"C:\Users\End User\Downloads\putra_dataset-20250918T145916Z-1-001\putra_dataset\Cinereous Tit\20200302_130000_KSNP_0_01755_552.wav",
        "Spotted Dove": r"C:\Users\End User\Downloads\putra_dataset-20250918T145916Z-1-001\putra_dataset\Spotted Dove\20200322_180000_HSBU_0_01129_136.wav",
    }

    export_species_header(species_files, out_h="species_inputs.h")