
Testing_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013768  08010000  08010000  00010000  2**16
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e77c  08023780  08023780  00023780  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08041efc  08041efc  00042aa8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08041efc  08041efc  00041efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08041f04  08041f04  00042aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08041f04  08041f04  00041f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08041f08  08041f08  00041f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000aa8  24000000  08041f0c  00042000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003aec  24000ac0  080429b4  00042ac0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20000000  20000000  00043000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00042aa8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bbe  00000000  00000000  00042ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5c  00000000  00000000  00056694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  000591f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000993  00000000  00000000  00059eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ca73  00000000  00000000  0005a843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013248  00000000  00000000  000972b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001896bb  00000000  00000000  000aa4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00233bb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b90  00000000  00000000  00233c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  002377d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	@ (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	@ (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	24000ac0 	.word	0x24000ac0
 801001c:	00000000 	.word	0x00000000
 8010020:	08023750 	.word	0x08023750

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	@ (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	@ (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	@ (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	24000ac4 	.word	0x24000ac4
 801003c:	08023750 	.word	0x08023750

08010040 <strlen>:
 8010040:	4603      	mov	r3, r0
 8010042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010046:	2a00      	cmp	r2, #0
 8010048:	d1fb      	bne.n	8010042 <strlen+0x2>
 801004a:	1a18      	subs	r0, r3, r0
 801004c:	3801      	subs	r0, #1
 801004e:	4770      	bx	lr

08010050 <memchr>:
 8010050:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010054:	2a10      	cmp	r2, #16
 8010056:	db2b      	blt.n	80100b0 <memchr+0x60>
 8010058:	f010 0f07 	tst.w	r0, #7
 801005c:	d008      	beq.n	8010070 <memchr+0x20>
 801005e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010062:	3a01      	subs	r2, #1
 8010064:	428b      	cmp	r3, r1
 8010066:	d02d      	beq.n	80100c4 <memchr+0x74>
 8010068:	f010 0f07 	tst.w	r0, #7
 801006c:	b342      	cbz	r2, 80100c0 <memchr+0x70>
 801006e:	d1f6      	bne.n	801005e <memchr+0xe>
 8010070:	b4f0      	push	{r4, r5, r6, r7}
 8010072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801007a:	f022 0407 	bic.w	r4, r2, #7
 801007e:	f07f 0700 	mvns.w	r7, #0
 8010082:	2300      	movs	r3, #0
 8010084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010088:	3c08      	subs	r4, #8
 801008a:	ea85 0501 	eor.w	r5, r5, r1
 801008e:	ea86 0601 	eor.w	r6, r6, r1
 8010092:	fa85 f547 	uadd8	r5, r5, r7
 8010096:	faa3 f587 	sel	r5, r3, r7
 801009a:	fa86 f647 	uadd8	r6, r6, r7
 801009e:	faa5 f687 	sel	r6, r5, r7
 80100a2:	b98e      	cbnz	r6, 80100c8 <memchr+0x78>
 80100a4:	d1ee      	bne.n	8010084 <memchr+0x34>
 80100a6:	bcf0      	pop	{r4, r5, r6, r7}
 80100a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80100ac:	f002 0207 	and.w	r2, r2, #7
 80100b0:	b132      	cbz	r2, 80100c0 <memchr+0x70>
 80100b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80100b6:	3a01      	subs	r2, #1
 80100b8:	ea83 0301 	eor.w	r3, r3, r1
 80100bc:	b113      	cbz	r3, 80100c4 <memchr+0x74>
 80100be:	d1f8      	bne.n	80100b2 <memchr+0x62>
 80100c0:	2000      	movs	r0, #0
 80100c2:	4770      	bx	lr
 80100c4:	3801      	subs	r0, #1
 80100c6:	4770      	bx	lr
 80100c8:	2d00      	cmp	r5, #0
 80100ca:	bf06      	itte	eq
 80100cc:	4635      	moveq	r5, r6
 80100ce:	3803      	subeq	r0, #3
 80100d0:	3807      	subne	r0, #7
 80100d2:	f015 0f01 	tst.w	r5, #1
 80100d6:	d107      	bne.n	80100e8 <memchr+0x98>
 80100d8:	3001      	adds	r0, #1
 80100da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80100de:	bf02      	ittt	eq
 80100e0:	3001      	addeq	r0, #1
 80100e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80100e6:	3001      	addeq	r0, #1
 80100e8:	bcf0      	pop	{r4, r5, r6, r7}
 80100ea:	3801      	subs	r0, #1
 80100ec:	4770      	bx	lr
 80100ee:	bf00      	nop

080100f0 <__aeabi_uldivmod>:
 80100f0:	b953      	cbnz	r3, 8010108 <__aeabi_uldivmod+0x18>
 80100f2:	b94a      	cbnz	r2, 8010108 <__aeabi_uldivmod+0x18>
 80100f4:	2900      	cmp	r1, #0
 80100f6:	bf08      	it	eq
 80100f8:	2800      	cmpeq	r0, #0
 80100fa:	bf1c      	itt	ne
 80100fc:	f04f 31ff 	movne.w	r1, #4294967295
 8010100:	f04f 30ff 	movne.w	r0, #4294967295
 8010104:	f000 b988 	b.w	8010418 <__aeabi_idiv0>
 8010108:	f1ad 0c08 	sub.w	ip, sp, #8
 801010c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010110:	f000 f806 	bl	8010120 <__udivmoddi4>
 8010114:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801011c:	b004      	add	sp, #16
 801011e:	4770      	bx	lr

08010120 <__udivmoddi4>:
 8010120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010124:	9d08      	ldr	r5, [sp, #32]
 8010126:	468e      	mov	lr, r1
 8010128:	4604      	mov	r4, r0
 801012a:	4688      	mov	r8, r1
 801012c:	2b00      	cmp	r3, #0
 801012e:	d14a      	bne.n	80101c6 <__udivmoddi4+0xa6>
 8010130:	428a      	cmp	r2, r1
 8010132:	4617      	mov	r7, r2
 8010134:	d962      	bls.n	80101fc <__udivmoddi4+0xdc>
 8010136:	fab2 f682 	clz	r6, r2
 801013a:	b14e      	cbz	r6, 8010150 <__udivmoddi4+0x30>
 801013c:	f1c6 0320 	rsb	r3, r6, #32
 8010140:	fa01 f806 	lsl.w	r8, r1, r6
 8010144:	fa20 f303 	lsr.w	r3, r0, r3
 8010148:	40b7      	lsls	r7, r6
 801014a:	ea43 0808 	orr.w	r8, r3, r8
 801014e:	40b4      	lsls	r4, r6
 8010150:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010154:	fa1f fc87 	uxth.w	ip, r7
 8010158:	fbb8 f1fe 	udiv	r1, r8, lr
 801015c:	0c23      	lsrs	r3, r4, #16
 801015e:	fb0e 8811 	mls	r8, lr, r1, r8
 8010162:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010166:	fb01 f20c 	mul.w	r2, r1, ip
 801016a:	429a      	cmp	r2, r3
 801016c:	d909      	bls.n	8010182 <__udivmoddi4+0x62>
 801016e:	18fb      	adds	r3, r7, r3
 8010170:	f101 30ff 	add.w	r0, r1, #4294967295
 8010174:	f080 80ea 	bcs.w	801034c <__udivmoddi4+0x22c>
 8010178:	429a      	cmp	r2, r3
 801017a:	f240 80e7 	bls.w	801034c <__udivmoddi4+0x22c>
 801017e:	3902      	subs	r1, #2
 8010180:	443b      	add	r3, r7
 8010182:	1a9a      	subs	r2, r3, r2
 8010184:	b2a3      	uxth	r3, r4
 8010186:	fbb2 f0fe 	udiv	r0, r2, lr
 801018a:	fb0e 2210 	mls	r2, lr, r0, r2
 801018e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010192:	fb00 fc0c 	mul.w	ip, r0, ip
 8010196:	459c      	cmp	ip, r3
 8010198:	d909      	bls.n	80101ae <__udivmoddi4+0x8e>
 801019a:	18fb      	adds	r3, r7, r3
 801019c:	f100 32ff 	add.w	r2, r0, #4294967295
 80101a0:	f080 80d6 	bcs.w	8010350 <__udivmoddi4+0x230>
 80101a4:	459c      	cmp	ip, r3
 80101a6:	f240 80d3 	bls.w	8010350 <__udivmoddi4+0x230>
 80101aa:	443b      	add	r3, r7
 80101ac:	3802      	subs	r0, #2
 80101ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80101b2:	eba3 030c 	sub.w	r3, r3, ip
 80101b6:	2100      	movs	r1, #0
 80101b8:	b11d      	cbz	r5, 80101c2 <__udivmoddi4+0xa2>
 80101ba:	40f3      	lsrs	r3, r6
 80101bc:	2200      	movs	r2, #0
 80101be:	e9c5 3200 	strd	r3, r2, [r5]
 80101c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101c6:	428b      	cmp	r3, r1
 80101c8:	d905      	bls.n	80101d6 <__udivmoddi4+0xb6>
 80101ca:	b10d      	cbz	r5, 80101d0 <__udivmoddi4+0xb0>
 80101cc:	e9c5 0100 	strd	r0, r1, [r5]
 80101d0:	2100      	movs	r1, #0
 80101d2:	4608      	mov	r0, r1
 80101d4:	e7f5      	b.n	80101c2 <__udivmoddi4+0xa2>
 80101d6:	fab3 f183 	clz	r1, r3
 80101da:	2900      	cmp	r1, #0
 80101dc:	d146      	bne.n	801026c <__udivmoddi4+0x14c>
 80101de:	4573      	cmp	r3, lr
 80101e0:	d302      	bcc.n	80101e8 <__udivmoddi4+0xc8>
 80101e2:	4282      	cmp	r2, r0
 80101e4:	f200 8105 	bhi.w	80103f2 <__udivmoddi4+0x2d2>
 80101e8:	1a84      	subs	r4, r0, r2
 80101ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80101ee:	2001      	movs	r0, #1
 80101f0:	4690      	mov	r8, r2
 80101f2:	2d00      	cmp	r5, #0
 80101f4:	d0e5      	beq.n	80101c2 <__udivmoddi4+0xa2>
 80101f6:	e9c5 4800 	strd	r4, r8, [r5]
 80101fa:	e7e2      	b.n	80101c2 <__udivmoddi4+0xa2>
 80101fc:	2a00      	cmp	r2, #0
 80101fe:	f000 8090 	beq.w	8010322 <__udivmoddi4+0x202>
 8010202:	fab2 f682 	clz	r6, r2
 8010206:	2e00      	cmp	r6, #0
 8010208:	f040 80a4 	bne.w	8010354 <__udivmoddi4+0x234>
 801020c:	1a8a      	subs	r2, r1, r2
 801020e:	0c03      	lsrs	r3, r0, #16
 8010210:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010214:	b280      	uxth	r0, r0
 8010216:	b2bc      	uxth	r4, r7
 8010218:	2101      	movs	r1, #1
 801021a:	fbb2 fcfe 	udiv	ip, r2, lr
 801021e:	fb0e 221c 	mls	r2, lr, ip, r2
 8010222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010226:	fb04 f20c 	mul.w	r2, r4, ip
 801022a:	429a      	cmp	r2, r3
 801022c:	d907      	bls.n	801023e <__udivmoddi4+0x11e>
 801022e:	18fb      	adds	r3, r7, r3
 8010230:	f10c 38ff 	add.w	r8, ip, #4294967295
 8010234:	d202      	bcs.n	801023c <__udivmoddi4+0x11c>
 8010236:	429a      	cmp	r2, r3
 8010238:	f200 80e0 	bhi.w	80103fc <__udivmoddi4+0x2dc>
 801023c:	46c4      	mov	ip, r8
 801023e:	1a9b      	subs	r3, r3, r2
 8010240:	fbb3 f2fe 	udiv	r2, r3, lr
 8010244:	fb0e 3312 	mls	r3, lr, r2, r3
 8010248:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 801024c:	fb02 f404 	mul.w	r4, r2, r4
 8010250:	429c      	cmp	r4, r3
 8010252:	d907      	bls.n	8010264 <__udivmoddi4+0x144>
 8010254:	18fb      	adds	r3, r7, r3
 8010256:	f102 30ff 	add.w	r0, r2, #4294967295
 801025a:	d202      	bcs.n	8010262 <__udivmoddi4+0x142>
 801025c:	429c      	cmp	r4, r3
 801025e:	f200 80ca 	bhi.w	80103f6 <__udivmoddi4+0x2d6>
 8010262:	4602      	mov	r2, r0
 8010264:	1b1b      	subs	r3, r3, r4
 8010266:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 801026a:	e7a5      	b.n	80101b8 <__udivmoddi4+0x98>
 801026c:	f1c1 0620 	rsb	r6, r1, #32
 8010270:	408b      	lsls	r3, r1
 8010272:	fa22 f706 	lsr.w	r7, r2, r6
 8010276:	431f      	orrs	r7, r3
 8010278:	fa0e f401 	lsl.w	r4, lr, r1
 801027c:	fa20 f306 	lsr.w	r3, r0, r6
 8010280:	fa2e fe06 	lsr.w	lr, lr, r6
 8010284:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8010288:	4323      	orrs	r3, r4
 801028a:	fa00 f801 	lsl.w	r8, r0, r1
 801028e:	fa1f fc87 	uxth.w	ip, r7
 8010292:	fbbe f0f9 	udiv	r0, lr, r9
 8010296:	0c1c      	lsrs	r4, r3, #16
 8010298:	fb09 ee10 	mls	lr, r9, r0, lr
 801029c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80102a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80102a4:	45a6      	cmp	lr, r4
 80102a6:	fa02 f201 	lsl.w	r2, r2, r1
 80102aa:	d909      	bls.n	80102c0 <__udivmoddi4+0x1a0>
 80102ac:	193c      	adds	r4, r7, r4
 80102ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80102b2:	f080 809c 	bcs.w	80103ee <__udivmoddi4+0x2ce>
 80102b6:	45a6      	cmp	lr, r4
 80102b8:	f240 8099 	bls.w	80103ee <__udivmoddi4+0x2ce>
 80102bc:	3802      	subs	r0, #2
 80102be:	443c      	add	r4, r7
 80102c0:	eba4 040e 	sub.w	r4, r4, lr
 80102c4:	fa1f fe83 	uxth.w	lr, r3
 80102c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80102cc:	fb09 4413 	mls	r4, r9, r3, r4
 80102d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80102d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80102d8:	45a4      	cmp	ip, r4
 80102da:	d908      	bls.n	80102ee <__udivmoddi4+0x1ce>
 80102dc:	193c      	adds	r4, r7, r4
 80102de:	f103 3eff 	add.w	lr, r3, #4294967295
 80102e2:	f080 8082 	bcs.w	80103ea <__udivmoddi4+0x2ca>
 80102e6:	45a4      	cmp	ip, r4
 80102e8:	d97f      	bls.n	80103ea <__udivmoddi4+0x2ca>
 80102ea:	3b02      	subs	r3, #2
 80102ec:	443c      	add	r4, r7
 80102ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80102f2:	eba4 040c 	sub.w	r4, r4, ip
 80102f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80102fa:	4564      	cmp	r4, ip
 80102fc:	4673      	mov	r3, lr
 80102fe:	46e1      	mov	r9, ip
 8010300:	d362      	bcc.n	80103c8 <__udivmoddi4+0x2a8>
 8010302:	d05f      	beq.n	80103c4 <__udivmoddi4+0x2a4>
 8010304:	b15d      	cbz	r5, 801031e <__udivmoddi4+0x1fe>
 8010306:	ebb8 0203 	subs.w	r2, r8, r3
 801030a:	eb64 0409 	sbc.w	r4, r4, r9
 801030e:	fa04 f606 	lsl.w	r6, r4, r6
 8010312:	fa22 f301 	lsr.w	r3, r2, r1
 8010316:	431e      	orrs	r6, r3
 8010318:	40cc      	lsrs	r4, r1
 801031a:	e9c5 6400 	strd	r6, r4, [r5]
 801031e:	2100      	movs	r1, #0
 8010320:	e74f      	b.n	80101c2 <__udivmoddi4+0xa2>
 8010322:	fbb1 fcf2 	udiv	ip, r1, r2
 8010326:	0c01      	lsrs	r1, r0, #16
 8010328:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 801032c:	b280      	uxth	r0, r0
 801032e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8010332:	463b      	mov	r3, r7
 8010334:	4638      	mov	r0, r7
 8010336:	463c      	mov	r4, r7
 8010338:	46b8      	mov	r8, r7
 801033a:	46be      	mov	lr, r7
 801033c:	2620      	movs	r6, #32
 801033e:	fbb1 f1f7 	udiv	r1, r1, r7
 8010342:	eba2 0208 	sub.w	r2, r2, r8
 8010346:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 801034a:	e766      	b.n	801021a <__udivmoddi4+0xfa>
 801034c:	4601      	mov	r1, r0
 801034e:	e718      	b.n	8010182 <__udivmoddi4+0x62>
 8010350:	4610      	mov	r0, r2
 8010352:	e72c      	b.n	80101ae <__udivmoddi4+0x8e>
 8010354:	f1c6 0220 	rsb	r2, r6, #32
 8010358:	fa2e f302 	lsr.w	r3, lr, r2
 801035c:	40b7      	lsls	r7, r6
 801035e:	40b1      	lsls	r1, r6
 8010360:	fa20 f202 	lsr.w	r2, r0, r2
 8010364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010368:	430a      	orrs	r2, r1
 801036a:	fbb3 f8fe 	udiv	r8, r3, lr
 801036e:	b2bc      	uxth	r4, r7
 8010370:	fb0e 3318 	mls	r3, lr, r8, r3
 8010374:	0c11      	lsrs	r1, r2, #16
 8010376:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801037a:	fb08 f904 	mul.w	r9, r8, r4
 801037e:	40b0      	lsls	r0, r6
 8010380:	4589      	cmp	r9, r1
 8010382:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8010386:	b280      	uxth	r0, r0
 8010388:	d93e      	bls.n	8010408 <__udivmoddi4+0x2e8>
 801038a:	1879      	adds	r1, r7, r1
 801038c:	f108 3cff 	add.w	ip, r8, #4294967295
 8010390:	d201      	bcs.n	8010396 <__udivmoddi4+0x276>
 8010392:	4589      	cmp	r9, r1
 8010394:	d81f      	bhi.n	80103d6 <__udivmoddi4+0x2b6>
 8010396:	eba1 0109 	sub.w	r1, r1, r9
 801039a:	fbb1 f9fe 	udiv	r9, r1, lr
 801039e:	fb09 f804 	mul.w	r8, r9, r4
 80103a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80103a6:	b292      	uxth	r2, r2
 80103a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80103ac:	4542      	cmp	r2, r8
 80103ae:	d229      	bcs.n	8010404 <__udivmoddi4+0x2e4>
 80103b0:	18ba      	adds	r2, r7, r2
 80103b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80103b6:	d2c4      	bcs.n	8010342 <__udivmoddi4+0x222>
 80103b8:	4542      	cmp	r2, r8
 80103ba:	d2c2      	bcs.n	8010342 <__udivmoddi4+0x222>
 80103bc:	f1a9 0102 	sub.w	r1, r9, #2
 80103c0:	443a      	add	r2, r7
 80103c2:	e7be      	b.n	8010342 <__udivmoddi4+0x222>
 80103c4:	45f0      	cmp	r8, lr
 80103c6:	d29d      	bcs.n	8010304 <__udivmoddi4+0x1e4>
 80103c8:	ebbe 0302 	subs.w	r3, lr, r2
 80103cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80103d0:	3801      	subs	r0, #1
 80103d2:	46e1      	mov	r9, ip
 80103d4:	e796      	b.n	8010304 <__udivmoddi4+0x1e4>
 80103d6:	eba7 0909 	sub.w	r9, r7, r9
 80103da:	4449      	add	r1, r9
 80103dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80103e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80103e4:	fb09 f804 	mul.w	r8, r9, r4
 80103e8:	e7db      	b.n	80103a2 <__udivmoddi4+0x282>
 80103ea:	4673      	mov	r3, lr
 80103ec:	e77f      	b.n	80102ee <__udivmoddi4+0x1ce>
 80103ee:	4650      	mov	r0, sl
 80103f0:	e766      	b.n	80102c0 <__udivmoddi4+0x1a0>
 80103f2:	4608      	mov	r0, r1
 80103f4:	e6fd      	b.n	80101f2 <__udivmoddi4+0xd2>
 80103f6:	443b      	add	r3, r7
 80103f8:	3a02      	subs	r2, #2
 80103fa:	e733      	b.n	8010264 <__udivmoddi4+0x144>
 80103fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8010400:	443b      	add	r3, r7
 8010402:	e71c      	b.n	801023e <__udivmoddi4+0x11e>
 8010404:	4649      	mov	r1, r9
 8010406:	e79c      	b.n	8010342 <__udivmoddi4+0x222>
 8010408:	eba1 0109 	sub.w	r1, r1, r9
 801040c:	46c4      	mov	ip, r8
 801040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8010412:	fb09 f804 	mul.w	r8, r9, r4
 8010416:	e7c4      	b.n	80103a2 <__udivmoddi4+0x282>

08010418 <__aeabi_idiv0>:
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop

0801041c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801041c:	b480      	push	{r7}
 801041e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8010420:	4b49      	ldr	r3, [pc, #292]	@ (8010548 <SystemInit+0x12c>)
 8010422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010426:	4a48      	ldr	r2, [pc, #288]	@ (8010548 <SystemInit+0x12c>)
 8010428:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801042c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8010430:	4b45      	ldr	r3, [pc, #276]	@ (8010548 <SystemInit+0x12c>)
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	4a44      	ldr	r2, [pc, #272]	@ (8010548 <SystemInit+0x12c>)
 8010436:	f043 0310 	orr.w	r3, r3, #16
 801043a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 801043c:	4b43      	ldr	r3, [pc, #268]	@ (801054c <SystemInit+0x130>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f003 030f 	and.w	r3, r3, #15
 8010444:	2b06      	cmp	r3, #6
 8010446:	d807      	bhi.n	8010458 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8010448:	4b40      	ldr	r3, [pc, #256]	@ (801054c <SystemInit+0x130>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f023 030f 	bic.w	r3, r3, #15
 8010450:	4a3e      	ldr	r2, [pc, #248]	@ (801054c <SystemInit+0x130>)
 8010452:	f043 0307 	orr.w	r3, r3, #7
 8010456:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8010458:	4b3d      	ldr	r3, [pc, #244]	@ (8010550 <SystemInit+0x134>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4a3c      	ldr	r2, [pc, #240]	@ (8010550 <SystemInit+0x134>)
 801045e:	f043 0301 	orr.w	r3, r3, #1
 8010462:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010464:	4b3a      	ldr	r3, [pc, #232]	@ (8010550 <SystemInit+0x134>)
 8010466:	2200      	movs	r2, #0
 8010468:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 801046a:	4b39      	ldr	r3, [pc, #228]	@ (8010550 <SystemInit+0x134>)
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	4938      	ldr	r1, [pc, #224]	@ (8010550 <SystemInit+0x134>)
 8010470:	4b38      	ldr	r3, [pc, #224]	@ (8010554 <SystemInit+0x138>)
 8010472:	4013      	ands	r3, r2
 8010474:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8010476:	4b35      	ldr	r3, [pc, #212]	@ (801054c <SystemInit+0x130>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f003 0308 	and.w	r3, r3, #8
 801047e:	2b00      	cmp	r3, #0
 8010480:	d007      	beq.n	8010492 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8010482:	4b32      	ldr	r3, [pc, #200]	@ (801054c <SystemInit+0x130>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f023 030f 	bic.w	r3, r3, #15
 801048a:	4a30      	ldr	r2, [pc, #192]	@ (801054c <SystemInit+0x130>)
 801048c:	f043 0307 	orr.w	r3, r3, #7
 8010490:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8010492:	4b2f      	ldr	r3, [pc, #188]	@ (8010550 <SystemInit+0x134>)
 8010494:	2200      	movs	r2, #0
 8010496:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8010498:	4b2d      	ldr	r3, [pc, #180]	@ (8010550 <SystemInit+0x134>)
 801049a:	2200      	movs	r2, #0
 801049c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 801049e:	4b2c      	ldr	r3, [pc, #176]	@ (8010550 <SystemInit+0x134>)
 80104a0:	2200      	movs	r2, #0
 80104a2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80104a4:	4b2a      	ldr	r3, [pc, #168]	@ (8010550 <SystemInit+0x134>)
 80104a6:	4a2c      	ldr	r2, [pc, #176]	@ (8010558 <SystemInit+0x13c>)
 80104a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80104aa:	4b29      	ldr	r3, [pc, #164]	@ (8010550 <SystemInit+0x134>)
 80104ac:	4a2b      	ldr	r2, [pc, #172]	@ (801055c <SystemInit+0x140>)
 80104ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80104b0:	4b27      	ldr	r3, [pc, #156]	@ (8010550 <SystemInit+0x134>)
 80104b2:	4a2b      	ldr	r2, [pc, #172]	@ (8010560 <SystemInit+0x144>)
 80104b4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80104b6:	4b26      	ldr	r3, [pc, #152]	@ (8010550 <SystemInit+0x134>)
 80104b8:	2200      	movs	r2, #0
 80104ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80104bc:	4b24      	ldr	r3, [pc, #144]	@ (8010550 <SystemInit+0x134>)
 80104be:	4a28      	ldr	r2, [pc, #160]	@ (8010560 <SystemInit+0x144>)
 80104c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80104c2:	4b23      	ldr	r3, [pc, #140]	@ (8010550 <SystemInit+0x134>)
 80104c4:	2200      	movs	r2, #0
 80104c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80104c8:	4b21      	ldr	r3, [pc, #132]	@ (8010550 <SystemInit+0x134>)
 80104ca:	4a25      	ldr	r2, [pc, #148]	@ (8010560 <SystemInit+0x144>)
 80104cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80104ce:	4b20      	ldr	r3, [pc, #128]	@ (8010550 <SystemInit+0x134>)
 80104d0:	2200      	movs	r2, #0
 80104d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80104d4:	4b1e      	ldr	r3, [pc, #120]	@ (8010550 <SystemInit+0x134>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4a1d      	ldr	r2, [pc, #116]	@ (8010550 <SystemInit+0x134>)
 80104da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80104de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80104e0:	4b1b      	ldr	r3, [pc, #108]	@ (8010550 <SystemInit+0x134>)
 80104e2:	2200      	movs	r2, #0
 80104e4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80104e6:	4b1f      	ldr	r3, [pc, #124]	@ (8010564 <SystemInit+0x148>)
 80104e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104ea:	4a1e      	ldr	r2, [pc, #120]	@ (8010564 <SystemInit+0x148>)
 80104ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80104f0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80104f2:	4b1d      	ldr	r3, [pc, #116]	@ (8010568 <SystemInit+0x14c>)
 80104f4:	681a      	ldr	r2, [r3, #0]
 80104f6:	4b1d      	ldr	r3, [pc, #116]	@ (801056c <SystemInit+0x150>)
 80104f8:	4013      	ands	r3, r2
 80104fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80104fe:	d202      	bcs.n	8010506 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8010500:	4b1b      	ldr	r3, [pc, #108]	@ (8010570 <SystemInit+0x154>)
 8010502:	2201      	movs	r2, #1
 8010504:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8010506:	4b12      	ldr	r3, [pc, #72]	@ (8010550 <SystemInit+0x134>)
 8010508:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801050c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010510:	2b00      	cmp	r3, #0
 8010512:	d113      	bne.n	801053c <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8010514:	4b0e      	ldr	r3, [pc, #56]	@ (8010550 <SystemInit+0x134>)
 8010516:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801051a:	4a0d      	ldr	r2, [pc, #52]	@ (8010550 <SystemInit+0x134>)
 801051c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010520:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8010524:	4b13      	ldr	r3, [pc, #76]	@ (8010574 <SystemInit+0x158>)
 8010526:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 801052a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 801052c:	4b08      	ldr	r3, [pc, #32]	@ (8010550 <SystemInit+0x134>)
 801052e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010532:	4a07      	ldr	r2, [pc, #28]	@ (8010550 <SystemInit+0x134>)
 8010534:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010538:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 801053c:	bf00      	nop
 801053e:	46bd      	mov	sp, r7
 8010540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop
 8010548:	e000ed00 	.word	0xe000ed00
 801054c:	52002000 	.word	0x52002000
 8010550:	58024400 	.word	0x58024400
 8010554:	eaf6ed7f 	.word	0xeaf6ed7f
 8010558:	02020200 	.word	0x02020200
 801055c:	01ff0000 	.word	0x01ff0000
 8010560:	01010280 	.word	0x01010280
 8010564:	580000c0 	.word	0x580000c0
 8010568:	5c001000 	.word	0x5c001000
 801056c:	ffff0000 	.word	0xffff0000
 8010570:	51008108 	.word	0x51008108
 8010574:	52004000 	.word	0x52004000

08010578 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8010578:	b480      	push	{r7}
 801057a:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 801057c:	4b0a      	ldr	r3, [pc, #40]	@ (80105a8 <ExitRun0Mode+0x30>)
 801057e:	68db      	ldr	r3, [r3, #12]
 8010580:	f023 0306 	bic.w	r3, r3, #6
 8010584:	4a08      	ldr	r2, [pc, #32]	@ (80105a8 <ExitRun0Mode+0x30>)
 8010586:	f043 0302 	orr.w	r3, r3, #2
 801058a:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 801058c:	bf00      	nop
 801058e:	4b06      	ldr	r3, [pc, #24]	@ (80105a8 <ExitRun0Mode+0x30>)
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010596:	2b00      	cmp	r3, #0
 8010598:	d0f9      	beq.n	801058e <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 801059a:	bf00      	nop
 801059c:	bf00      	nop
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr
 80105a6:	bf00      	nop
 80105a8:	58024800 	.word	0x58024800

080105ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b083      	sub	sp, #12
 80105b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80105b2:	4b0a      	ldr	r3, [pc, #40]	@ (80105dc <MX_GPIO_Init+0x30>)
 80105b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105b8:	4a08      	ldr	r2, [pc, #32]	@ (80105dc <MX_GPIO_Init+0x30>)
 80105ba:	f043 0308 	orr.w	r3, r3, #8
 80105be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80105c2:	4b06      	ldr	r3, [pc, #24]	@ (80105dc <MX_GPIO_Init+0x30>)
 80105c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105c8:	f003 0308 	and.w	r3, r3, #8
 80105cc:	607b      	str	r3, [r7, #4]
 80105ce:	687b      	ldr	r3, [r7, #4]

}
 80105d0:	bf00      	nop
 80105d2:	370c      	adds	r7, #12
 80105d4:	46bd      	mov	sp, r7
 80105d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105da:	4770      	bx	lr
 80105dc:	58024400 	.word	0x58024400

080105e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b086      	sub	sp, #24
 80105e4:	af00      	add	r7, sp, #0
  int32_t timeout;
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80105e6:	f000 f92f 	bl	8010848 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80105ea:	4b57      	ldr	r3, [pc, #348]	@ (8010748 <main+0x168>)
 80105ec:	695b      	ldr	r3, [r3, #20]
 80105ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d11b      	bne.n	801062e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80105f6:	f3bf 8f4f 	dsb	sy
}
 80105fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80105fc:	f3bf 8f6f 	isb	sy
}
 8010600:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8010602:	4b51      	ldr	r3, [pc, #324]	@ (8010748 <main+0x168>)
 8010604:	2200      	movs	r2, #0
 8010606:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 801060a:	f3bf 8f4f 	dsb	sy
}
 801060e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010610:	f3bf 8f6f 	isb	sy
}
 8010614:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8010616:	4b4c      	ldr	r3, [pc, #304]	@ (8010748 <main+0x168>)
 8010618:	695b      	ldr	r3, [r3, #20]
 801061a:	4a4b      	ldr	r2, [pc, #300]	@ (8010748 <main+0x168>)
 801061c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010620:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8010622:	f3bf 8f4f 	dsb	sy
}
 8010626:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010628:	f3bf 8f6f 	isb	sy
}
 801062c:	e000      	b.n	8010630 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 801062e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8010630:	4b45      	ldr	r3, [pc, #276]	@ (8010748 <main+0x168>)
 8010632:	695b      	ldr	r3, [r3, #20]
 8010634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010638:	2b00      	cmp	r3, #0
 801063a:	d138      	bne.n	80106ae <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 801063c:	4b42      	ldr	r3, [pc, #264]	@ (8010748 <main+0x168>)
 801063e:	2200      	movs	r2, #0
 8010640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8010644:	f3bf 8f4f 	dsb	sy
}
 8010648:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 801064a:	4b3f      	ldr	r3, [pc, #252]	@ (8010748 <main+0x168>)
 801064c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010650:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	0b5b      	lsrs	r3, r3, #13
 8010656:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801065a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	08db      	lsrs	r3, r3, #3
 8010660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010664:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	015a      	lsls	r2, r3, #5
 801066a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 801066e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8010670:	68ba      	ldr	r2, [r7, #8]
 8010672:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8010674:	4934      	ldr	r1, [pc, #208]	@ (8010748 <main+0x168>)
 8010676:	4313      	orrs	r3, r2
 8010678:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	1e5a      	subs	r2, r3, #1
 8010680:	60ba      	str	r2, [r7, #8]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d1ef      	bne.n	8010666 <main+0x86>
    } while(sets-- != 0U);
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	1e5a      	subs	r2, r3, #1
 801068a:	60fa      	str	r2, [r7, #12]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d1e5      	bne.n	801065c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8010690:	f3bf 8f4f 	dsb	sy
}
 8010694:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8010696:	4b2c      	ldr	r3, [pc, #176]	@ (8010748 <main+0x168>)
 8010698:	695b      	ldr	r3, [r3, #20]
 801069a:	4a2b      	ldr	r2, [pc, #172]	@ (8010748 <main+0x168>)
 801069c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80106a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80106a2:	f3bf 8f4f 	dsb	sy
}
 80106a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80106a8:	f3bf 8f6f 	isb	sy
}
 80106ac:	e000      	b.n	80106b0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80106ae:	bf00      	nop
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80106b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80106b4:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80106b6:	bf00      	nop
 80106b8:	4b24      	ldr	r3, [pc, #144]	@ (801074c <main+0x16c>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d004      	beq.n	80106ce <main+0xee>
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	1e5a      	subs	r2, r3, #1
 80106c8:	617a      	str	r2, [r7, #20]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	dcf4      	bgt.n	80106b8 <main+0xd8>
  if ( timeout < 0 )
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	da01      	bge.n	80106d8 <main+0xf8>
  {
  Error_Handler();
 80106d4:	f000 f8e4 	bl	80108a0 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80106d8:	f000 fa9c 	bl	8010c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80106dc:	f000 f838 	bl	8010750 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80106e0:	4b1a      	ldr	r3, [pc, #104]	@ (801074c <main+0x16c>)
 80106e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106e6:	4a19      	ldr	r2, [pc, #100]	@ (801074c <main+0x16c>)
 80106e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80106ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80106f0:	4b16      	ldr	r3, [pc, #88]	@ (801074c <main+0x16c>)
 80106f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80106fa:	607b      	str	r3, [r7, #4]
 80106fc:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80106fe:	2000      	movs	r0, #0
 8010700:	f000 fe32 	bl	8011368 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8010704:	2100      	movs	r1, #0
 8010706:	2000      	movs	r0, #0
 8010708:	f000 fe48 	bl	801139c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 801070c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010710:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8010712:	bf00      	nop
 8010714:	4b0d      	ldr	r3, [pc, #52]	@ (801074c <main+0x16c>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801071c:	2b00      	cmp	r3, #0
 801071e:	d104      	bne.n	801072a <main+0x14a>
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	1e5a      	subs	r2, r3, #1
 8010724:	617a      	str	r2, [r7, #20]
 8010726:	2b00      	cmp	r3, #0
 8010728:	dcf4      	bgt.n	8010714 <main+0x134>
if ( timeout < 0 )
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	2b00      	cmp	r3, #0
 801072e:	da01      	bge.n	8010734 <main+0x154>
{
Error_Handler();
 8010730:	f000 f8b6 	bl	80108a0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010734:	f7ff ff3a 	bl	80105ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8010738:	f000 f98a 	bl	8010a50 <MX_USART3_UART_Init>
  MX_X_CUBE_AI_Init();
 801073c:	f004 fe9e 	bl	801547c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8010740:	f004 feaa 	bl	8015498 <MX_X_CUBE_AI_Process>
 8010744:	e7fc      	b.n	8010740 <main+0x160>
 8010746:	bf00      	nop
 8010748:	e000ed00 	.word	0xe000ed00
 801074c:	58024400 	.word	0x58024400

08010750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b09c      	sub	sp, #112	@ 0x70
 8010754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801075a:	224c      	movs	r2, #76	@ 0x4c
 801075c:	2100      	movs	r1, #0
 801075e:	4618      	mov	r0, r3
 8010760:	f012 f99a 	bl	8022a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010764:	1d3b      	adds	r3, r7, #4
 8010766:	2220      	movs	r2, #32
 8010768:	2100      	movs	r1, #0
 801076a:	4618      	mov	r0, r3
 801076c:	f012 f994 	bl	8022a98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8010770:	2002      	movs	r0, #2
 8010772:	f000 fe27 	bl	80113c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8010776:	2300      	movs	r3, #0
 8010778:	603b      	str	r3, [r7, #0]
 801077a:	4b31      	ldr	r3, [pc, #196]	@ (8010840 <SystemClock_Config+0xf0>)
 801077c:	699b      	ldr	r3, [r3, #24]
 801077e:	4a30      	ldr	r2, [pc, #192]	@ (8010840 <SystemClock_Config+0xf0>)
 8010780:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010784:	6193      	str	r3, [r2, #24]
 8010786:	4b2e      	ldr	r3, [pc, #184]	@ (8010840 <SystemClock_Config+0xf0>)
 8010788:	699b      	ldr	r3, [r3, #24]
 801078a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801078e:	603b      	str	r3, [r7, #0]
 8010790:	4b2c      	ldr	r3, [pc, #176]	@ (8010844 <SystemClock_Config+0xf4>)
 8010792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010794:	4a2b      	ldr	r2, [pc, #172]	@ (8010844 <SystemClock_Config+0xf4>)
 8010796:	f043 0301 	orr.w	r3, r3, #1
 801079a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801079c:	4b29      	ldr	r3, [pc, #164]	@ (8010844 <SystemClock_Config+0xf4>)
 801079e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107a0:	f003 0301 	and.w	r3, r3, #1
 80107a4:	603b      	str	r3, [r7, #0]
 80107a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80107a8:	bf00      	nop
 80107aa:	4b25      	ldr	r3, [pc, #148]	@ (8010840 <SystemClock_Config+0xf0>)
 80107ac:	699b      	ldr	r3, [r3, #24]
 80107ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80107b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80107b6:	d1f8      	bne.n	80107aa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80107b8:	2301      	movs	r3, #1
 80107ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80107bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80107c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80107c2:	2302      	movs	r3, #2
 80107c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80107c6:	2302      	movs	r3, #2
 80107c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80107ca:	2304      	movs	r3, #4
 80107cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 480;
 80107ce:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80107d2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80107d4:	2302      	movs	r3, #2
 80107d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80107d8:	2314      	movs	r3, #20
 80107da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80107dc:	2302      	movs	r3, #2
 80107de:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80107e0:	2304      	movs	r3, #4
 80107e2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80107e4:	2300      	movs	r3, #0
 80107e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80107e8:	2300      	movs	r3, #0
 80107ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80107ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80107f0:	4618      	mov	r0, r3
 80107f2:	f000 fe41 	bl	8011478 <HAL_RCC_OscConfig>
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d001      	beq.n	8010800 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80107fc:	f000 f850 	bl	80108a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010800:	233f      	movs	r3, #63	@ 0x3f
 8010802:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010804:	2303      	movs	r3, #3
 8010806:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8010808:	2300      	movs	r3, #0
 801080a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 801080c:	2308      	movs	r3, #8
 801080e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8010810:	2340      	movs	r3, #64	@ 0x40
 8010812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8010814:	2340      	movs	r3, #64	@ 0x40
 8010816:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8010818:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801081c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 801081e:	2340      	movs	r3, #64	@ 0x40
 8010820:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8010822:	1d3b      	adds	r3, r7, #4
 8010824:	2104      	movs	r1, #4
 8010826:	4618      	mov	r0, r3
 8010828:	f001 fa80 	bl	8011d2c <HAL_RCC_ClockConfig>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	d001      	beq.n	8010836 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8010832:	f000 f835 	bl	80108a0 <Error_Handler>
  }
}
 8010836:	bf00      	nop
 8010838:	3770      	adds	r7, #112	@ 0x70
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	58024800 	.word	0x58024800
 8010844:	58000400 	.word	0x58000400

08010848 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b084      	sub	sp, #16
 801084c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 801084e:	463b      	mov	r3, r7
 8010850:	2200      	movs	r2, #0
 8010852:	601a      	str	r2, [r3, #0]
 8010854:	605a      	str	r2, [r3, #4]
 8010856:	609a      	str	r2, [r3, #8]
 8010858:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 801085a:	f000 fb5d 	bl	8010f18 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801085e:	2301      	movs	r3, #1
 8010860:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8010862:	2300      	movs	r3, #0
 8010864:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8010866:	2300      	movs	r3, #0
 8010868:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 801086a:	231f      	movs	r3, #31
 801086c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 801086e:	2387      	movs	r3, #135	@ 0x87
 8010870:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8010872:	2300      	movs	r3, #0
 8010874:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8010876:	2300      	movs	r3, #0
 8010878:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 801087a:	2301      	movs	r3, #1
 801087c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 801087e:	2301      	movs	r3, #1
 8010880:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8010882:	2300      	movs	r3, #0
 8010884:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8010886:	2300      	movs	r3, #0
 8010888:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801088a:	463b      	mov	r3, r7
 801088c:	4618      	mov	r0, r3
 801088e:	f000 fb7b 	bl	8010f88 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8010892:	2004      	movs	r0, #4
 8010894:	f000 fb58 	bl	8010f48 <HAL_MPU_Enable>

}
 8010898:	bf00      	nop
 801089a:	3710      	adds	r7, #16
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80108a0:	b480      	push	{r7}
 80108a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80108a4:	b672      	cpsid	i
}
 80108a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80108a8:	bf00      	nop
 80108aa:	e7fd      	b.n	80108a8 <Error_Handler+0x8>

080108ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b083      	sub	sp, #12
 80108b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80108b2:	4b0a      	ldr	r3, [pc, #40]	@ (80108dc <HAL_MspInit+0x30>)
 80108b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80108b8:	4a08      	ldr	r2, [pc, #32]	@ (80108dc <HAL_MspInit+0x30>)
 80108ba:	f043 0302 	orr.w	r3, r3, #2
 80108be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80108c2:	4b06      	ldr	r3, [pc, #24]	@ (80108dc <HAL_MspInit+0x30>)
 80108c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80108c8:	f003 0302 	and.w	r3, r3, #2
 80108cc:	607b      	str	r3, [r7, #4]
 80108ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80108d0:	bf00      	nop
 80108d2:	370c      	adds	r7, #12
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr
 80108dc:	58024400 	.word	0x58024400

080108e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80108e0:	b480      	push	{r7}
 80108e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80108e4:	bf00      	nop
 80108e6:	e7fd      	b.n	80108e4 <NMI_Handler+0x4>

080108e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80108e8:	b480      	push	{r7}
 80108ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80108ec:	bf00      	nop
 80108ee:	e7fd      	b.n	80108ec <HardFault_Handler+0x4>

080108f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80108f0:	b480      	push	{r7}
 80108f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80108f4:	bf00      	nop
 80108f6:	e7fd      	b.n	80108f4 <MemManage_Handler+0x4>

080108f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80108f8:	b480      	push	{r7}
 80108fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80108fc:	bf00      	nop
 80108fe:	e7fd      	b.n	80108fc <BusFault_Handler+0x4>

08010900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010900:	b480      	push	{r7}
 8010902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010904:	bf00      	nop
 8010906:	e7fd      	b.n	8010904 <UsageFault_Handler+0x4>

08010908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010908:	b480      	push	{r7}
 801090a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801090c:	bf00      	nop
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr

08010916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010916:	b480      	push	{r7}
 8010918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801091a:	bf00      	nop
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010924:	b480      	push	{r7}
 8010926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010928:	bf00      	nop
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010932:	b580      	push	{r7, lr}
 8010934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010936:	f000 f9df 	bl	8010cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801093a:	bf00      	nop
 801093c:	bd80      	pop	{r7, pc}

0801093e <_close>:
#include <sys/stat.h>
#include <errno.h>

int _close(int file) {
 801093e:	b480      	push	{r7}
 8010940:	b083      	sub	sp, #12
 8010942:	af00      	add	r7, sp, #0
 8010944:	6078      	str	r0, [r7, #4]
    return -1;
 8010946:	f04f 33ff 	mov.w	r3, #4294967295
}
 801094a:	4618      	mov	r0, r3
 801094c:	370c      	adds	r7, #12
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr

08010956 <_fstat>:

int _fstat(int file, struct stat *st) {
 8010956:	b480      	push	{r7}
 8010958:	b083      	sub	sp, #12
 801095a:	af00      	add	r7, sp, #0
 801095c:	6078      	str	r0, [r7, #4]
 801095e:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8010966:	605a      	str	r2, [r3, #4]
    return 0;
 8010968:	2300      	movs	r3, #0
}
 801096a:	4618      	mov	r0, r3
 801096c:	370c      	adds	r7, #12
 801096e:	46bd      	mov	sp, r7
 8010970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010974:	4770      	bx	lr

08010976 <_isatty>:

int _isatty(int file) {
 8010976:	b480      	push	{r7}
 8010978:	b083      	sub	sp, #12
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
    return 1;
 801097e:	2301      	movs	r3, #1
}
 8010980:	4618      	mov	r0, r3
 8010982:	370c      	adds	r7, #12
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr

0801098c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 801098c:	b480      	push	{r7}
 801098e:	b085      	sub	sp, #20
 8010990:	af00      	add	r7, sp, #0
 8010992:	60f8      	str	r0, [r7, #12]
 8010994:	60b9      	str	r1, [r7, #8]
 8010996:	607a      	str	r2, [r7, #4]
    return 0;
 8010998:	2300      	movs	r3, #0
}
 801099a:	4618      	mov	r0, r3
 801099c:	3714      	adds	r7, #20
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr

080109a6 <_read>:

int _read(int file, char *ptr, int len) {
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b084      	sub	sp, #16
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	60f8      	str	r0, [r7, #12]
 80109ae:	60b9      	str	r1, [r7, #8]
 80109b0:	607a      	str	r2, [r7, #4]
    errno = EINVAL;
 80109b2:	f012 f8cf 	bl	8022b54 <__errno>
 80109b6:	4603      	mov	r3, r0
 80109b8:	2216      	movs	r2, #22
 80109ba:	601a      	str	r2, [r3, #0]
    return -1;
 80109bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3710      	adds	r7, #16
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <_write>:

int _write(int file, char *ptr, int len) {
 80109c8:	b480      	push	{r7}
 80109ca:	b085      	sub	sp, #20
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	607a      	str	r2, [r7, #4]
    // Send to SWO / UART / ignore
    return len;
 80109d4:	687b      	ldr	r3, [r7, #4]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3714      	adds	r7, #20
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr
	...

080109e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b086      	sub	sp, #24
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80109ec:	4a14      	ldr	r2, [pc, #80]	@ (8010a40 <_sbrk+0x5c>)
 80109ee:	4b15      	ldr	r3, [pc, #84]	@ (8010a44 <_sbrk+0x60>)
 80109f0:	1ad3      	subs	r3, r2, r3
 80109f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80109f8:	4b13      	ldr	r3, [pc, #76]	@ (8010a48 <_sbrk+0x64>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d102      	bne.n	8010a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010a00:	4b11      	ldr	r3, [pc, #68]	@ (8010a48 <_sbrk+0x64>)
 8010a02:	4a12      	ldr	r2, [pc, #72]	@ (8010a4c <_sbrk+0x68>)
 8010a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010a06:	4b10      	ldr	r3, [pc, #64]	@ (8010a48 <_sbrk+0x64>)
 8010a08:	681a      	ldr	r2, [r3, #0]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	4413      	add	r3, r2
 8010a0e:	693a      	ldr	r2, [r7, #16]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d207      	bcs.n	8010a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010a14:	f012 f89e 	bl	8022b54 <__errno>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	220c      	movs	r2, #12
 8010a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8010a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a22:	e009      	b.n	8010a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010a24:	4b08      	ldr	r3, [pc, #32]	@ (8010a48 <_sbrk+0x64>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010a2a:	4b07      	ldr	r3, [pc, #28]	@ (8010a48 <_sbrk+0x64>)
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4413      	add	r3, r2
 8010a32:	4a05      	ldr	r2, [pc, #20]	@ (8010a48 <_sbrk+0x64>)
 8010a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010a36:	68fb      	ldr	r3, [r7, #12]
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	3718      	adds	r7, #24
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}
 8010a40:	24080000 	.word	0x24080000
 8010a44:	00000800 	.word	0x00000800
 8010a48:	24000adc 	.word	0x24000adc
 8010a4c:	20000000 	.word	0x20000000

08010a50 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8010a54:	4b22      	ldr	r3, [pc, #136]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010a56:	4a23      	ldr	r2, [pc, #140]	@ (8010ae4 <MX_USART3_UART_Init+0x94>)
 8010a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8010a5a:	4b21      	ldr	r3, [pc, #132]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010a5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8010a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8010a62:	4b1f      	ldr	r3, [pc, #124]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010a64:	2200      	movs	r2, #0
 8010a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8010a68:	4b1d      	ldr	r3, [pc, #116]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8010a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010a70:	2200      	movs	r2, #0
 8010a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8010a74:	4b1a      	ldr	r3, [pc, #104]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010a76:	220c      	movs	r2, #12
 8010a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010a7a:	4b19      	ldr	r3, [pc, #100]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8010a80:	4b17      	ldr	r3, [pc, #92]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010a82:	2200      	movs	r2, #0
 8010a84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010a86:	4b16      	ldr	r3, [pc, #88]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010a88:	2200      	movs	r2, #0
 8010a8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8010a8c:	4b14      	ldr	r3, [pc, #80]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010a8e:	2200      	movs	r2, #0
 8010a90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010a92:	4b13      	ldr	r3, [pc, #76]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010a94:	2200      	movs	r2, #0
 8010a96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8010a98:	4811      	ldr	r0, [pc, #68]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010a9a:	f003 faff 	bl	801409c <HAL_UART_Init>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d001      	beq.n	8010aa8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8010aa4:	f7ff fefc 	bl	80108a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010aa8:	2100      	movs	r1, #0
 8010aaa:	480d      	ldr	r0, [pc, #52]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010aac:	f004 fb95 	bl	80151da <HAL_UARTEx_SetTxFifoThreshold>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d001      	beq.n	8010aba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8010ab6:	f7ff fef3 	bl	80108a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010aba:	2100      	movs	r1, #0
 8010abc:	4808      	ldr	r0, [pc, #32]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010abe:	f004 fbca 	bl	8015256 <HAL_UARTEx_SetRxFifoThreshold>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d001      	beq.n	8010acc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8010ac8:	f7ff feea 	bl	80108a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8010acc:	4804      	ldr	r0, [pc, #16]	@ (8010ae0 <MX_USART3_UART_Init+0x90>)
 8010ace:	f004 fb4b 	bl	8015168 <HAL_UARTEx_DisableFifoMode>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d001      	beq.n	8010adc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8010ad8:	f7ff fee2 	bl	80108a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8010adc:	bf00      	nop
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	24000ae0 	.word	0x24000ae0
 8010ae4:	40004800 	.word	0x40004800

08010ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b0ba      	sub	sp, #232	@ 0xe8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010af0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010af4:	2200      	movs	r2, #0
 8010af6:	601a      	str	r2, [r3, #0]
 8010af8:	605a      	str	r2, [r3, #4]
 8010afa:	609a      	str	r2, [r3, #8]
 8010afc:	60da      	str	r2, [r3, #12]
 8010afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010b00:	f107 0310 	add.w	r3, r7, #16
 8010b04:	22c0      	movs	r2, #192	@ 0xc0
 8010b06:	2100      	movs	r1, #0
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f011 ffc5 	bl	8022a98 <memset>
  if(uartHandle->Instance==USART3)
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4a27      	ldr	r2, [pc, #156]	@ (8010bb0 <HAL_UART_MspInit+0xc8>)
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d146      	bne.n	8010ba6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8010b18:	f04f 0202 	mov.w	r2, #2
 8010b1c:	f04f 0300 	mov.w	r3, #0
 8010b20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8010b24:	2300      	movs	r3, #0
 8010b26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010b2a:	f107 0310 	add.w	r3, r7, #16
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f001 fc88 	bl	8012444 <HAL_RCCEx_PeriphCLKConfig>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d001      	beq.n	8010b3e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8010b3a:	f7ff feb1 	bl	80108a0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8010b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8010bb4 <HAL_UART_MspInit+0xcc>)
 8010b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010b44:	4a1b      	ldr	r2, [pc, #108]	@ (8010bb4 <HAL_UART_MspInit+0xcc>)
 8010b46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010b4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010b4e:	4b19      	ldr	r3, [pc, #100]	@ (8010bb4 <HAL_UART_MspInit+0xcc>)
 8010b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010b54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010b58:	60fb      	str	r3, [r7, #12]
 8010b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010b5c:	4b15      	ldr	r3, [pc, #84]	@ (8010bb4 <HAL_UART_MspInit+0xcc>)
 8010b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b62:	4a14      	ldr	r2, [pc, #80]	@ (8010bb4 <HAL_UART_MspInit+0xcc>)
 8010b64:	f043 0308 	orr.w	r3, r3, #8
 8010b68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010b6c:	4b11      	ldr	r3, [pc, #68]	@ (8010bb4 <HAL_UART_MspInit+0xcc>)
 8010b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b72:	f003 0308 	and.w	r3, r3, #8
 8010b76:	60bb      	str	r3, [r7, #8]
 8010b78:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8010b7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b82:	2302      	movs	r3, #2
 8010b84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8010b94:	2307      	movs	r3, #7
 8010b96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010b9a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	4805      	ldr	r0, [pc, #20]	@ (8010bb8 <HAL_UART_MspInit+0xd0>)
 8010ba2:	f000 fa31 	bl	8011008 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8010ba6:	bf00      	nop
 8010ba8:	37e8      	adds	r7, #232	@ 0xe8
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	40004800 	.word	0x40004800
 8010bb4:	58024400 	.word	0x58024400
 8010bb8:	58020c00 	.word	0x58020c00

08010bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8010bbc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8010bf8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8010bc0:	f7ff fcda 	bl	8010578 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8010bc4:	f7ff fc2a 	bl	801041c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010bc8:	480c      	ldr	r0, [pc, #48]	@ (8010bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8010bca:	490d      	ldr	r1, [pc, #52]	@ (8010c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8010bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8010c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8010bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010bd0:	e002      	b.n	8010bd8 <LoopCopyDataInit>

08010bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010bd6:	3304      	adds	r3, #4

08010bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010bdc:	d3f9      	bcc.n	8010bd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010bde:	4a0a      	ldr	r2, [pc, #40]	@ (8010c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8010be0:	4c0a      	ldr	r4, [pc, #40]	@ (8010c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8010be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010be4:	e001      	b.n	8010bea <LoopFillZerobss>

08010be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010be8:	3204      	adds	r2, #4

08010bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010bec:	d3fb      	bcc.n	8010be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8010bee:	f011 ffb7 	bl	8022b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010bf2:	f7ff fcf5 	bl	80105e0 <main>
  bx  lr
 8010bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010bf8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8010bfc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8010c00:	24000aa8 	.word	0x24000aa8
  ldr r2, =_sidata
 8010c04:	08041f0c 	.word	0x08041f0c
  ldr r2, =_sbss
 8010c08:	24000ac0 	.word	0x24000ac0
  ldr r4, =_ebss
 8010c0c:	240045ac 	.word	0x240045ac

08010c10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010c10:	e7fe      	b.n	8010c10 <ADC3_IRQHandler>
	...

08010c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010c1a:	2003      	movs	r0, #3
 8010c1c:	f000 f94a 	bl	8010eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010c20:	f001 fa3a 	bl	8012098 <HAL_RCC_GetSysClockFreq>
 8010c24:	4602      	mov	r2, r0
 8010c26:	4b15      	ldr	r3, [pc, #84]	@ (8010c7c <HAL_Init+0x68>)
 8010c28:	699b      	ldr	r3, [r3, #24]
 8010c2a:	0a1b      	lsrs	r3, r3, #8
 8010c2c:	f003 030f 	and.w	r3, r3, #15
 8010c30:	4913      	ldr	r1, [pc, #76]	@ (8010c80 <HAL_Init+0x6c>)
 8010c32:	5ccb      	ldrb	r3, [r1, r3]
 8010c34:	f003 031f 	and.w	r3, r3, #31
 8010c38:	fa22 f303 	lsr.w	r3, r2, r3
 8010c3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8010c7c <HAL_Init+0x68>)
 8010c40:	699b      	ldr	r3, [r3, #24]
 8010c42:	f003 030f 	and.w	r3, r3, #15
 8010c46:	4a0e      	ldr	r2, [pc, #56]	@ (8010c80 <HAL_Init+0x6c>)
 8010c48:	5cd3      	ldrb	r3, [r2, r3]
 8010c4a:	f003 031f 	and.w	r3, r3, #31
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	fa22 f303 	lsr.w	r3, r2, r3
 8010c54:	4a0b      	ldr	r2, [pc, #44]	@ (8010c84 <HAL_Init+0x70>)
 8010c56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010c58:	4a0b      	ldr	r2, [pc, #44]	@ (8010c88 <HAL_Init+0x74>)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010c5e:	200f      	movs	r0, #15
 8010c60:	f000 f814 	bl	8010c8c <HAL_InitTick>
 8010c64:	4603      	mov	r3, r0
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d001      	beq.n	8010c6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e002      	b.n	8010c74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8010c6e:	f7ff fe1d 	bl	80108ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010c72:	2300      	movs	r3, #0
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3708      	adds	r7, #8
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}
 8010c7c:	58024400 	.word	0x58024400
 8010c80:	08023888 	.word	0x08023888
 8010c84:	24000004 	.word	0x24000004
 8010c88:	24000000 	.word	0x24000000

08010c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8010c94:	4b15      	ldr	r3, [pc, #84]	@ (8010cec <HAL_InitTick+0x60>)
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d101      	bne.n	8010ca0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8010c9c:	2301      	movs	r3, #1
 8010c9e:	e021      	b.n	8010ce4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8010ca0:	4b13      	ldr	r3, [pc, #76]	@ (8010cf0 <HAL_InitTick+0x64>)
 8010ca2:	681a      	ldr	r2, [r3, #0]
 8010ca4:	4b11      	ldr	r3, [pc, #68]	@ (8010cec <HAL_InitTick+0x60>)
 8010ca6:	781b      	ldrb	r3, [r3, #0]
 8010ca8:	4619      	mov	r1, r3
 8010caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f000 f921 	bl	8010efe <HAL_SYSTICK_Config>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d001      	beq.n	8010cc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e00e      	b.n	8010ce4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2b0f      	cmp	r3, #15
 8010cca:	d80a      	bhi.n	8010ce2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010ccc:	2200      	movs	r2, #0
 8010cce:	6879      	ldr	r1, [r7, #4]
 8010cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd4:	f000 f8f9 	bl	8010eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010cd8:	4a06      	ldr	r2, [pc, #24]	@ (8010cf4 <HAL_InitTick+0x68>)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	e000      	b.n	8010ce4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8010ce2:	2301      	movs	r3, #1
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	2400000c 	.word	0x2400000c
 8010cf0:	24000000 	.word	0x24000000
 8010cf4:	24000008 	.word	0x24000008

08010cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8010cfc:	4b06      	ldr	r3, [pc, #24]	@ (8010d18 <HAL_IncTick+0x20>)
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	461a      	mov	r2, r3
 8010d02:	4b06      	ldr	r3, [pc, #24]	@ (8010d1c <HAL_IncTick+0x24>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4413      	add	r3, r2
 8010d08:	4a04      	ldr	r2, [pc, #16]	@ (8010d1c <HAL_IncTick+0x24>)
 8010d0a:	6013      	str	r3, [r2, #0]
}
 8010d0c:	bf00      	nop
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop
 8010d18:	2400000c 	.word	0x2400000c
 8010d1c:	24000b74 	.word	0x24000b74

08010d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010d20:	b480      	push	{r7}
 8010d22:	af00      	add	r7, sp, #0
  return uwTick;
 8010d24:	4b03      	ldr	r3, [pc, #12]	@ (8010d34 <HAL_GetTick+0x14>)
 8010d26:	681b      	ldr	r3, [r3, #0]
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr
 8010d32:	bf00      	nop
 8010d34:	24000b74 	.word	0x24000b74

08010d38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8010d3c:	4b03      	ldr	r3, [pc, #12]	@ (8010d4c <HAL_GetREVID+0x14>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	0c1b      	lsrs	r3, r3, #16
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr
 8010d4c:	5c001000 	.word	0x5c001000

08010d50 <__NVIC_SetPriorityGrouping>:
{
 8010d50:	b480      	push	{r7}
 8010d52:	b085      	sub	sp, #20
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f003 0307 	and.w	r3, r3, #7
 8010d5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010d60:	4b0b      	ldr	r3, [pc, #44]	@ (8010d90 <__NVIC_SetPriorityGrouping+0x40>)
 8010d62:	68db      	ldr	r3, [r3, #12]
 8010d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010d66:	68ba      	ldr	r2, [r7, #8]
 8010d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010d6c:	4013      	ands	r3, r2
 8010d6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8010d78:	4b06      	ldr	r3, [pc, #24]	@ (8010d94 <__NVIC_SetPriorityGrouping+0x44>)
 8010d7a:	4313      	orrs	r3, r2
 8010d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010d7e:	4a04      	ldr	r2, [pc, #16]	@ (8010d90 <__NVIC_SetPriorityGrouping+0x40>)
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	60d3      	str	r3, [r2, #12]
}
 8010d84:	bf00      	nop
 8010d86:	3714      	adds	r7, #20
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr
 8010d90:	e000ed00 	.word	0xe000ed00
 8010d94:	05fa0000 	.word	0x05fa0000

08010d98 <__NVIC_GetPriorityGrouping>:
{
 8010d98:	b480      	push	{r7}
 8010d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010d9c:	4b04      	ldr	r3, [pc, #16]	@ (8010db0 <__NVIC_GetPriorityGrouping+0x18>)
 8010d9e:	68db      	ldr	r3, [r3, #12]
 8010da0:	0a1b      	lsrs	r3, r3, #8
 8010da2:	f003 0307 	and.w	r3, r3, #7
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr
 8010db0:	e000ed00 	.word	0xe000ed00

08010db4 <__NVIC_SetPriority>:
{
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	4603      	mov	r3, r0
 8010dbc:	6039      	str	r1, [r7, #0]
 8010dbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	db0a      	blt.n	8010dde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	b2da      	uxtb	r2, r3
 8010dcc:	490c      	ldr	r1, [pc, #48]	@ (8010e00 <__NVIC_SetPriority+0x4c>)
 8010dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dd2:	0112      	lsls	r2, r2, #4
 8010dd4:	b2d2      	uxtb	r2, r2
 8010dd6:	440b      	add	r3, r1
 8010dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010ddc:	e00a      	b.n	8010df4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	b2da      	uxtb	r2, r3
 8010de2:	4908      	ldr	r1, [pc, #32]	@ (8010e04 <__NVIC_SetPriority+0x50>)
 8010de4:	88fb      	ldrh	r3, [r7, #6]
 8010de6:	f003 030f 	and.w	r3, r3, #15
 8010dea:	3b04      	subs	r3, #4
 8010dec:	0112      	lsls	r2, r2, #4
 8010dee:	b2d2      	uxtb	r2, r2
 8010df0:	440b      	add	r3, r1
 8010df2:	761a      	strb	r2, [r3, #24]
}
 8010df4:	bf00      	nop
 8010df6:	370c      	adds	r7, #12
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfe:	4770      	bx	lr
 8010e00:	e000e100 	.word	0xe000e100
 8010e04:	e000ed00 	.word	0xe000ed00

08010e08 <NVIC_EncodePriority>:
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b089      	sub	sp, #36	@ 0x24
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	f003 0307 	and.w	r3, r3, #7
 8010e1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010e1c:	69fb      	ldr	r3, [r7, #28]
 8010e1e:	f1c3 0307 	rsb	r3, r3, #7
 8010e22:	2b04      	cmp	r3, #4
 8010e24:	bf28      	it	cs
 8010e26:	2304      	movcs	r3, #4
 8010e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	3304      	adds	r3, #4
 8010e2e:	2b06      	cmp	r3, #6
 8010e30:	d902      	bls.n	8010e38 <NVIC_EncodePriority+0x30>
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	3b03      	subs	r3, #3
 8010e36:	e000      	b.n	8010e3a <NVIC_EncodePriority+0x32>
 8010e38:	2300      	movs	r3, #0
 8010e3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	fa02 f303 	lsl.w	r3, r2, r3
 8010e46:	43da      	mvns	r2, r3
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	401a      	ands	r2, r3
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010e50:	f04f 31ff 	mov.w	r1, #4294967295
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	fa01 f303 	lsl.w	r3, r1, r3
 8010e5a:	43d9      	mvns	r1, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010e60:	4313      	orrs	r3, r2
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3724      	adds	r7, #36	@ 0x24
 8010e66:	46bd      	mov	sp, r7
 8010e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6c:	4770      	bx	lr
	...

08010e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	3b01      	subs	r3, #1
 8010e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010e80:	d301      	bcc.n	8010e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010e82:	2301      	movs	r3, #1
 8010e84:	e00f      	b.n	8010ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010e86:	4a0a      	ldr	r2, [pc, #40]	@ (8010eb0 <SysTick_Config+0x40>)
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	3b01      	subs	r3, #1
 8010e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010e8e:	210f      	movs	r1, #15
 8010e90:	f04f 30ff 	mov.w	r0, #4294967295
 8010e94:	f7ff ff8e 	bl	8010db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010e98:	4b05      	ldr	r3, [pc, #20]	@ (8010eb0 <SysTick_Config+0x40>)
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010e9e:	4b04      	ldr	r3, [pc, #16]	@ (8010eb0 <SysTick_Config+0x40>)
 8010ea0:	2207      	movs	r2, #7
 8010ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010ea4:	2300      	movs	r3, #0
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3708      	adds	r7, #8
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
 8010eae:	bf00      	nop
 8010eb0:	e000e010 	.word	0xe000e010

08010eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f7ff ff47 	bl	8010d50 <__NVIC_SetPriorityGrouping>
}
 8010ec2:	bf00      	nop
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b086      	sub	sp, #24
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	60b9      	str	r1, [r7, #8]
 8010ed4:	607a      	str	r2, [r7, #4]
 8010ed6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010ed8:	f7ff ff5e 	bl	8010d98 <__NVIC_GetPriorityGrouping>
 8010edc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010ede:	687a      	ldr	r2, [r7, #4]
 8010ee0:	68b9      	ldr	r1, [r7, #8]
 8010ee2:	6978      	ldr	r0, [r7, #20]
 8010ee4:	f7ff ff90 	bl	8010e08 <NVIC_EncodePriority>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010eee:	4611      	mov	r1, r2
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7ff ff5f 	bl	8010db4 <__NVIC_SetPriority>
}
 8010ef6:	bf00      	nop
 8010ef8:	3718      	adds	r7, #24
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}

08010efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010efe:	b580      	push	{r7, lr}
 8010f00:	b082      	sub	sp, #8
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f7ff ffb2 	bl	8010e70 <SysTick_Config>
 8010f0c:	4603      	mov	r3, r0
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3708      	adds	r7, #8
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
	...

08010f18 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8010f1c:	f3bf 8f5f 	dmb	sy
}
 8010f20:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8010f22:	4b07      	ldr	r3, [pc, #28]	@ (8010f40 <HAL_MPU_Disable+0x28>)
 8010f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f26:	4a06      	ldr	r2, [pc, #24]	@ (8010f40 <HAL_MPU_Disable+0x28>)
 8010f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010f2c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8010f2e:	4b05      	ldr	r3, [pc, #20]	@ (8010f44 <HAL_MPU_Disable+0x2c>)
 8010f30:	2200      	movs	r2, #0
 8010f32:	605a      	str	r2, [r3, #4]
}
 8010f34:	bf00      	nop
 8010f36:	46bd      	mov	sp, r7
 8010f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3c:	4770      	bx	lr
 8010f3e:	bf00      	nop
 8010f40:	e000ed00 	.word	0xe000ed00
 8010f44:	e000ed90 	.word	0xe000ed90

08010f48 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b083      	sub	sp, #12
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8010f50:	4a0b      	ldr	r2, [pc, #44]	@ (8010f80 <HAL_MPU_Enable+0x38>)
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f043 0301 	orr.w	r3, r3, #1
 8010f58:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8010f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8010f84 <HAL_MPU_Enable+0x3c>)
 8010f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f5e:	4a09      	ldr	r2, [pc, #36]	@ (8010f84 <HAL_MPU_Enable+0x3c>)
 8010f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010f64:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8010f66:	f3bf 8f4f 	dsb	sy
}
 8010f6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010f6c:	f3bf 8f6f 	isb	sy
}
 8010f70:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8010f72:	bf00      	nop
 8010f74:	370c      	adds	r7, #12
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr
 8010f7e:	bf00      	nop
 8010f80:	e000ed90 	.word	0xe000ed90
 8010f84:	e000ed00 	.word	0xe000ed00

08010f88 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b083      	sub	sp, #12
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	785a      	ldrb	r2, [r3, #1]
 8010f94:	4b1b      	ldr	r3, [pc, #108]	@ (8011004 <HAL_MPU_ConfigRegion+0x7c>)
 8010f96:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8010f98:	4b1a      	ldr	r3, [pc, #104]	@ (8011004 <HAL_MPU_ConfigRegion+0x7c>)
 8010f9a:	691b      	ldr	r3, [r3, #16]
 8010f9c:	4a19      	ldr	r2, [pc, #100]	@ (8011004 <HAL_MPU_ConfigRegion+0x7c>)
 8010f9e:	f023 0301 	bic.w	r3, r3, #1
 8010fa2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8010fa4:	4a17      	ldr	r2, [pc, #92]	@ (8011004 <HAL_MPU_ConfigRegion+0x7c>)
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	7b1b      	ldrb	r3, [r3, #12]
 8010fb0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	7adb      	ldrb	r3, [r3, #11]
 8010fb6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010fb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	7a9b      	ldrb	r3, [r3, #10]
 8010fbe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8010fc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	7b5b      	ldrb	r3, [r3, #13]
 8010fc6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8010fc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	7b9b      	ldrb	r3, [r3, #14]
 8010fce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8010fd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	7bdb      	ldrb	r3, [r3, #15]
 8010fd6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8010fd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	7a5b      	ldrb	r3, [r3, #9]
 8010fde:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8010fe0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	7a1b      	ldrb	r3, [r3, #8]
 8010fe6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8010fe8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8010fea:	687a      	ldr	r2, [r7, #4]
 8010fec:	7812      	ldrb	r2, [r2, #0]
 8010fee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010ff0:	4a04      	ldr	r2, [pc, #16]	@ (8011004 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8010ff2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010ff4:	6113      	str	r3, [r2, #16]
}
 8010ff6:	bf00      	nop
 8010ff8:	370c      	adds	r7, #12
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr
 8011002:	bf00      	nop
 8011004:	e000ed90 	.word	0xe000ed90

08011008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8011008:	b480      	push	{r7}
 801100a:	b089      	sub	sp, #36	@ 0x24
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8011012:	2300      	movs	r3, #0
 8011014:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8011016:	4b89      	ldr	r3, [pc, #548]	@ (801123c <HAL_GPIO_Init+0x234>)
 8011018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801101a:	e194      	b.n	8011346 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	681a      	ldr	r2, [r3, #0]
 8011020:	2101      	movs	r1, #1
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	fa01 f303 	lsl.w	r3, r1, r3
 8011028:	4013      	ands	r3, r2
 801102a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	2b00      	cmp	r3, #0
 8011030:	f000 8186 	beq.w	8011340 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	f003 0303 	and.w	r3, r3, #3
 801103c:	2b01      	cmp	r3, #1
 801103e:	d005      	beq.n	801104c <HAL_GPIO_Init+0x44>
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	f003 0303 	and.w	r3, r3, #3
 8011048:	2b02      	cmp	r3, #2
 801104a:	d130      	bne.n	80110ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	689b      	ldr	r3, [r3, #8]
 8011050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011052:	69fb      	ldr	r3, [r7, #28]
 8011054:	005b      	lsls	r3, r3, #1
 8011056:	2203      	movs	r2, #3
 8011058:	fa02 f303 	lsl.w	r3, r2, r3
 801105c:	43db      	mvns	r3, r3
 801105e:	69ba      	ldr	r2, [r7, #24]
 8011060:	4013      	ands	r3, r2
 8011062:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	68da      	ldr	r2, [r3, #12]
 8011068:	69fb      	ldr	r3, [r7, #28]
 801106a:	005b      	lsls	r3, r3, #1
 801106c:	fa02 f303 	lsl.w	r3, r2, r3
 8011070:	69ba      	ldr	r2, [r7, #24]
 8011072:	4313      	orrs	r3, r2
 8011074:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	69ba      	ldr	r2, [r7, #24]
 801107a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8011082:	2201      	movs	r2, #1
 8011084:	69fb      	ldr	r3, [r7, #28]
 8011086:	fa02 f303 	lsl.w	r3, r2, r3
 801108a:	43db      	mvns	r3, r3
 801108c:	69ba      	ldr	r2, [r7, #24]
 801108e:	4013      	ands	r3, r2
 8011090:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	091b      	lsrs	r3, r3, #4
 8011098:	f003 0201 	and.w	r2, r3, #1
 801109c:	69fb      	ldr	r3, [r7, #28]
 801109e:	fa02 f303 	lsl.w	r3, r2, r3
 80110a2:	69ba      	ldr	r2, [r7, #24]
 80110a4:	4313      	orrs	r3, r2
 80110a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	69ba      	ldr	r2, [r7, #24]
 80110ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	f003 0303 	and.w	r3, r3, #3
 80110b6:	2b03      	cmp	r3, #3
 80110b8:	d017      	beq.n	80110ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	68db      	ldr	r3, [r3, #12]
 80110be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80110c0:	69fb      	ldr	r3, [r7, #28]
 80110c2:	005b      	lsls	r3, r3, #1
 80110c4:	2203      	movs	r2, #3
 80110c6:	fa02 f303 	lsl.w	r3, r2, r3
 80110ca:	43db      	mvns	r3, r3
 80110cc:	69ba      	ldr	r2, [r7, #24]
 80110ce:	4013      	ands	r3, r2
 80110d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	689a      	ldr	r2, [r3, #8]
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	005b      	lsls	r3, r3, #1
 80110da:	fa02 f303 	lsl.w	r3, r2, r3
 80110de:	69ba      	ldr	r2, [r7, #24]
 80110e0:	4313      	orrs	r3, r2
 80110e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	69ba      	ldr	r2, [r7, #24]
 80110e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	f003 0303 	and.w	r3, r3, #3
 80110f2:	2b02      	cmp	r3, #2
 80110f4:	d123      	bne.n	801113e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80110f6:	69fb      	ldr	r3, [r7, #28]
 80110f8:	08da      	lsrs	r2, r3, #3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	3208      	adds	r2, #8
 80110fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8011104:	69fb      	ldr	r3, [r7, #28]
 8011106:	f003 0307 	and.w	r3, r3, #7
 801110a:	009b      	lsls	r3, r3, #2
 801110c:	220f      	movs	r2, #15
 801110e:	fa02 f303 	lsl.w	r3, r2, r3
 8011112:	43db      	mvns	r3, r3
 8011114:	69ba      	ldr	r2, [r7, #24]
 8011116:	4013      	ands	r3, r2
 8011118:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	691a      	ldr	r2, [r3, #16]
 801111e:	69fb      	ldr	r3, [r7, #28]
 8011120:	f003 0307 	and.w	r3, r3, #7
 8011124:	009b      	lsls	r3, r3, #2
 8011126:	fa02 f303 	lsl.w	r3, r2, r3
 801112a:	69ba      	ldr	r2, [r7, #24]
 801112c:	4313      	orrs	r3, r2
 801112e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011130:	69fb      	ldr	r3, [r7, #28]
 8011132:	08da      	lsrs	r2, r3, #3
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	3208      	adds	r2, #8
 8011138:	69b9      	ldr	r1, [r7, #24]
 801113a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	005b      	lsls	r3, r3, #1
 8011148:	2203      	movs	r2, #3
 801114a:	fa02 f303 	lsl.w	r3, r2, r3
 801114e:	43db      	mvns	r3, r3
 8011150:	69ba      	ldr	r2, [r7, #24]
 8011152:	4013      	ands	r3, r2
 8011154:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	f003 0203 	and.w	r2, r3, #3
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	005b      	lsls	r3, r3, #1
 8011162:	fa02 f303 	lsl.w	r3, r2, r3
 8011166:	69ba      	ldr	r2, [r7, #24]
 8011168:	4313      	orrs	r3, r2
 801116a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	69ba      	ldr	r2, [r7, #24]
 8011170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	685b      	ldr	r3, [r3, #4]
 8011176:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801117a:	2b00      	cmp	r3, #0
 801117c:	f000 80e0 	beq.w	8011340 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011180:	4b2f      	ldr	r3, [pc, #188]	@ (8011240 <HAL_GPIO_Init+0x238>)
 8011182:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011186:	4a2e      	ldr	r2, [pc, #184]	@ (8011240 <HAL_GPIO_Init+0x238>)
 8011188:	f043 0302 	orr.w	r3, r3, #2
 801118c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011190:	4b2b      	ldr	r3, [pc, #172]	@ (8011240 <HAL_GPIO_Init+0x238>)
 8011192:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011196:	f003 0302 	and.w	r3, r3, #2
 801119a:	60fb      	str	r3, [r7, #12]
 801119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801119e:	4a29      	ldr	r2, [pc, #164]	@ (8011244 <HAL_GPIO_Init+0x23c>)
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	089b      	lsrs	r3, r3, #2
 80111a4:	3302      	adds	r3, #2
 80111a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	f003 0303 	and.w	r3, r3, #3
 80111b2:	009b      	lsls	r3, r3, #2
 80111b4:	220f      	movs	r2, #15
 80111b6:	fa02 f303 	lsl.w	r3, r2, r3
 80111ba:	43db      	mvns	r3, r3
 80111bc:	69ba      	ldr	r2, [r7, #24]
 80111be:	4013      	ands	r3, r2
 80111c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	4a20      	ldr	r2, [pc, #128]	@ (8011248 <HAL_GPIO_Init+0x240>)
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d052      	beq.n	8011270 <HAL_GPIO_Init+0x268>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4a1f      	ldr	r2, [pc, #124]	@ (801124c <HAL_GPIO_Init+0x244>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d031      	beq.n	8011236 <HAL_GPIO_Init+0x22e>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4a1e      	ldr	r2, [pc, #120]	@ (8011250 <HAL_GPIO_Init+0x248>)
 80111d6:	4293      	cmp	r3, r2
 80111d8:	d02b      	beq.n	8011232 <HAL_GPIO_Init+0x22a>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	4a1d      	ldr	r2, [pc, #116]	@ (8011254 <HAL_GPIO_Init+0x24c>)
 80111de:	4293      	cmp	r3, r2
 80111e0:	d025      	beq.n	801122e <HAL_GPIO_Init+0x226>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	4a1c      	ldr	r2, [pc, #112]	@ (8011258 <HAL_GPIO_Init+0x250>)
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d01f      	beq.n	801122a <HAL_GPIO_Init+0x222>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4a1b      	ldr	r2, [pc, #108]	@ (801125c <HAL_GPIO_Init+0x254>)
 80111ee:	4293      	cmp	r3, r2
 80111f0:	d019      	beq.n	8011226 <HAL_GPIO_Init+0x21e>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	4a1a      	ldr	r2, [pc, #104]	@ (8011260 <HAL_GPIO_Init+0x258>)
 80111f6:	4293      	cmp	r3, r2
 80111f8:	d013      	beq.n	8011222 <HAL_GPIO_Init+0x21a>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4a19      	ldr	r2, [pc, #100]	@ (8011264 <HAL_GPIO_Init+0x25c>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	d00d      	beq.n	801121e <HAL_GPIO_Init+0x216>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	4a18      	ldr	r2, [pc, #96]	@ (8011268 <HAL_GPIO_Init+0x260>)
 8011206:	4293      	cmp	r3, r2
 8011208:	d007      	beq.n	801121a <HAL_GPIO_Init+0x212>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	4a17      	ldr	r2, [pc, #92]	@ (801126c <HAL_GPIO_Init+0x264>)
 801120e:	4293      	cmp	r3, r2
 8011210:	d101      	bne.n	8011216 <HAL_GPIO_Init+0x20e>
 8011212:	2309      	movs	r3, #9
 8011214:	e02d      	b.n	8011272 <HAL_GPIO_Init+0x26a>
 8011216:	230a      	movs	r3, #10
 8011218:	e02b      	b.n	8011272 <HAL_GPIO_Init+0x26a>
 801121a:	2308      	movs	r3, #8
 801121c:	e029      	b.n	8011272 <HAL_GPIO_Init+0x26a>
 801121e:	2307      	movs	r3, #7
 8011220:	e027      	b.n	8011272 <HAL_GPIO_Init+0x26a>
 8011222:	2306      	movs	r3, #6
 8011224:	e025      	b.n	8011272 <HAL_GPIO_Init+0x26a>
 8011226:	2305      	movs	r3, #5
 8011228:	e023      	b.n	8011272 <HAL_GPIO_Init+0x26a>
 801122a:	2304      	movs	r3, #4
 801122c:	e021      	b.n	8011272 <HAL_GPIO_Init+0x26a>
 801122e:	2303      	movs	r3, #3
 8011230:	e01f      	b.n	8011272 <HAL_GPIO_Init+0x26a>
 8011232:	2302      	movs	r3, #2
 8011234:	e01d      	b.n	8011272 <HAL_GPIO_Init+0x26a>
 8011236:	2301      	movs	r3, #1
 8011238:	e01b      	b.n	8011272 <HAL_GPIO_Init+0x26a>
 801123a:	bf00      	nop
 801123c:	58000080 	.word	0x58000080
 8011240:	58024400 	.word	0x58024400
 8011244:	58000400 	.word	0x58000400
 8011248:	58020000 	.word	0x58020000
 801124c:	58020400 	.word	0x58020400
 8011250:	58020800 	.word	0x58020800
 8011254:	58020c00 	.word	0x58020c00
 8011258:	58021000 	.word	0x58021000
 801125c:	58021400 	.word	0x58021400
 8011260:	58021800 	.word	0x58021800
 8011264:	58021c00 	.word	0x58021c00
 8011268:	58022000 	.word	0x58022000
 801126c:	58022400 	.word	0x58022400
 8011270:	2300      	movs	r3, #0
 8011272:	69fa      	ldr	r2, [r7, #28]
 8011274:	f002 0203 	and.w	r2, r2, #3
 8011278:	0092      	lsls	r2, r2, #2
 801127a:	4093      	lsls	r3, r2
 801127c:	69ba      	ldr	r2, [r7, #24]
 801127e:	4313      	orrs	r3, r2
 8011280:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011282:	4938      	ldr	r1, [pc, #224]	@ (8011364 <HAL_GPIO_Init+0x35c>)
 8011284:	69fb      	ldr	r3, [r7, #28]
 8011286:	089b      	lsrs	r3, r3, #2
 8011288:	3302      	adds	r3, #2
 801128a:	69ba      	ldr	r2, [r7, #24]
 801128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8011290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	43db      	mvns	r3, r3
 801129c:	69ba      	ldr	r2, [r7, #24]
 801129e:	4013      	ands	r3, r2
 80112a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d003      	beq.n	80112b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80112ae:	69ba      	ldr	r2, [r7, #24]
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	4313      	orrs	r3, r2
 80112b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80112b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80112ba:	69bb      	ldr	r3, [r7, #24]
 80112bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80112be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	43db      	mvns	r3, r3
 80112ca:	69ba      	ldr	r2, [r7, #24]
 80112cc:	4013      	ands	r3, r2
 80112ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d003      	beq.n	80112e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80112dc:	69ba      	ldr	r2, [r7, #24]
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	4313      	orrs	r3, r2
 80112e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80112e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80112e8:	69bb      	ldr	r3, [r7, #24]
 80112ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	43db      	mvns	r3, r3
 80112f6:	69ba      	ldr	r2, [r7, #24]
 80112f8:	4013      	ands	r3, r2
 80112fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011304:	2b00      	cmp	r3, #0
 8011306:	d003      	beq.n	8011310 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8011308:	69ba      	ldr	r2, [r7, #24]
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	4313      	orrs	r3, r2
 801130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	69ba      	ldr	r2, [r7, #24]
 8011314:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801131c:	693b      	ldr	r3, [r7, #16]
 801131e:	43db      	mvns	r3, r3
 8011320:	69ba      	ldr	r2, [r7, #24]
 8011322:	4013      	ands	r3, r2
 8011324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801132e:	2b00      	cmp	r3, #0
 8011330:	d003      	beq.n	801133a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8011332:	69ba      	ldr	r2, [r7, #24]
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	4313      	orrs	r3, r2
 8011338:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	69ba      	ldr	r2, [r7, #24]
 801133e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8011340:	69fb      	ldr	r3, [r7, #28]
 8011342:	3301      	adds	r3, #1
 8011344:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	69fb      	ldr	r3, [r7, #28]
 801134c:	fa22 f303 	lsr.w	r3, r2, r3
 8011350:	2b00      	cmp	r3, #0
 8011352:	f47f ae63 	bne.w	801101c <HAL_GPIO_Init+0x14>
  }
}
 8011356:	bf00      	nop
 8011358:	bf00      	nop
 801135a:	3724      	adds	r7, #36	@ 0x24
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr
 8011364:	58000400 	.word	0x58000400

08011368 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8011368:	b480      	push	{r7}
 801136a:	b083      	sub	sp, #12
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8011370:	4a08      	ldr	r2, [pc, #32]	@ (8011394 <HAL_HSEM_FastTake+0x2c>)
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	3320      	adds	r3, #32
 8011376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801137a:	4a07      	ldr	r2, [pc, #28]	@ (8011398 <HAL_HSEM_FastTake+0x30>)
 801137c:	4293      	cmp	r3, r2
 801137e:	d101      	bne.n	8011384 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8011380:	2300      	movs	r3, #0
 8011382:	e000      	b.n	8011386 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8011384:	2301      	movs	r3, #1
}
 8011386:	4618      	mov	r0, r3
 8011388:	370c      	adds	r7, #12
 801138a:	46bd      	mov	sp, r7
 801138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011390:	4770      	bx	lr
 8011392:	bf00      	nop
 8011394:	58026400 	.word	0x58026400
 8011398:	80000300 	.word	0x80000300

0801139c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 801139c:	b480      	push	{r7}
 801139e:	b083      	sub	sp, #12
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80113a6:	4906      	ldr	r1, [pc, #24]	@ (80113c0 <HAL_HSEM_Release+0x24>)
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80113b4:	bf00      	nop
 80113b6:	370c      	adds	r7, #12
 80113b8:	46bd      	mov	sp, r7
 80113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113be:	4770      	bx	lr
 80113c0:	58026400 	.word	0x58026400

080113c4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b084      	sub	sp, #16
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80113cc:	4b29      	ldr	r3, [pc, #164]	@ (8011474 <HAL_PWREx_ConfigSupply+0xb0>)
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	f003 0307 	and.w	r3, r3, #7
 80113d4:	2b06      	cmp	r3, #6
 80113d6:	d00a      	beq.n	80113ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80113d8:	4b26      	ldr	r3, [pc, #152]	@ (8011474 <HAL_PWREx_ConfigSupply+0xb0>)
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80113e0:	687a      	ldr	r2, [r7, #4]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d001      	beq.n	80113ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80113e6:	2301      	movs	r3, #1
 80113e8:	e040      	b.n	801146c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80113ea:	2300      	movs	r3, #0
 80113ec:	e03e      	b.n	801146c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80113ee:	4b21      	ldr	r3, [pc, #132]	@ (8011474 <HAL_PWREx_ConfigSupply+0xb0>)
 80113f0:	68db      	ldr	r3, [r3, #12]
 80113f2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80113f6:	491f      	ldr	r1, [pc, #124]	@ (8011474 <HAL_PWREx_ConfigSupply+0xb0>)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	4313      	orrs	r3, r2
 80113fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80113fe:	f7ff fc8f 	bl	8010d20 <HAL_GetTick>
 8011402:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011404:	e009      	b.n	801141a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011406:	f7ff fc8b 	bl	8010d20 <HAL_GetTick>
 801140a:	4602      	mov	r2, r0
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011414:	d901      	bls.n	801141a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8011416:	2301      	movs	r3, #1
 8011418:	e028      	b.n	801146c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801141a:	4b16      	ldr	r3, [pc, #88]	@ (8011474 <HAL_PWREx_ConfigSupply+0xb0>)
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011426:	d1ee      	bne.n	8011406 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2b1e      	cmp	r3, #30
 801142c:	d008      	beq.n	8011440 <HAL_PWREx_ConfigSupply+0x7c>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2b2e      	cmp	r3, #46	@ 0x2e
 8011432:	d005      	beq.n	8011440 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2b1d      	cmp	r3, #29
 8011438:	d002      	beq.n	8011440 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2b2d      	cmp	r3, #45	@ 0x2d
 801143e:	d114      	bne.n	801146a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8011440:	f7ff fc6e 	bl	8010d20 <HAL_GetTick>
 8011444:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8011446:	e009      	b.n	801145c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011448:	f7ff fc6a 	bl	8010d20 <HAL_GetTick>
 801144c:	4602      	mov	r2, r0
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011456:	d901      	bls.n	801145c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8011458:	2301      	movs	r3, #1
 801145a:	e007      	b.n	801146c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801145c:	4b05      	ldr	r3, [pc, #20]	@ (8011474 <HAL_PWREx_ConfigSupply+0xb0>)
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011468:	d1ee      	bne.n	8011448 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801146a:	2300      	movs	r3, #0
}
 801146c:	4618      	mov	r0, r3
 801146e:	3710      	adds	r7, #16
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}
 8011474:	58024800 	.word	0x58024800

08011478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b08c      	sub	sp, #48	@ 0x30
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d102      	bne.n	801148c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011486:	2301      	movs	r3, #1
 8011488:	f000 bc48 	b.w	8011d1c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f003 0301 	and.w	r3, r3, #1
 8011494:	2b00      	cmp	r3, #0
 8011496:	f000 8088 	beq.w	80115aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801149a:	4b99      	ldr	r3, [pc, #612]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 801149c:	691b      	ldr	r3, [r3, #16]
 801149e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80114a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80114a4:	4b96      	ldr	r3, [pc, #600]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80114a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80114aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ac:	2b10      	cmp	r3, #16
 80114ae:	d007      	beq.n	80114c0 <HAL_RCC_OscConfig+0x48>
 80114b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b2:	2b18      	cmp	r3, #24
 80114b4:	d111      	bne.n	80114da <HAL_RCC_OscConfig+0x62>
 80114b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114b8:	f003 0303 	and.w	r3, r3, #3
 80114bc:	2b02      	cmp	r3, #2
 80114be:	d10c      	bne.n	80114da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80114c0:	4b8f      	ldr	r3, [pc, #572]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d06d      	beq.n	80115a8 <HAL_RCC_OscConfig+0x130>
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d169      	bne.n	80115a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80114d4:	2301      	movs	r3, #1
 80114d6:	f000 bc21 	b.w	8011d1c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80114e2:	d106      	bne.n	80114f2 <HAL_RCC_OscConfig+0x7a>
 80114e4:	4b86      	ldr	r3, [pc, #536]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	4a85      	ldr	r2, [pc, #532]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80114ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80114ee:	6013      	str	r3, [r2, #0]
 80114f0:	e02e      	b.n	8011550 <HAL_RCC_OscConfig+0xd8>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d10c      	bne.n	8011514 <HAL_RCC_OscConfig+0x9c>
 80114fa:	4b81      	ldr	r3, [pc, #516]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	4a80      	ldr	r2, [pc, #512]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011504:	6013      	str	r3, [r2, #0]
 8011506:	4b7e      	ldr	r3, [pc, #504]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	4a7d      	ldr	r2, [pc, #500]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 801150c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011510:	6013      	str	r3, [r2, #0]
 8011512:	e01d      	b.n	8011550 <HAL_RCC_OscConfig+0xd8>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801151c:	d10c      	bne.n	8011538 <HAL_RCC_OscConfig+0xc0>
 801151e:	4b78      	ldr	r3, [pc, #480]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	4a77      	ldr	r2, [pc, #476]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011528:	6013      	str	r3, [r2, #0]
 801152a:	4b75      	ldr	r3, [pc, #468]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	4a74      	ldr	r2, [pc, #464]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011534:	6013      	str	r3, [r2, #0]
 8011536:	e00b      	b.n	8011550 <HAL_RCC_OscConfig+0xd8>
 8011538:	4b71      	ldr	r3, [pc, #452]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	4a70      	ldr	r2, [pc, #448]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 801153e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011542:	6013      	str	r3, [r2, #0]
 8011544:	4b6e      	ldr	r3, [pc, #440]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4a6d      	ldr	r2, [pc, #436]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 801154a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d013      	beq.n	8011580 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011558:	f7ff fbe2 	bl	8010d20 <HAL_GetTick>
 801155c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801155e:	e008      	b.n	8011572 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011560:	f7ff fbde 	bl	8010d20 <HAL_GetTick>
 8011564:	4602      	mov	r2, r0
 8011566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011568:	1ad3      	subs	r3, r2, r3
 801156a:	2b64      	cmp	r3, #100	@ 0x64
 801156c:	d901      	bls.n	8011572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801156e:	2303      	movs	r3, #3
 8011570:	e3d4      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011572:	4b63      	ldr	r3, [pc, #396]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801157a:	2b00      	cmp	r3, #0
 801157c:	d0f0      	beq.n	8011560 <HAL_RCC_OscConfig+0xe8>
 801157e:	e014      	b.n	80115aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011580:	f7ff fbce 	bl	8010d20 <HAL_GetTick>
 8011584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011586:	e008      	b.n	801159a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011588:	f7ff fbca 	bl	8010d20 <HAL_GetTick>
 801158c:	4602      	mov	r2, r0
 801158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011590:	1ad3      	subs	r3, r2, r3
 8011592:	2b64      	cmp	r3, #100	@ 0x64
 8011594:	d901      	bls.n	801159a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8011596:	2303      	movs	r3, #3
 8011598:	e3c0      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801159a:	4b59      	ldr	r3, [pc, #356]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d1f0      	bne.n	8011588 <HAL_RCC_OscConfig+0x110>
 80115a6:	e000      	b.n	80115aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80115a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	f003 0302 	and.w	r3, r3, #2
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	f000 80ca 	beq.w	801174c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80115b8:	4b51      	ldr	r3, [pc, #324]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80115ba:	691b      	ldr	r3, [r3, #16]
 80115bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80115c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80115c2:	4b4f      	ldr	r3, [pc, #316]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80115c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80115c8:	6a3b      	ldr	r3, [r7, #32]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d007      	beq.n	80115de <HAL_RCC_OscConfig+0x166>
 80115ce:	6a3b      	ldr	r3, [r7, #32]
 80115d0:	2b18      	cmp	r3, #24
 80115d2:	d156      	bne.n	8011682 <HAL_RCC_OscConfig+0x20a>
 80115d4:	69fb      	ldr	r3, [r7, #28]
 80115d6:	f003 0303 	and.w	r3, r3, #3
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d151      	bne.n	8011682 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80115de:	4b48      	ldr	r3, [pc, #288]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	f003 0304 	and.w	r3, r3, #4
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d005      	beq.n	80115f6 <HAL_RCC_OscConfig+0x17e>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	68db      	ldr	r3, [r3, #12]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d101      	bne.n	80115f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80115f2:	2301      	movs	r3, #1
 80115f4:	e392      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80115f6:	4b42      	ldr	r3, [pc, #264]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f023 0219 	bic.w	r2, r3, #25
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	68db      	ldr	r3, [r3, #12]
 8011602:	493f      	ldr	r1, [pc, #252]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011604:	4313      	orrs	r3, r2
 8011606:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011608:	f7ff fb8a 	bl	8010d20 <HAL_GetTick>
 801160c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801160e:	e008      	b.n	8011622 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011610:	f7ff fb86 	bl	8010d20 <HAL_GetTick>
 8011614:	4602      	mov	r2, r0
 8011616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011618:	1ad3      	subs	r3, r2, r3
 801161a:	2b02      	cmp	r3, #2
 801161c:	d901      	bls.n	8011622 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801161e:	2303      	movs	r3, #3
 8011620:	e37c      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011622:	4b37      	ldr	r3, [pc, #220]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	f003 0304 	and.w	r3, r3, #4
 801162a:	2b00      	cmp	r3, #0
 801162c:	d0f0      	beq.n	8011610 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801162e:	f7ff fb83 	bl	8010d38 <HAL_GetREVID>
 8011632:	4603      	mov	r3, r0
 8011634:	f241 0203 	movw	r2, #4099	@ 0x1003
 8011638:	4293      	cmp	r3, r2
 801163a:	d817      	bhi.n	801166c <HAL_RCC_OscConfig+0x1f4>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	691b      	ldr	r3, [r3, #16]
 8011640:	2b40      	cmp	r3, #64	@ 0x40
 8011642:	d108      	bne.n	8011656 <HAL_RCC_OscConfig+0x1de>
 8011644:	4b2e      	ldr	r3, [pc, #184]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011646:	685b      	ldr	r3, [r3, #4]
 8011648:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801164c:	4a2c      	ldr	r2, [pc, #176]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 801164e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011652:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011654:	e07a      	b.n	801174c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011656:	4b2a      	ldr	r3, [pc, #168]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	691b      	ldr	r3, [r3, #16]
 8011662:	031b      	lsls	r3, r3, #12
 8011664:	4926      	ldr	r1, [pc, #152]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011666:	4313      	orrs	r3, r2
 8011668:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801166a:	e06f      	b.n	801174c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801166c:	4b24      	ldr	r3, [pc, #144]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 801166e:	685b      	ldr	r3, [r3, #4]
 8011670:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	061b      	lsls	r3, r3, #24
 801167a:	4921      	ldr	r1, [pc, #132]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 801167c:	4313      	orrs	r3, r2
 801167e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011680:	e064      	b.n	801174c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	68db      	ldr	r3, [r3, #12]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d047      	beq.n	801171a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801168a:	4b1d      	ldr	r3, [pc, #116]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	f023 0219 	bic.w	r2, r3, #25
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	68db      	ldr	r3, [r3, #12]
 8011696:	491a      	ldr	r1, [pc, #104]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 8011698:	4313      	orrs	r3, r2
 801169a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801169c:	f7ff fb40 	bl	8010d20 <HAL_GetTick>
 80116a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80116a2:	e008      	b.n	80116b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80116a4:	f7ff fb3c 	bl	8010d20 <HAL_GetTick>
 80116a8:	4602      	mov	r2, r0
 80116aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ac:	1ad3      	subs	r3, r2, r3
 80116ae:	2b02      	cmp	r3, #2
 80116b0:	d901      	bls.n	80116b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80116b2:	2303      	movs	r3, #3
 80116b4:	e332      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80116b6:	4b12      	ldr	r3, [pc, #72]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f003 0304 	and.w	r3, r3, #4
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d0f0      	beq.n	80116a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80116c2:	f7ff fb39 	bl	8010d38 <HAL_GetREVID>
 80116c6:	4603      	mov	r3, r0
 80116c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d819      	bhi.n	8011704 <HAL_RCC_OscConfig+0x28c>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	691b      	ldr	r3, [r3, #16]
 80116d4:	2b40      	cmp	r3, #64	@ 0x40
 80116d6:	d108      	bne.n	80116ea <HAL_RCC_OscConfig+0x272>
 80116d8:	4b09      	ldr	r3, [pc, #36]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80116da:	685b      	ldr	r3, [r3, #4]
 80116dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80116e0:	4a07      	ldr	r2, [pc, #28]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80116e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80116e6:	6053      	str	r3, [r2, #4]
 80116e8:	e030      	b.n	801174c <HAL_RCC_OscConfig+0x2d4>
 80116ea:	4b05      	ldr	r3, [pc, #20]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	691b      	ldr	r3, [r3, #16]
 80116f6:	031b      	lsls	r3, r3, #12
 80116f8:	4901      	ldr	r1, [pc, #4]	@ (8011700 <HAL_RCC_OscConfig+0x288>)
 80116fa:	4313      	orrs	r3, r2
 80116fc:	604b      	str	r3, [r1, #4]
 80116fe:	e025      	b.n	801174c <HAL_RCC_OscConfig+0x2d4>
 8011700:	58024400 	.word	0x58024400
 8011704:	4b9a      	ldr	r3, [pc, #616]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011706:	685b      	ldr	r3, [r3, #4]
 8011708:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	691b      	ldr	r3, [r3, #16]
 8011710:	061b      	lsls	r3, r3, #24
 8011712:	4997      	ldr	r1, [pc, #604]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011714:	4313      	orrs	r3, r2
 8011716:	604b      	str	r3, [r1, #4]
 8011718:	e018      	b.n	801174c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801171a:	4b95      	ldr	r3, [pc, #596]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	4a94      	ldr	r2, [pc, #592]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011720:	f023 0301 	bic.w	r3, r3, #1
 8011724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011726:	f7ff fafb 	bl	8010d20 <HAL_GetTick>
 801172a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801172c:	e008      	b.n	8011740 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801172e:	f7ff faf7 	bl	8010d20 <HAL_GetTick>
 8011732:	4602      	mov	r2, r0
 8011734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011736:	1ad3      	subs	r3, r2, r3
 8011738:	2b02      	cmp	r3, #2
 801173a:	d901      	bls.n	8011740 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801173c:	2303      	movs	r3, #3
 801173e:	e2ed      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011740:	4b8b      	ldr	r3, [pc, #556]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f003 0304 	and.w	r3, r3, #4
 8011748:	2b00      	cmp	r3, #0
 801174a:	d1f0      	bne.n	801172e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f003 0310 	and.w	r3, r3, #16
 8011754:	2b00      	cmp	r3, #0
 8011756:	f000 80a9 	beq.w	80118ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801175a:	4b85      	ldr	r3, [pc, #532]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 801175c:	691b      	ldr	r3, [r3, #16]
 801175e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011762:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011764:	4b82      	ldr	r3, [pc, #520]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011768:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801176a:	69bb      	ldr	r3, [r7, #24]
 801176c:	2b08      	cmp	r3, #8
 801176e:	d007      	beq.n	8011780 <HAL_RCC_OscConfig+0x308>
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	2b18      	cmp	r3, #24
 8011774:	d13a      	bne.n	80117ec <HAL_RCC_OscConfig+0x374>
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	f003 0303 	and.w	r3, r3, #3
 801177c:	2b01      	cmp	r3, #1
 801177e:	d135      	bne.n	80117ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011780:	4b7b      	ldr	r3, [pc, #492]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011788:	2b00      	cmp	r3, #0
 801178a:	d005      	beq.n	8011798 <HAL_RCC_OscConfig+0x320>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	69db      	ldr	r3, [r3, #28]
 8011790:	2b80      	cmp	r3, #128	@ 0x80
 8011792:	d001      	beq.n	8011798 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8011794:	2301      	movs	r3, #1
 8011796:	e2c1      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011798:	f7ff face 	bl	8010d38 <HAL_GetREVID>
 801179c:	4603      	mov	r3, r0
 801179e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d817      	bhi.n	80117d6 <HAL_RCC_OscConfig+0x35e>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6a1b      	ldr	r3, [r3, #32]
 80117aa:	2b20      	cmp	r3, #32
 80117ac:	d108      	bne.n	80117c0 <HAL_RCC_OscConfig+0x348>
 80117ae:	4b70      	ldr	r3, [pc, #448]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80117b6:	4a6e      	ldr	r2, [pc, #440]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80117b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80117bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80117be:	e075      	b.n	80118ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80117c0:	4b6b      	ldr	r3, [pc, #428]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6a1b      	ldr	r3, [r3, #32]
 80117cc:	069b      	lsls	r3, r3, #26
 80117ce:	4968      	ldr	r1, [pc, #416]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80117d0:	4313      	orrs	r3, r2
 80117d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80117d4:	e06a      	b.n	80118ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80117d6:	4b66      	ldr	r3, [pc, #408]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80117d8:	68db      	ldr	r3, [r3, #12]
 80117da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6a1b      	ldr	r3, [r3, #32]
 80117e2:	061b      	lsls	r3, r3, #24
 80117e4:	4962      	ldr	r1, [pc, #392]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80117e6:	4313      	orrs	r3, r2
 80117e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80117ea:	e05f      	b.n	80118ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	69db      	ldr	r3, [r3, #28]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d042      	beq.n	801187a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80117f4:	4b5e      	ldr	r3, [pc, #376]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	4a5d      	ldr	r2, [pc, #372]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80117fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011800:	f7ff fa8e 	bl	8010d20 <HAL_GetTick>
 8011804:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011806:	e008      	b.n	801181a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011808:	f7ff fa8a 	bl	8010d20 <HAL_GetTick>
 801180c:	4602      	mov	r2, r0
 801180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011810:	1ad3      	subs	r3, r2, r3
 8011812:	2b02      	cmp	r3, #2
 8011814:	d901      	bls.n	801181a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8011816:	2303      	movs	r3, #3
 8011818:	e280      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801181a:	4b55      	ldr	r3, [pc, #340]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011822:	2b00      	cmp	r3, #0
 8011824:	d0f0      	beq.n	8011808 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011826:	f7ff fa87 	bl	8010d38 <HAL_GetREVID>
 801182a:	4603      	mov	r3, r0
 801182c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8011830:	4293      	cmp	r3, r2
 8011832:	d817      	bhi.n	8011864 <HAL_RCC_OscConfig+0x3ec>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6a1b      	ldr	r3, [r3, #32]
 8011838:	2b20      	cmp	r3, #32
 801183a:	d108      	bne.n	801184e <HAL_RCC_OscConfig+0x3d6>
 801183c:	4b4c      	ldr	r3, [pc, #304]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8011844:	4a4a      	ldr	r2, [pc, #296]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011846:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801184a:	6053      	str	r3, [r2, #4]
 801184c:	e02e      	b.n	80118ac <HAL_RCC_OscConfig+0x434>
 801184e:	4b48      	ldr	r3, [pc, #288]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011850:	685b      	ldr	r3, [r3, #4]
 8011852:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6a1b      	ldr	r3, [r3, #32]
 801185a:	069b      	lsls	r3, r3, #26
 801185c:	4944      	ldr	r1, [pc, #272]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 801185e:	4313      	orrs	r3, r2
 8011860:	604b      	str	r3, [r1, #4]
 8011862:	e023      	b.n	80118ac <HAL_RCC_OscConfig+0x434>
 8011864:	4b42      	ldr	r3, [pc, #264]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6a1b      	ldr	r3, [r3, #32]
 8011870:	061b      	lsls	r3, r3, #24
 8011872:	493f      	ldr	r1, [pc, #252]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011874:	4313      	orrs	r3, r2
 8011876:	60cb      	str	r3, [r1, #12]
 8011878:	e018      	b.n	80118ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801187a:	4b3d      	ldr	r3, [pc, #244]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	4a3c      	ldr	r2, [pc, #240]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011880:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011886:	f7ff fa4b 	bl	8010d20 <HAL_GetTick>
 801188a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801188c:	e008      	b.n	80118a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801188e:	f7ff fa47 	bl	8010d20 <HAL_GetTick>
 8011892:	4602      	mov	r2, r0
 8011894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011896:	1ad3      	subs	r3, r2, r3
 8011898:	2b02      	cmp	r3, #2
 801189a:	d901      	bls.n	80118a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801189c:	2303      	movs	r3, #3
 801189e:	e23d      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80118a0:	4b33      	ldr	r3, [pc, #204]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d1f0      	bne.n	801188e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	f003 0308 	and.w	r3, r3, #8
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d036      	beq.n	8011926 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	695b      	ldr	r3, [r3, #20]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d019      	beq.n	80118f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80118c0:	4b2b      	ldr	r3, [pc, #172]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80118c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80118c4:	4a2a      	ldr	r2, [pc, #168]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80118c6:	f043 0301 	orr.w	r3, r3, #1
 80118ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80118cc:	f7ff fa28 	bl	8010d20 <HAL_GetTick>
 80118d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80118d2:	e008      	b.n	80118e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80118d4:	f7ff fa24 	bl	8010d20 <HAL_GetTick>
 80118d8:	4602      	mov	r2, r0
 80118da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118dc:	1ad3      	subs	r3, r2, r3
 80118de:	2b02      	cmp	r3, #2
 80118e0:	d901      	bls.n	80118e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80118e2:	2303      	movs	r3, #3
 80118e4:	e21a      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80118e6:	4b22      	ldr	r3, [pc, #136]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80118e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80118ea:	f003 0302 	and.w	r3, r3, #2
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d0f0      	beq.n	80118d4 <HAL_RCC_OscConfig+0x45c>
 80118f2:	e018      	b.n	8011926 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80118f4:	4b1e      	ldr	r3, [pc, #120]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80118f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80118f8:	4a1d      	ldr	r2, [pc, #116]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 80118fa:	f023 0301 	bic.w	r3, r3, #1
 80118fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011900:	f7ff fa0e 	bl	8010d20 <HAL_GetTick>
 8011904:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011906:	e008      	b.n	801191a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011908:	f7ff fa0a 	bl	8010d20 <HAL_GetTick>
 801190c:	4602      	mov	r2, r0
 801190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011910:	1ad3      	subs	r3, r2, r3
 8011912:	2b02      	cmp	r3, #2
 8011914:	d901      	bls.n	801191a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8011916:	2303      	movs	r3, #3
 8011918:	e200      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801191a:	4b15      	ldr	r3, [pc, #84]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 801191c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801191e:	f003 0302 	and.w	r3, r3, #2
 8011922:	2b00      	cmp	r3, #0
 8011924:	d1f0      	bne.n	8011908 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	f003 0320 	and.w	r3, r3, #32
 801192e:	2b00      	cmp	r3, #0
 8011930:	d039      	beq.n	80119a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	699b      	ldr	r3, [r3, #24]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d01c      	beq.n	8011974 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801193a:	4b0d      	ldr	r3, [pc, #52]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	4a0c      	ldr	r2, [pc, #48]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011940:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011944:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011946:	f7ff f9eb 	bl	8010d20 <HAL_GetTick>
 801194a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801194c:	e008      	b.n	8011960 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801194e:	f7ff f9e7 	bl	8010d20 <HAL_GetTick>
 8011952:	4602      	mov	r2, r0
 8011954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011956:	1ad3      	subs	r3, r2, r3
 8011958:	2b02      	cmp	r3, #2
 801195a:	d901      	bls.n	8011960 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801195c:	2303      	movs	r3, #3
 801195e:	e1dd      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011960:	4b03      	ldr	r3, [pc, #12]	@ (8011970 <HAL_RCC_OscConfig+0x4f8>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011968:	2b00      	cmp	r3, #0
 801196a:	d0f0      	beq.n	801194e <HAL_RCC_OscConfig+0x4d6>
 801196c:	e01b      	b.n	80119a6 <HAL_RCC_OscConfig+0x52e>
 801196e:	bf00      	nop
 8011970:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011974:	4b9b      	ldr	r3, [pc, #620]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	4a9a      	ldr	r2, [pc, #616]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 801197a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801197e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011980:	f7ff f9ce 	bl	8010d20 <HAL_GetTick>
 8011984:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011986:	e008      	b.n	801199a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011988:	f7ff f9ca 	bl	8010d20 <HAL_GetTick>
 801198c:	4602      	mov	r2, r0
 801198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011990:	1ad3      	subs	r3, r2, r3
 8011992:	2b02      	cmp	r3, #2
 8011994:	d901      	bls.n	801199a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8011996:	2303      	movs	r3, #3
 8011998:	e1c0      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801199a:	4b92      	ldr	r3, [pc, #584]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d1f0      	bne.n	8011988 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f003 0304 	and.w	r3, r3, #4
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	f000 8081 	beq.w	8011ab6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80119b4:	4b8c      	ldr	r3, [pc, #560]	@ (8011be8 <HAL_RCC_OscConfig+0x770>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4a8b      	ldr	r2, [pc, #556]	@ (8011be8 <HAL_RCC_OscConfig+0x770>)
 80119ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80119be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80119c0:	f7ff f9ae 	bl	8010d20 <HAL_GetTick>
 80119c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80119c6:	e008      	b.n	80119da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80119c8:	f7ff f9aa 	bl	8010d20 <HAL_GetTick>
 80119cc:	4602      	mov	r2, r0
 80119ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119d0:	1ad3      	subs	r3, r2, r3
 80119d2:	2b64      	cmp	r3, #100	@ 0x64
 80119d4:	d901      	bls.n	80119da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80119d6:	2303      	movs	r3, #3
 80119d8:	e1a0      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80119da:	4b83      	ldr	r3, [pc, #524]	@ (8011be8 <HAL_RCC_OscConfig+0x770>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d0f0      	beq.n	80119c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	689b      	ldr	r3, [r3, #8]
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d106      	bne.n	80119fc <HAL_RCC_OscConfig+0x584>
 80119ee:	4b7d      	ldr	r3, [pc, #500]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 80119f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119f2:	4a7c      	ldr	r2, [pc, #496]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 80119f4:	f043 0301 	orr.w	r3, r3, #1
 80119f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80119fa:	e02d      	b.n	8011a58 <HAL_RCC_OscConfig+0x5e0>
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	689b      	ldr	r3, [r3, #8]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d10c      	bne.n	8011a1e <HAL_RCC_OscConfig+0x5a6>
 8011a04:	4b77      	ldr	r3, [pc, #476]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a08:	4a76      	ldr	r2, [pc, #472]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a0a:	f023 0301 	bic.w	r3, r3, #1
 8011a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011a10:	4b74      	ldr	r3, [pc, #464]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a14:	4a73      	ldr	r2, [pc, #460]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a16:	f023 0304 	bic.w	r3, r3, #4
 8011a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8011a1c:	e01c      	b.n	8011a58 <HAL_RCC_OscConfig+0x5e0>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	689b      	ldr	r3, [r3, #8]
 8011a22:	2b05      	cmp	r3, #5
 8011a24:	d10c      	bne.n	8011a40 <HAL_RCC_OscConfig+0x5c8>
 8011a26:	4b6f      	ldr	r3, [pc, #444]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a2a:	4a6e      	ldr	r2, [pc, #440]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a2c:	f043 0304 	orr.w	r3, r3, #4
 8011a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8011a32:	4b6c      	ldr	r3, [pc, #432]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a36:	4a6b      	ldr	r2, [pc, #428]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a38:	f043 0301 	orr.w	r3, r3, #1
 8011a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8011a3e:	e00b      	b.n	8011a58 <HAL_RCC_OscConfig+0x5e0>
 8011a40:	4b68      	ldr	r3, [pc, #416]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a44:	4a67      	ldr	r2, [pc, #412]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a46:	f023 0301 	bic.w	r3, r3, #1
 8011a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8011a4c:	4b65      	ldr	r3, [pc, #404]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a50:	4a64      	ldr	r2, [pc, #400]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a52:	f023 0304 	bic.w	r3, r3, #4
 8011a56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	689b      	ldr	r3, [r3, #8]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d015      	beq.n	8011a8c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011a60:	f7ff f95e 	bl	8010d20 <HAL_GetTick>
 8011a64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011a66:	e00a      	b.n	8011a7e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011a68:	f7ff f95a 	bl	8010d20 <HAL_GetTick>
 8011a6c:	4602      	mov	r2, r0
 8011a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a70:	1ad3      	subs	r3, r2, r3
 8011a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a76:	4293      	cmp	r3, r2
 8011a78:	d901      	bls.n	8011a7e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8011a7a:	2303      	movs	r3, #3
 8011a7c:	e14e      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011a7e:	4b59      	ldr	r3, [pc, #356]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a82:	f003 0302 	and.w	r3, r3, #2
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d0ee      	beq.n	8011a68 <HAL_RCC_OscConfig+0x5f0>
 8011a8a:	e014      	b.n	8011ab6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011a8c:	f7ff f948 	bl	8010d20 <HAL_GetTick>
 8011a90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011a92:	e00a      	b.n	8011aaa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011a94:	f7ff f944 	bl	8010d20 <HAL_GetTick>
 8011a98:	4602      	mov	r2, r0
 8011a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a9c:	1ad3      	subs	r3, r2, r3
 8011a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d901      	bls.n	8011aaa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8011aa6:	2303      	movs	r3, #3
 8011aa8:	e138      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011aae:	f003 0302 	and.w	r3, r3, #2
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d1ee      	bne.n	8011a94 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	f000 812d 	beq.w	8011d1a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8011ac0:	4b48      	ldr	r3, [pc, #288]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011ac2:	691b      	ldr	r3, [r3, #16]
 8011ac4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011ac8:	2b18      	cmp	r3, #24
 8011aca:	f000 80bd 	beq.w	8011c48 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ad2:	2b02      	cmp	r3, #2
 8011ad4:	f040 809e 	bne.w	8011c14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011ad8:	4b42      	ldr	r3, [pc, #264]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	4a41      	ldr	r2, [pc, #260]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011ae4:	f7ff f91c 	bl	8010d20 <HAL_GetTick>
 8011ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011aea:	e008      	b.n	8011afe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011aec:	f7ff f918 	bl	8010d20 <HAL_GetTick>
 8011af0:	4602      	mov	r2, r0
 8011af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af4:	1ad3      	subs	r3, r2, r3
 8011af6:	2b02      	cmp	r3, #2
 8011af8:	d901      	bls.n	8011afe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8011afa:	2303      	movs	r3, #3
 8011afc:	e10e      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011afe:	4b39      	ldr	r3, [pc, #228]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d1f0      	bne.n	8011aec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011b0a:	4b36      	ldr	r3, [pc, #216]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011b0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011b0e:	4b37      	ldr	r3, [pc, #220]	@ (8011bec <HAL_RCC_OscConfig+0x774>)
 8011b10:	4013      	ands	r3, r2
 8011b12:	687a      	ldr	r2, [r7, #4]
 8011b14:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011b1a:	0112      	lsls	r2, r2, #4
 8011b1c:	430a      	orrs	r2, r1
 8011b1e:	4931      	ldr	r1, [pc, #196]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011b20:	4313      	orrs	r3, r2
 8011b22:	628b      	str	r3, [r1, #40]	@ 0x28
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b28:	3b01      	subs	r3, #1
 8011b2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b32:	3b01      	subs	r3, #1
 8011b34:	025b      	lsls	r3, r3, #9
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	431a      	orrs	r2, r3
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b3e:	3b01      	subs	r3, #1
 8011b40:	041b      	lsls	r3, r3, #16
 8011b42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011b46:	431a      	orrs	r2, r3
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b4c:	3b01      	subs	r3, #1
 8011b4e:	061b      	lsls	r3, r3, #24
 8011b50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011b54:	4923      	ldr	r1, [pc, #140]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011b56:	4313      	orrs	r3, r2
 8011b58:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8011b5a:	4b22      	ldr	r3, [pc, #136]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b5e:	4a21      	ldr	r2, [pc, #132]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011b60:	f023 0301 	bic.w	r3, r3, #1
 8011b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011b66:	4b1f      	ldr	r3, [pc, #124]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b6a:	4b21      	ldr	r3, [pc, #132]	@ (8011bf0 <HAL_RCC_OscConfig+0x778>)
 8011b6c:	4013      	ands	r3, r2
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011b72:	00d2      	lsls	r2, r2, #3
 8011b74:	491b      	ldr	r1, [pc, #108]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011b76:	4313      	orrs	r3, r2
 8011b78:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8011b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b7e:	f023 020c 	bic.w	r2, r3, #12
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b86:	4917      	ldr	r1, [pc, #92]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011b88:	4313      	orrs	r3, r2
 8011b8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8011b8c:	4b15      	ldr	r3, [pc, #84]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b90:	f023 0202 	bic.w	r2, r3, #2
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b98:	4912      	ldr	r1, [pc, #72]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011b9a:	4313      	orrs	r3, r2
 8011b9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011b9e:	4b11      	ldr	r3, [pc, #68]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ba2:	4a10      	ldr	r2, [pc, #64]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011baa:	4b0e      	ldr	r3, [pc, #56]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bae:	4a0d      	ldr	r2, [pc, #52]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bba:	4a0a      	ldr	r2, [pc, #40]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8011bc2:	4b08      	ldr	r3, [pc, #32]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bc6:	4a07      	ldr	r2, [pc, #28]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011bc8:	f043 0301 	orr.w	r3, r3, #1
 8011bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011bce:	4b05      	ldr	r3, [pc, #20]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	4a04      	ldr	r2, [pc, #16]	@ (8011be4 <HAL_RCC_OscConfig+0x76c>)
 8011bd4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011bda:	f7ff f8a1 	bl	8010d20 <HAL_GetTick>
 8011bde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011be0:	e011      	b.n	8011c06 <HAL_RCC_OscConfig+0x78e>
 8011be2:	bf00      	nop
 8011be4:	58024400 	.word	0x58024400
 8011be8:	58024800 	.word	0x58024800
 8011bec:	fffffc0c 	.word	0xfffffc0c
 8011bf0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011bf4:	f7ff f894 	bl	8010d20 <HAL_GetTick>
 8011bf8:	4602      	mov	r2, r0
 8011bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bfc:	1ad3      	subs	r3, r2, r3
 8011bfe:	2b02      	cmp	r3, #2
 8011c00:	d901      	bls.n	8011c06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8011c02:	2303      	movs	r3, #3
 8011c04:	e08a      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011c06:	4b47      	ldr	r3, [pc, #284]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d0f0      	beq.n	8011bf4 <HAL_RCC_OscConfig+0x77c>
 8011c12:	e082      	b.n	8011d1a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011c14:	4b43      	ldr	r3, [pc, #268]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	4a42      	ldr	r2, [pc, #264]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011c20:	f7ff f87e 	bl	8010d20 <HAL_GetTick>
 8011c24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011c26:	e008      	b.n	8011c3a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011c28:	f7ff f87a 	bl	8010d20 <HAL_GetTick>
 8011c2c:	4602      	mov	r2, r0
 8011c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c30:	1ad3      	subs	r3, r2, r3
 8011c32:	2b02      	cmp	r3, #2
 8011c34:	d901      	bls.n	8011c3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8011c36:	2303      	movs	r3, #3
 8011c38:	e070      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011c3a:	4b3a      	ldr	r3, [pc, #232]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d1f0      	bne.n	8011c28 <HAL_RCC_OscConfig+0x7b0>
 8011c46:	e068      	b.n	8011d1a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8011c48:	4b36      	ldr	r3, [pc, #216]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8011c4e:	4b35      	ldr	r3, [pc, #212]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c52:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c58:	2b01      	cmp	r3, #1
 8011c5a:	d031      	beq.n	8011cc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	f003 0203 	and.w	r2, r3, #3
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011c66:	429a      	cmp	r2, r3
 8011c68:	d12a      	bne.n	8011cc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	091b      	lsrs	r3, r3, #4
 8011c6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d122      	bne.n	8011cc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c84:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d11a      	bne.n	8011cc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	0a5b      	lsrs	r3, r3, #9
 8011c8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d111      	bne.n	8011cc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	0c1b      	lsrs	r3, r3, #16
 8011ca0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ca8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d108      	bne.n	8011cc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	0e1b      	lsrs	r3, r3, #24
 8011cb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011cba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d001      	beq.n	8011cc4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	e02b      	b.n	8011d1c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011cc4:	4b17      	ldr	r3, [pc, #92]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011cc8:	08db      	lsrs	r3, r3, #3
 8011cca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011cce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011cd4:	693a      	ldr	r2, [r7, #16]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d01f      	beq.n	8011d1a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8011cda:	4b12      	ldr	r3, [pc, #72]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cde:	4a11      	ldr	r2, [pc, #68]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011ce0:	f023 0301 	bic.w	r3, r3, #1
 8011ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011ce6:	f7ff f81b 	bl	8010d20 <HAL_GetTick>
 8011cea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011cec:	bf00      	nop
 8011cee:	f7ff f817 	bl	8010d20 <HAL_GetTick>
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf6:	4293      	cmp	r3, r2
 8011cf8:	d0f9      	beq.n	8011cee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8011d28 <HAL_RCC_OscConfig+0x8b0>)
 8011d00:	4013      	ands	r3, r2
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011d06:	00d2      	lsls	r2, r2, #3
 8011d08:	4906      	ldr	r1, [pc, #24]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011d0a:	4313      	orrs	r3, r2
 8011d0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8011d0e:	4b05      	ldr	r3, [pc, #20]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d12:	4a04      	ldr	r2, [pc, #16]	@ (8011d24 <HAL_RCC_OscConfig+0x8ac>)
 8011d14:	f043 0301 	orr.w	r3, r3, #1
 8011d18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8011d1a:	2300      	movs	r3, #0
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3730      	adds	r7, #48	@ 0x30
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}
 8011d24:	58024400 	.word	0x58024400
 8011d28:	ffff0007 	.word	0xffff0007

08011d2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b086      	sub	sp, #24
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d101      	bne.n	8011d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	e19c      	b.n	801207a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011d40:	4b8a      	ldr	r3, [pc, #552]	@ (8011f6c <HAL_RCC_ClockConfig+0x240>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f003 030f 	and.w	r3, r3, #15
 8011d48:	683a      	ldr	r2, [r7, #0]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d910      	bls.n	8011d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011d4e:	4b87      	ldr	r3, [pc, #540]	@ (8011f6c <HAL_RCC_ClockConfig+0x240>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f023 020f 	bic.w	r2, r3, #15
 8011d56:	4985      	ldr	r1, [pc, #532]	@ (8011f6c <HAL_RCC_ClockConfig+0x240>)
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	4313      	orrs	r3, r2
 8011d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011d5e:	4b83      	ldr	r3, [pc, #524]	@ (8011f6c <HAL_RCC_ClockConfig+0x240>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	f003 030f 	and.w	r3, r3, #15
 8011d66:	683a      	ldr	r2, [r7, #0]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d001      	beq.n	8011d70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	e184      	b.n	801207a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f003 0304 	and.w	r3, r3, #4
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d010      	beq.n	8011d9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	691a      	ldr	r2, [r3, #16]
 8011d80:	4b7b      	ldr	r3, [pc, #492]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011d82:	699b      	ldr	r3, [r3, #24]
 8011d84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d908      	bls.n	8011d9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011d8c:	4b78      	ldr	r3, [pc, #480]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011d8e:	699b      	ldr	r3, [r3, #24]
 8011d90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	691b      	ldr	r3, [r3, #16]
 8011d98:	4975      	ldr	r1, [pc, #468]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011d9a:	4313      	orrs	r3, r2
 8011d9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	f003 0308 	and.w	r3, r3, #8
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d010      	beq.n	8011dcc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	695a      	ldr	r2, [r3, #20]
 8011dae:	4b70      	ldr	r3, [pc, #448]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011db0:	69db      	ldr	r3, [r3, #28]
 8011db2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d908      	bls.n	8011dcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011dba:	4b6d      	ldr	r3, [pc, #436]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011dbc:	69db      	ldr	r3, [r3, #28]
 8011dbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	695b      	ldr	r3, [r3, #20]
 8011dc6:	496a      	ldr	r1, [pc, #424]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011dc8:	4313      	orrs	r3, r2
 8011dca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	f003 0310 	and.w	r3, r3, #16
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d010      	beq.n	8011dfa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	699a      	ldr	r2, [r3, #24]
 8011ddc:	4b64      	ldr	r3, [pc, #400]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011dde:	69db      	ldr	r3, [r3, #28]
 8011de0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d908      	bls.n	8011dfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011de8:	4b61      	ldr	r3, [pc, #388]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011dea:	69db      	ldr	r3, [r3, #28]
 8011dec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	699b      	ldr	r3, [r3, #24]
 8011df4:	495e      	ldr	r1, [pc, #376]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011df6:	4313      	orrs	r3, r2
 8011df8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	f003 0320 	and.w	r3, r3, #32
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d010      	beq.n	8011e28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	69da      	ldr	r2, [r3, #28]
 8011e0a:	4b59      	ldr	r3, [pc, #356]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011e0c:	6a1b      	ldr	r3, [r3, #32]
 8011e0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d908      	bls.n	8011e28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011e16:	4b56      	ldr	r3, [pc, #344]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011e18:	6a1b      	ldr	r3, [r3, #32]
 8011e1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	69db      	ldr	r3, [r3, #28]
 8011e22:	4953      	ldr	r1, [pc, #332]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011e24:	4313      	orrs	r3, r2
 8011e26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	f003 0302 	and.w	r3, r3, #2
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d010      	beq.n	8011e56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	68da      	ldr	r2, [r3, #12]
 8011e38:	4b4d      	ldr	r3, [pc, #308]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011e3a:	699b      	ldr	r3, [r3, #24]
 8011e3c:	f003 030f 	and.w	r3, r3, #15
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d908      	bls.n	8011e56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011e44:	4b4a      	ldr	r3, [pc, #296]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011e46:	699b      	ldr	r3, [r3, #24]
 8011e48:	f023 020f 	bic.w	r2, r3, #15
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	4947      	ldr	r1, [pc, #284]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011e52:	4313      	orrs	r3, r2
 8011e54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	f003 0301 	and.w	r3, r3, #1
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d055      	beq.n	8011f0e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011e62:	4b43      	ldr	r3, [pc, #268]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011e64:	699b      	ldr	r3, [r3, #24]
 8011e66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	689b      	ldr	r3, [r3, #8]
 8011e6e:	4940      	ldr	r1, [pc, #256]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011e70:	4313      	orrs	r3, r2
 8011e72:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	685b      	ldr	r3, [r3, #4]
 8011e78:	2b02      	cmp	r3, #2
 8011e7a:	d107      	bne.n	8011e8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d121      	bne.n	8011ecc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011e88:	2301      	movs	r3, #1
 8011e8a:	e0f6      	b.n	801207a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	2b03      	cmp	r3, #3
 8011e92:	d107      	bne.n	8011ea4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011e94:	4b36      	ldr	r3, [pc, #216]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d115      	bne.n	8011ecc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	e0ea      	b.n	801207a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	2b01      	cmp	r3, #1
 8011eaa:	d107      	bne.n	8011ebc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011eac:	4b30      	ldr	r3, [pc, #192]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d109      	bne.n	8011ecc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011eb8:	2301      	movs	r3, #1
 8011eba:	e0de      	b.n	801207a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f003 0304 	and.w	r3, r3, #4
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d101      	bne.n	8011ecc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011ec8:	2301      	movs	r3, #1
 8011eca:	e0d6      	b.n	801207a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011ecc:	4b28      	ldr	r3, [pc, #160]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011ece:	691b      	ldr	r3, [r3, #16]
 8011ed0:	f023 0207 	bic.w	r2, r3, #7
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	4925      	ldr	r1, [pc, #148]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011eda:	4313      	orrs	r3, r2
 8011edc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011ede:	f7fe ff1f 	bl	8010d20 <HAL_GetTick>
 8011ee2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011ee4:	e00a      	b.n	8011efc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011ee6:	f7fe ff1b 	bl	8010d20 <HAL_GetTick>
 8011eea:	4602      	mov	r2, r0
 8011eec:	697b      	ldr	r3, [r7, #20]
 8011eee:	1ad3      	subs	r3, r2, r3
 8011ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	d901      	bls.n	8011efc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011ef8:	2303      	movs	r3, #3
 8011efa:	e0be      	b.n	801207a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011efc:	4b1c      	ldr	r3, [pc, #112]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011efe:	691b      	ldr	r3, [r3, #16]
 8011f00:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	00db      	lsls	r3, r3, #3
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d1eb      	bne.n	8011ee6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	f003 0302 	and.w	r3, r3, #2
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d010      	beq.n	8011f3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	68da      	ldr	r2, [r3, #12]
 8011f1e:	4b14      	ldr	r3, [pc, #80]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011f20:	699b      	ldr	r3, [r3, #24]
 8011f22:	f003 030f 	and.w	r3, r3, #15
 8011f26:	429a      	cmp	r2, r3
 8011f28:	d208      	bcs.n	8011f3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011f2a:	4b11      	ldr	r3, [pc, #68]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011f2c:	699b      	ldr	r3, [r3, #24]
 8011f2e:	f023 020f 	bic.w	r2, r3, #15
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	68db      	ldr	r3, [r3, #12]
 8011f36:	490e      	ldr	r1, [pc, #56]	@ (8011f70 <HAL_RCC_ClockConfig+0x244>)
 8011f38:	4313      	orrs	r3, r2
 8011f3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8011f6c <HAL_RCC_ClockConfig+0x240>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	f003 030f 	and.w	r3, r3, #15
 8011f44:	683a      	ldr	r2, [r7, #0]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d214      	bcs.n	8011f74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011f4a:	4b08      	ldr	r3, [pc, #32]	@ (8011f6c <HAL_RCC_ClockConfig+0x240>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	f023 020f 	bic.w	r2, r3, #15
 8011f52:	4906      	ldr	r1, [pc, #24]	@ (8011f6c <HAL_RCC_ClockConfig+0x240>)
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	4313      	orrs	r3, r2
 8011f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011f5a:	4b04      	ldr	r3, [pc, #16]	@ (8011f6c <HAL_RCC_ClockConfig+0x240>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	f003 030f 	and.w	r3, r3, #15
 8011f62:	683a      	ldr	r2, [r7, #0]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d005      	beq.n	8011f74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011f68:	2301      	movs	r3, #1
 8011f6a:	e086      	b.n	801207a <HAL_RCC_ClockConfig+0x34e>
 8011f6c:	52002000 	.word	0x52002000
 8011f70:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	f003 0304 	and.w	r3, r3, #4
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d010      	beq.n	8011fa2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	691a      	ldr	r2, [r3, #16]
 8011f84:	4b3f      	ldr	r3, [pc, #252]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 8011f86:	699b      	ldr	r3, [r3, #24]
 8011f88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d208      	bcs.n	8011fa2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011f90:	4b3c      	ldr	r3, [pc, #240]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 8011f92:	699b      	ldr	r3, [r3, #24]
 8011f94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	691b      	ldr	r3, [r3, #16]
 8011f9c:	4939      	ldr	r1, [pc, #228]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 8011f9e:	4313      	orrs	r3, r2
 8011fa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f003 0308 	and.w	r3, r3, #8
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d010      	beq.n	8011fd0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	695a      	ldr	r2, [r3, #20]
 8011fb2:	4b34      	ldr	r3, [pc, #208]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 8011fb4:	69db      	ldr	r3, [r3, #28]
 8011fb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d208      	bcs.n	8011fd0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011fbe:	4b31      	ldr	r3, [pc, #196]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 8011fc0:	69db      	ldr	r3, [r3, #28]
 8011fc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	695b      	ldr	r3, [r3, #20]
 8011fca:	492e      	ldr	r1, [pc, #184]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 8011fcc:	4313      	orrs	r3, r2
 8011fce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	f003 0310 	and.w	r3, r3, #16
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d010      	beq.n	8011ffe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	699a      	ldr	r2, [r3, #24]
 8011fe0:	4b28      	ldr	r3, [pc, #160]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 8011fe2:	69db      	ldr	r3, [r3, #28]
 8011fe4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d208      	bcs.n	8011ffe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011fec:	4b25      	ldr	r3, [pc, #148]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 8011fee:	69db      	ldr	r3, [r3, #28]
 8011ff0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	699b      	ldr	r3, [r3, #24]
 8011ff8:	4922      	ldr	r1, [pc, #136]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f003 0320 	and.w	r3, r3, #32
 8012006:	2b00      	cmp	r3, #0
 8012008:	d010      	beq.n	801202c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	69da      	ldr	r2, [r3, #28]
 801200e:	4b1d      	ldr	r3, [pc, #116]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 8012010:	6a1b      	ldr	r3, [r3, #32]
 8012012:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8012016:	429a      	cmp	r2, r3
 8012018:	d208      	bcs.n	801202c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801201a:	4b1a      	ldr	r3, [pc, #104]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 801201c:	6a1b      	ldr	r3, [r3, #32]
 801201e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	69db      	ldr	r3, [r3, #28]
 8012026:	4917      	ldr	r1, [pc, #92]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 8012028:	4313      	orrs	r3, r2
 801202a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801202c:	f000 f834 	bl	8012098 <HAL_RCC_GetSysClockFreq>
 8012030:	4602      	mov	r2, r0
 8012032:	4b14      	ldr	r3, [pc, #80]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 8012034:	699b      	ldr	r3, [r3, #24]
 8012036:	0a1b      	lsrs	r3, r3, #8
 8012038:	f003 030f 	and.w	r3, r3, #15
 801203c:	4912      	ldr	r1, [pc, #72]	@ (8012088 <HAL_RCC_ClockConfig+0x35c>)
 801203e:	5ccb      	ldrb	r3, [r1, r3]
 8012040:	f003 031f 	and.w	r3, r3, #31
 8012044:	fa22 f303 	lsr.w	r3, r2, r3
 8012048:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801204a:	4b0e      	ldr	r3, [pc, #56]	@ (8012084 <HAL_RCC_ClockConfig+0x358>)
 801204c:	699b      	ldr	r3, [r3, #24]
 801204e:	f003 030f 	and.w	r3, r3, #15
 8012052:	4a0d      	ldr	r2, [pc, #52]	@ (8012088 <HAL_RCC_ClockConfig+0x35c>)
 8012054:	5cd3      	ldrb	r3, [r2, r3]
 8012056:	f003 031f 	and.w	r3, r3, #31
 801205a:	693a      	ldr	r2, [r7, #16]
 801205c:	fa22 f303 	lsr.w	r3, r2, r3
 8012060:	4a0a      	ldr	r2, [pc, #40]	@ (801208c <HAL_RCC_ClockConfig+0x360>)
 8012062:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012064:	4a0a      	ldr	r2, [pc, #40]	@ (8012090 <HAL_RCC_ClockConfig+0x364>)
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801206a:	4b0a      	ldr	r3, [pc, #40]	@ (8012094 <HAL_RCC_ClockConfig+0x368>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	4618      	mov	r0, r3
 8012070:	f7fe fe0c 	bl	8010c8c <HAL_InitTick>
 8012074:	4603      	mov	r3, r0
 8012076:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8012078:	7bfb      	ldrb	r3, [r7, #15]
}
 801207a:	4618      	mov	r0, r3
 801207c:	3718      	adds	r7, #24
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
 8012082:	bf00      	nop
 8012084:	58024400 	.word	0x58024400
 8012088:	08023888 	.word	0x08023888
 801208c:	24000004 	.word	0x24000004
 8012090:	24000000 	.word	0x24000000
 8012094:	24000008 	.word	0x24000008

08012098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012098:	b480      	push	{r7}
 801209a:	b089      	sub	sp, #36	@ 0x24
 801209c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801209e:	4bb3      	ldr	r3, [pc, #716]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80120a0:	691b      	ldr	r3, [r3, #16]
 80120a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80120a6:	2b18      	cmp	r3, #24
 80120a8:	f200 8155 	bhi.w	8012356 <HAL_RCC_GetSysClockFreq+0x2be>
 80120ac:	a201      	add	r2, pc, #4	@ (adr r2, 80120b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80120ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120b2:	bf00      	nop
 80120b4:	08012119 	.word	0x08012119
 80120b8:	08012357 	.word	0x08012357
 80120bc:	08012357 	.word	0x08012357
 80120c0:	08012357 	.word	0x08012357
 80120c4:	08012357 	.word	0x08012357
 80120c8:	08012357 	.word	0x08012357
 80120cc:	08012357 	.word	0x08012357
 80120d0:	08012357 	.word	0x08012357
 80120d4:	0801213f 	.word	0x0801213f
 80120d8:	08012357 	.word	0x08012357
 80120dc:	08012357 	.word	0x08012357
 80120e0:	08012357 	.word	0x08012357
 80120e4:	08012357 	.word	0x08012357
 80120e8:	08012357 	.word	0x08012357
 80120ec:	08012357 	.word	0x08012357
 80120f0:	08012357 	.word	0x08012357
 80120f4:	08012145 	.word	0x08012145
 80120f8:	08012357 	.word	0x08012357
 80120fc:	08012357 	.word	0x08012357
 8012100:	08012357 	.word	0x08012357
 8012104:	08012357 	.word	0x08012357
 8012108:	08012357 	.word	0x08012357
 801210c:	08012357 	.word	0x08012357
 8012110:	08012357 	.word	0x08012357
 8012114:	0801214b 	.word	0x0801214b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012118:	4b94      	ldr	r3, [pc, #592]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	f003 0320 	and.w	r3, r3, #32
 8012120:	2b00      	cmp	r3, #0
 8012122:	d009      	beq.n	8012138 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012124:	4b91      	ldr	r3, [pc, #580]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	08db      	lsrs	r3, r3, #3
 801212a:	f003 0303 	and.w	r3, r3, #3
 801212e:	4a90      	ldr	r2, [pc, #576]	@ (8012370 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012130:	fa22 f303 	lsr.w	r3, r2, r3
 8012134:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8012136:	e111      	b.n	801235c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8012138:	4b8d      	ldr	r3, [pc, #564]	@ (8012370 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801213a:	61bb      	str	r3, [r7, #24]
      break;
 801213c:	e10e      	b.n	801235c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801213e:	4b8d      	ldr	r3, [pc, #564]	@ (8012374 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012140:	61bb      	str	r3, [r7, #24]
      break;
 8012142:	e10b      	b.n	801235c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8012144:	4b8c      	ldr	r3, [pc, #560]	@ (8012378 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8012146:	61bb      	str	r3, [r7, #24]
      break;
 8012148:	e108      	b.n	801235c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801214a:	4b88      	ldr	r3, [pc, #544]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801214e:	f003 0303 	and.w	r3, r3, #3
 8012152:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8012154:	4b85      	ldr	r3, [pc, #532]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012158:	091b      	lsrs	r3, r3, #4
 801215a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801215e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8012160:	4b82      	ldr	r3, [pc, #520]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012164:	f003 0301 	and.w	r3, r3, #1
 8012168:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801216a:	4b80      	ldr	r3, [pc, #512]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801216c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801216e:	08db      	lsrs	r3, r3, #3
 8012170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012174:	68fa      	ldr	r2, [r7, #12]
 8012176:	fb02 f303 	mul.w	r3, r2, r3
 801217a:	ee07 3a90 	vmov	s15, r3
 801217e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012182:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	2b00      	cmp	r3, #0
 801218a:	f000 80e1 	beq.w	8012350 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	2b02      	cmp	r3, #2
 8012192:	f000 8083 	beq.w	801229c <HAL_RCC_GetSysClockFreq+0x204>
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	2b02      	cmp	r3, #2
 801219a:	f200 80a1 	bhi.w	80122e0 <HAL_RCC_GetSysClockFreq+0x248>
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d003      	beq.n	80121ac <HAL_RCC_GetSysClockFreq+0x114>
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	2b01      	cmp	r3, #1
 80121a8:	d056      	beq.n	8012258 <HAL_RCC_GetSysClockFreq+0x1c0>
 80121aa:	e099      	b.n	80122e0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80121ac:	4b6f      	ldr	r3, [pc, #444]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f003 0320 	and.w	r3, r3, #32
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d02d      	beq.n	8012214 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80121b8:	4b6c      	ldr	r3, [pc, #432]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	08db      	lsrs	r3, r3, #3
 80121be:	f003 0303 	and.w	r3, r3, #3
 80121c2:	4a6b      	ldr	r2, [pc, #428]	@ (8012370 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80121c4:	fa22 f303 	lsr.w	r3, r2, r3
 80121c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	ee07 3a90 	vmov	s15, r3
 80121d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	ee07 3a90 	vmov	s15, r3
 80121da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80121e2:	4b62      	ldr	r3, [pc, #392]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80121e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121ea:	ee07 3a90 	vmov	s15, r3
 80121ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80121f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80121f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801237c <HAL_RCC_GetSysClockFreq+0x2e4>
 80121fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80121fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801220e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8012212:	e087      	b.n	8012324 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	ee07 3a90 	vmov	s15, r3
 801221a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801221e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8012380 <HAL_RCC_GetSysClockFreq+0x2e8>
 8012222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012226:	4b51      	ldr	r3, [pc, #324]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801222a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801222e:	ee07 3a90 	vmov	s15, r3
 8012232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012236:	ed97 6a02 	vldr	s12, [r7, #8]
 801223a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801237c <HAL_RCC_GetSysClockFreq+0x2e4>
 801223e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801224a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801224e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012252:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8012256:	e065      	b.n	8012324 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	ee07 3a90 	vmov	s15, r3
 801225e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012262:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8012384 <HAL_RCC_GetSysClockFreq+0x2ec>
 8012266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801226a:	4b40      	ldr	r3, [pc, #256]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801226e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012272:	ee07 3a90 	vmov	s15, r3
 8012276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801227a:	ed97 6a02 	vldr	s12, [r7, #8]
 801227e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801237c <HAL_RCC_GetSysClockFreq+0x2e4>
 8012282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801228a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801228e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012296:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801229a:	e043      	b.n	8012324 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	ee07 3a90 	vmov	s15, r3
 80122a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8012388 <HAL_RCC_GetSysClockFreq+0x2f0>
 80122aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122ae:	4b2f      	ldr	r3, [pc, #188]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80122b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122b6:	ee07 3a90 	vmov	s15, r3
 80122ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80122be:	ed97 6a02 	vldr	s12, [r7, #8]
 80122c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801237c <HAL_RCC_GetSysClockFreq+0x2e4>
 80122c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80122ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80122d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80122d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80122de:	e021      	b.n	8012324 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	ee07 3a90 	vmov	s15, r3
 80122e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8012384 <HAL_RCC_GetSysClockFreq+0x2ec>
 80122ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122f2:	4b1e      	ldr	r3, [pc, #120]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80122f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122fa:	ee07 3a90 	vmov	s15, r3
 80122fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012302:	ed97 6a02 	vldr	s12, [r7, #8]
 8012306:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801237c <HAL_RCC_GetSysClockFreq+0x2e4>
 801230a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801230e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801231a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801231e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8012322:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8012324:	4b11      	ldr	r3, [pc, #68]	@ (801236c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012328:	0a5b      	lsrs	r3, r3, #9
 801232a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801232e:	3301      	adds	r3, #1
 8012330:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	ee07 3a90 	vmov	s15, r3
 8012338:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801233c:	edd7 6a07 	vldr	s13, [r7, #28]
 8012340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012348:	ee17 3a90 	vmov	r3, s15
 801234c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801234e:	e005      	b.n	801235c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8012350:	2300      	movs	r3, #0
 8012352:	61bb      	str	r3, [r7, #24]
      break;
 8012354:	e002      	b.n	801235c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8012356:	4b07      	ldr	r3, [pc, #28]	@ (8012374 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012358:	61bb      	str	r3, [r7, #24]
      break;
 801235a:	bf00      	nop
  }

  return sysclockfreq;
 801235c:	69bb      	ldr	r3, [r7, #24]
}
 801235e:	4618      	mov	r0, r3
 8012360:	3724      	adds	r7, #36	@ 0x24
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop
 801236c:	58024400 	.word	0x58024400
 8012370:	03d09000 	.word	0x03d09000
 8012374:	003d0900 	.word	0x003d0900
 8012378:	007a1200 	.word	0x007a1200
 801237c:	46000000 	.word	0x46000000
 8012380:	4c742400 	.word	0x4c742400
 8012384:	4a742400 	.word	0x4a742400
 8012388:	4af42400 	.word	0x4af42400

0801238c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012392:	f7ff fe81 	bl	8012098 <HAL_RCC_GetSysClockFreq>
 8012396:	4602      	mov	r2, r0
 8012398:	4b10      	ldr	r3, [pc, #64]	@ (80123dc <HAL_RCC_GetHCLKFreq+0x50>)
 801239a:	699b      	ldr	r3, [r3, #24]
 801239c:	0a1b      	lsrs	r3, r3, #8
 801239e:	f003 030f 	and.w	r3, r3, #15
 80123a2:	490f      	ldr	r1, [pc, #60]	@ (80123e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80123a4:	5ccb      	ldrb	r3, [r1, r3]
 80123a6:	f003 031f 	and.w	r3, r3, #31
 80123aa:	fa22 f303 	lsr.w	r3, r2, r3
 80123ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80123b0:	4b0a      	ldr	r3, [pc, #40]	@ (80123dc <HAL_RCC_GetHCLKFreq+0x50>)
 80123b2:	699b      	ldr	r3, [r3, #24]
 80123b4:	f003 030f 	and.w	r3, r3, #15
 80123b8:	4a09      	ldr	r2, [pc, #36]	@ (80123e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80123ba:	5cd3      	ldrb	r3, [r2, r3]
 80123bc:	f003 031f 	and.w	r3, r3, #31
 80123c0:	687a      	ldr	r2, [r7, #4]
 80123c2:	fa22 f303 	lsr.w	r3, r2, r3
 80123c6:	4a07      	ldr	r2, [pc, #28]	@ (80123e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80123c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80123ca:	4a07      	ldr	r2, [pc, #28]	@ (80123e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80123d0:	4b04      	ldr	r3, [pc, #16]	@ (80123e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80123d2:	681b      	ldr	r3, [r3, #0]
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3708      	adds	r7, #8
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}
 80123dc:	58024400 	.word	0x58024400
 80123e0:	08023888 	.word	0x08023888
 80123e4:	24000004 	.word	0x24000004
 80123e8:	24000000 	.word	0x24000000

080123ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80123f0:	f7ff ffcc 	bl	801238c <HAL_RCC_GetHCLKFreq>
 80123f4:	4602      	mov	r2, r0
 80123f6:	4b06      	ldr	r3, [pc, #24]	@ (8012410 <HAL_RCC_GetPCLK1Freq+0x24>)
 80123f8:	69db      	ldr	r3, [r3, #28]
 80123fa:	091b      	lsrs	r3, r3, #4
 80123fc:	f003 0307 	and.w	r3, r3, #7
 8012400:	4904      	ldr	r1, [pc, #16]	@ (8012414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012402:	5ccb      	ldrb	r3, [r1, r3]
 8012404:	f003 031f 	and.w	r3, r3, #31
 8012408:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801240c:	4618      	mov	r0, r3
 801240e:	bd80      	pop	{r7, pc}
 8012410:	58024400 	.word	0x58024400
 8012414:	08023888 	.word	0x08023888

08012418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801241c:	f7ff ffb6 	bl	801238c <HAL_RCC_GetHCLKFreq>
 8012420:	4602      	mov	r2, r0
 8012422:	4b06      	ldr	r3, [pc, #24]	@ (801243c <HAL_RCC_GetPCLK2Freq+0x24>)
 8012424:	69db      	ldr	r3, [r3, #28]
 8012426:	0a1b      	lsrs	r3, r3, #8
 8012428:	f003 0307 	and.w	r3, r3, #7
 801242c:	4904      	ldr	r1, [pc, #16]	@ (8012440 <HAL_RCC_GetPCLK2Freq+0x28>)
 801242e:	5ccb      	ldrb	r3, [r1, r3]
 8012430:	f003 031f 	and.w	r3, r3, #31
 8012434:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8012438:	4618      	mov	r0, r3
 801243a:	bd80      	pop	{r7, pc}
 801243c:	58024400 	.word	0x58024400
 8012440:	08023888 	.word	0x08023888

08012444 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012448:	b0ca      	sub	sp, #296	@ 0x128
 801244a:	af00      	add	r7, sp, #0
 801244c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012450:	2300      	movs	r3, #0
 8012452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8012456:	2300      	movs	r3, #0
 8012458:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801245c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012464:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8012468:	2500      	movs	r5, #0
 801246a:	ea54 0305 	orrs.w	r3, r4, r5
 801246e:	d049      	beq.n	8012504 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8012470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012474:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012476:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801247a:	d02f      	beq.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 801247c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012480:	d828      	bhi.n	80124d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8012482:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012486:	d01a      	beq.n	80124be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8012488:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801248c:	d822      	bhi.n	80124d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801248e:	2b00      	cmp	r3, #0
 8012490:	d003      	beq.n	801249a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8012492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012496:	d007      	beq.n	80124a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012498:	e01c      	b.n	80124d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801249a:	4bb8      	ldr	r3, [pc, #736]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801249c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801249e:	4ab7      	ldr	r2, [pc, #732]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80124a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80124a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80124a6:	e01a      	b.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80124a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80124ac:	3308      	adds	r3, #8
 80124ae:	2102      	movs	r1, #2
 80124b0:	4618      	mov	r0, r3
 80124b2:	f001 fc8f 	bl	8013dd4 <RCCEx_PLL2_Config>
 80124b6:	4603      	mov	r3, r0
 80124b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80124bc:	e00f      	b.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80124be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80124c2:	3328      	adds	r3, #40	@ 0x28
 80124c4:	2102      	movs	r1, #2
 80124c6:	4618      	mov	r0, r3
 80124c8:	f001 fd36 	bl	8013f38 <RCCEx_PLL3_Config>
 80124cc:	4603      	mov	r3, r0
 80124ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80124d2:	e004      	b.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80124d4:	2301      	movs	r3, #1
 80124d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80124da:	e000      	b.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80124dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80124de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10a      	bne.n	80124fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80124e6:	4ba5      	ldr	r3, [pc, #660]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80124e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80124ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80124ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80124f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80124f4:	4aa1      	ldr	r2, [pc, #644]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80124f6:	430b      	orrs	r3, r1
 80124f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80124fa:	e003      	b.n	8012504 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80124fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8012510:	f04f 0900 	mov.w	r9, #0
 8012514:	ea58 0309 	orrs.w	r3, r8, r9
 8012518:	d047      	beq.n	80125aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801251a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801251e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012520:	2b04      	cmp	r3, #4
 8012522:	d82a      	bhi.n	801257a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8012524:	a201      	add	r2, pc, #4	@ (adr r2, 801252c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8012526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801252a:	bf00      	nop
 801252c:	08012541 	.word	0x08012541
 8012530:	0801254f 	.word	0x0801254f
 8012534:	08012565 	.word	0x08012565
 8012538:	08012583 	.word	0x08012583
 801253c:	08012583 	.word	0x08012583
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012540:	4b8e      	ldr	r3, [pc, #568]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8012542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012544:	4a8d      	ldr	r2, [pc, #564]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8012546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801254a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801254c:	e01a      	b.n	8012584 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801254e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012552:	3308      	adds	r3, #8
 8012554:	2100      	movs	r1, #0
 8012556:	4618      	mov	r0, r3
 8012558:	f001 fc3c 	bl	8013dd4 <RCCEx_PLL2_Config>
 801255c:	4603      	mov	r3, r0
 801255e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012562:	e00f      	b.n	8012584 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012568:	3328      	adds	r3, #40	@ 0x28
 801256a:	2100      	movs	r1, #0
 801256c:	4618      	mov	r0, r3
 801256e:	f001 fce3 	bl	8013f38 <RCCEx_PLL3_Config>
 8012572:	4603      	mov	r3, r0
 8012574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012578:	e004      	b.n	8012584 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801257a:	2301      	movs	r3, #1
 801257c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012580:	e000      	b.n	8012584 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8012582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012588:	2b00      	cmp	r3, #0
 801258a:	d10a      	bne.n	80125a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801258c:	4b7b      	ldr	r3, [pc, #492]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801258e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012590:	f023 0107 	bic.w	r1, r3, #7
 8012594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801259a:	4a78      	ldr	r2, [pc, #480]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801259c:	430b      	orrs	r3, r1
 801259e:	6513      	str	r3, [r2, #80]	@ 0x50
 80125a0:	e003      	b.n	80125aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80125a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80125aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80125ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80125b6:	f04f 0b00 	mov.w	fp, #0
 80125ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80125be:	d04c      	beq.n	801265a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80125c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80125c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80125c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80125ca:	d030      	beq.n	801262e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80125cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80125d0:	d829      	bhi.n	8012626 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80125d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80125d4:	d02d      	beq.n	8012632 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80125d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80125d8:	d825      	bhi.n	8012626 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80125da:	2b80      	cmp	r3, #128	@ 0x80
 80125dc:	d018      	beq.n	8012610 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80125de:	2b80      	cmp	r3, #128	@ 0x80
 80125e0:	d821      	bhi.n	8012626 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d002      	beq.n	80125ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80125e6:	2b40      	cmp	r3, #64	@ 0x40
 80125e8:	d007      	beq.n	80125fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80125ea:	e01c      	b.n	8012626 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80125ec:	4b63      	ldr	r3, [pc, #396]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80125ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125f0:	4a62      	ldr	r2, [pc, #392]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80125f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80125f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80125f8:	e01c      	b.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80125fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80125fe:	3308      	adds	r3, #8
 8012600:	2100      	movs	r1, #0
 8012602:	4618      	mov	r0, r3
 8012604:	f001 fbe6 	bl	8013dd4 <RCCEx_PLL2_Config>
 8012608:	4603      	mov	r3, r0
 801260a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801260e:	e011      	b.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012614:	3328      	adds	r3, #40	@ 0x28
 8012616:	2100      	movs	r1, #0
 8012618:	4618      	mov	r0, r3
 801261a:	f001 fc8d 	bl	8013f38 <RCCEx_PLL3_Config>
 801261e:	4603      	mov	r3, r0
 8012620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8012624:	e006      	b.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012626:	2301      	movs	r3, #1
 8012628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801262c:	e002      	b.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801262e:	bf00      	nop
 8012630:	e000      	b.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8012632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012638:	2b00      	cmp	r3, #0
 801263a:	d10a      	bne.n	8012652 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801263c:	4b4f      	ldr	r3, [pc, #316]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801263e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012640:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8012644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801264a:	4a4c      	ldr	r2, [pc, #304]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801264c:	430b      	orrs	r3, r1
 801264e:	6513      	str	r3, [r2, #80]	@ 0x50
 8012650:	e003      	b.n	801265a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801265a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012662:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8012666:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801266a:	2300      	movs	r3, #0
 801266c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8012670:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8012674:	460b      	mov	r3, r1
 8012676:	4313      	orrs	r3, r2
 8012678:	d053      	beq.n	8012722 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801267a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801267e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012682:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012686:	d035      	beq.n	80126f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8012688:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801268c:	d82e      	bhi.n	80126ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801268e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012692:	d031      	beq.n	80126f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8012694:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012698:	d828      	bhi.n	80126ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801269a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801269e:	d01a      	beq.n	80126d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80126a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80126a4:	d822      	bhi.n	80126ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d003      	beq.n	80126b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80126aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80126ae:	d007      	beq.n	80126c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80126b0:	e01c      	b.n	80126ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80126b2:	4b32      	ldr	r3, [pc, #200]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80126b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126b6:	4a31      	ldr	r2, [pc, #196]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80126b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80126bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80126be:	e01c      	b.n	80126fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80126c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80126c4:	3308      	adds	r3, #8
 80126c6:	2100      	movs	r1, #0
 80126c8:	4618      	mov	r0, r3
 80126ca:	f001 fb83 	bl	8013dd4 <RCCEx_PLL2_Config>
 80126ce:	4603      	mov	r3, r0
 80126d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80126d4:	e011      	b.n	80126fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80126d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80126da:	3328      	adds	r3, #40	@ 0x28
 80126dc:	2100      	movs	r1, #0
 80126de:	4618      	mov	r0, r3
 80126e0:	f001 fc2a 	bl	8013f38 <RCCEx_PLL3_Config>
 80126e4:	4603      	mov	r3, r0
 80126e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80126ea:	e006      	b.n	80126fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80126ec:	2301      	movs	r3, #1
 80126ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80126f2:	e002      	b.n	80126fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80126f4:	bf00      	nop
 80126f6:	e000      	b.n	80126fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80126f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80126fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d10b      	bne.n	801271a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8012702:	4b1e      	ldr	r3, [pc, #120]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8012704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012706:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801270a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801270e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012712:	4a1a      	ldr	r2, [pc, #104]	@ (801277c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8012714:	430b      	orrs	r3, r1
 8012716:	6593      	str	r3, [r2, #88]	@ 0x58
 8012718:	e003      	b.n	8012722 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801271a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801271e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8012722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801272e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8012732:	2300      	movs	r3, #0
 8012734:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8012738:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801273c:	460b      	mov	r3, r1
 801273e:	4313      	orrs	r3, r2
 8012740:	d056      	beq.n	80127f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8012742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012746:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801274a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801274e:	d038      	beq.n	80127c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8012750:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012754:	d831      	bhi.n	80127ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8012756:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801275a:	d034      	beq.n	80127c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801275c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012760:	d82b      	bhi.n	80127ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8012762:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012766:	d01d      	beq.n	80127a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8012768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801276c:	d825      	bhi.n	80127ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 801276e:	2b00      	cmp	r3, #0
 8012770:	d006      	beq.n	8012780 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8012772:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012776:	d00a      	beq.n	801278e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8012778:	e01f      	b.n	80127ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 801277a:	bf00      	nop
 801277c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012780:	4ba2      	ldr	r3, [pc, #648]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012784:	4aa1      	ldr	r2, [pc, #644]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801278a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801278c:	e01c      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801278e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012792:	3308      	adds	r3, #8
 8012794:	2100      	movs	r1, #0
 8012796:	4618      	mov	r0, r3
 8012798:	f001 fb1c 	bl	8013dd4 <RCCEx_PLL2_Config>
 801279c:	4603      	mov	r3, r0
 801279e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80127a2:	e011      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80127a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80127a8:	3328      	adds	r3, #40	@ 0x28
 80127aa:	2100      	movs	r1, #0
 80127ac:	4618      	mov	r0, r3
 80127ae:	f001 fbc3 	bl	8013f38 <RCCEx_PLL3_Config>
 80127b2:	4603      	mov	r3, r0
 80127b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80127b8:	e006      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80127ba:	2301      	movs	r3, #1
 80127bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80127c0:	e002      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80127c2:	bf00      	nop
 80127c4:	e000      	b.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80127c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80127c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d10b      	bne.n	80127e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80127d0:	4b8e      	ldr	r3, [pc, #568]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80127d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80127d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80127d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80127dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80127e0:	4a8a      	ldr	r2, [pc, #552]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80127e2:	430b      	orrs	r3, r1
 80127e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80127e6:	e003      	b.n	80127f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80127ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80127f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80127f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80127fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8012800:	2300      	movs	r3, #0
 8012802:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8012806:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801280a:	460b      	mov	r3, r1
 801280c:	4313      	orrs	r3, r2
 801280e:	d03a      	beq.n	8012886 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8012810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012816:	2b30      	cmp	r3, #48	@ 0x30
 8012818:	d01f      	beq.n	801285a <HAL_RCCEx_PeriphCLKConfig+0x416>
 801281a:	2b30      	cmp	r3, #48	@ 0x30
 801281c:	d819      	bhi.n	8012852 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801281e:	2b20      	cmp	r3, #32
 8012820:	d00c      	beq.n	801283c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8012822:	2b20      	cmp	r3, #32
 8012824:	d815      	bhi.n	8012852 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8012826:	2b00      	cmp	r3, #0
 8012828:	d019      	beq.n	801285e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801282a:	2b10      	cmp	r3, #16
 801282c:	d111      	bne.n	8012852 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801282e:	4b77      	ldr	r3, [pc, #476]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012832:	4a76      	ldr	r2, [pc, #472]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012838:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801283a:	e011      	b.n	8012860 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801283c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012840:	3308      	adds	r3, #8
 8012842:	2102      	movs	r1, #2
 8012844:	4618      	mov	r0, r3
 8012846:	f001 fac5 	bl	8013dd4 <RCCEx_PLL2_Config>
 801284a:	4603      	mov	r3, r0
 801284c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8012850:	e006      	b.n	8012860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012852:	2301      	movs	r3, #1
 8012854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012858:	e002      	b.n	8012860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801285a:	bf00      	nop
 801285c:	e000      	b.n	8012860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801285e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012864:	2b00      	cmp	r3, #0
 8012866:	d10a      	bne.n	801287e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8012868:	4b68      	ldr	r3, [pc, #416]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801286a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801286c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8012870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012876:	4a65      	ldr	r2, [pc, #404]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012878:	430b      	orrs	r3, r1
 801287a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801287c:	e003      	b.n	8012886 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801287e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8012886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8012892:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012896:	2300      	movs	r3, #0
 8012898:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801289c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80128a0:	460b      	mov	r3, r1
 80128a2:	4313      	orrs	r3, r2
 80128a4:	d051      	beq.n	801294a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80128a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80128aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80128b0:	d035      	beq.n	801291e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80128b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80128b6:	d82e      	bhi.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80128b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80128bc:	d031      	beq.n	8012922 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80128be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80128c2:	d828      	bhi.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80128c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80128c8:	d01a      	beq.n	8012900 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80128ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80128ce:	d822      	bhi.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d003      	beq.n	80128dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80128d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80128d8:	d007      	beq.n	80128ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80128da:	e01c      	b.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80128dc:	4b4b      	ldr	r3, [pc, #300]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80128de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128e0:	4a4a      	ldr	r2, [pc, #296]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80128e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80128e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80128e8:	e01c      	b.n	8012924 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80128ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80128ee:	3308      	adds	r3, #8
 80128f0:	2100      	movs	r1, #0
 80128f2:	4618      	mov	r0, r3
 80128f4:	f001 fa6e 	bl	8013dd4 <RCCEx_PLL2_Config>
 80128f8:	4603      	mov	r3, r0
 80128fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80128fe:	e011      	b.n	8012924 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012904:	3328      	adds	r3, #40	@ 0x28
 8012906:	2100      	movs	r1, #0
 8012908:	4618      	mov	r0, r3
 801290a:	f001 fb15 	bl	8013f38 <RCCEx_PLL3_Config>
 801290e:	4603      	mov	r3, r0
 8012910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012914:	e006      	b.n	8012924 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012916:	2301      	movs	r3, #1
 8012918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801291c:	e002      	b.n	8012924 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801291e:	bf00      	nop
 8012920:	e000      	b.n	8012924 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8012922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012928:	2b00      	cmp	r3, #0
 801292a:	d10a      	bne.n	8012942 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801292c:	4b37      	ldr	r3, [pc, #220]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801292e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012930:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8012934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801293a:	4a34      	ldr	r2, [pc, #208]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801293c:	430b      	orrs	r3, r1
 801293e:	6513      	str	r3, [r2, #80]	@ 0x50
 8012940:	e003      	b.n	801294a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801294a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012952:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8012956:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801295a:	2300      	movs	r3, #0
 801295c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012960:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8012964:	460b      	mov	r3, r1
 8012966:	4313      	orrs	r3, r2
 8012968:	d056      	beq.n	8012a18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801296a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801296e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012974:	d033      	beq.n	80129de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8012976:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801297a:	d82c      	bhi.n	80129d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801297c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012980:	d02f      	beq.n	80129e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8012982:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012986:	d826      	bhi.n	80129d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8012988:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801298c:	d02b      	beq.n	80129e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801298e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012992:	d820      	bhi.n	80129d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8012994:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012998:	d012      	beq.n	80129c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801299a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801299e:	d81a      	bhi.n	80129d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d022      	beq.n	80129ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80129a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80129a8:	d115      	bne.n	80129d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80129aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80129ae:	3308      	adds	r3, #8
 80129b0:	2101      	movs	r1, #1
 80129b2:	4618      	mov	r0, r3
 80129b4:	f001 fa0e 	bl	8013dd4 <RCCEx_PLL2_Config>
 80129b8:	4603      	mov	r3, r0
 80129ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80129be:	e015      	b.n	80129ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80129c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80129c4:	3328      	adds	r3, #40	@ 0x28
 80129c6:	2101      	movs	r1, #1
 80129c8:	4618      	mov	r0, r3
 80129ca:	f001 fab5 	bl	8013f38 <RCCEx_PLL3_Config>
 80129ce:	4603      	mov	r3, r0
 80129d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80129d4:	e00a      	b.n	80129ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80129d6:	2301      	movs	r3, #1
 80129d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80129dc:	e006      	b.n	80129ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80129de:	bf00      	nop
 80129e0:	e004      	b.n	80129ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80129e2:	bf00      	nop
 80129e4:	e002      	b.n	80129ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80129e6:	bf00      	nop
 80129e8:	e000      	b.n	80129ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80129ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80129ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d10d      	bne.n	8012a10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80129f4:	4b05      	ldr	r3, [pc, #20]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80129f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80129f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80129fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a02:	4a02      	ldr	r2, [pc, #8]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012a04:	430b      	orrs	r3, r1
 8012a06:	6513      	str	r3, [r2, #80]	@ 0x50
 8012a08:	e006      	b.n	8012a18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8012a0a:	bf00      	nop
 8012a0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8012a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a20:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8012a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012a28:	2300      	movs	r3, #0
 8012a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012a2e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8012a32:	460b      	mov	r3, r1
 8012a34:	4313      	orrs	r3, r2
 8012a36:	d055      	beq.n	8012ae4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8012a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012a44:	d033      	beq.n	8012aae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8012a46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012a4a:	d82c      	bhi.n	8012aa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8012a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a50:	d02f      	beq.n	8012ab2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8012a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a56:	d826      	bhi.n	8012aa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8012a58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012a5c:	d02b      	beq.n	8012ab6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8012a5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012a62:	d820      	bhi.n	8012aa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8012a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012a68:	d012      	beq.n	8012a90 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8012a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012a6e:	d81a      	bhi.n	8012aa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d022      	beq.n	8012aba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8012a74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012a78:	d115      	bne.n	8012aa6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a7e:	3308      	adds	r3, #8
 8012a80:	2101      	movs	r1, #1
 8012a82:	4618      	mov	r0, r3
 8012a84:	f001 f9a6 	bl	8013dd4 <RCCEx_PLL2_Config>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012a8e:	e015      	b.n	8012abc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a94:	3328      	adds	r3, #40	@ 0x28
 8012a96:	2101      	movs	r1, #1
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f001 fa4d 	bl	8013f38 <RCCEx_PLL3_Config>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012aa4:	e00a      	b.n	8012abc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012aac:	e006      	b.n	8012abc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8012aae:	bf00      	nop
 8012ab0:	e004      	b.n	8012abc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8012ab2:	bf00      	nop
 8012ab4:	e002      	b.n	8012abc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8012ab6:	bf00      	nop
 8012ab8:	e000      	b.n	8012abc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8012aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d10b      	bne.n	8012adc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8012ac4:	4ba3      	ldr	r3, [pc, #652]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ac8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012ad0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012ad4:	4a9f      	ldr	r2, [pc, #636]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012ad6:	430b      	orrs	r3, r1
 8012ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8012ada:	e003      	b.n	8012ae4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8012ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8012af0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012af4:	2300      	movs	r3, #0
 8012af6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012afa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8012afe:	460b      	mov	r3, r1
 8012b00:	4313      	orrs	r3, r2
 8012b02:	d037      	beq.n	8012b74 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8012b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b0e:	d00e      	beq.n	8012b2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8012b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b14:	d816      	bhi.n	8012b44 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d018      	beq.n	8012b4c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8012b1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012b1e:	d111      	bne.n	8012b44 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012b20:	4b8c      	ldr	r3, [pc, #560]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b24:	4a8b      	ldr	r2, [pc, #556]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012b2c:	e00f      	b.n	8012b4e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b32:	3308      	adds	r3, #8
 8012b34:	2101      	movs	r1, #1
 8012b36:	4618      	mov	r0, r3
 8012b38:	f001 f94c 	bl	8013dd4 <RCCEx_PLL2_Config>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012b42:	e004      	b.n	8012b4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012b44:	2301      	movs	r3, #1
 8012b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012b4a:	e000      	b.n	8012b4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8012b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d10a      	bne.n	8012b6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8012b56:	4b7f      	ldr	r3, [pc, #508]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b64:	4a7b      	ldr	r2, [pc, #492]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012b66:	430b      	orrs	r3, r1
 8012b68:	6513      	str	r3, [r2, #80]	@ 0x50
 8012b6a:	e003      	b.n	8012b74 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8012b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8012b80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012b84:	2300      	movs	r3, #0
 8012b86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012b8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8012b8e:	460b      	mov	r3, r1
 8012b90:	4313      	orrs	r3, r2
 8012b92:	d039      	beq.n	8012c08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8012b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012b9a:	2b03      	cmp	r3, #3
 8012b9c:	d81c      	bhi.n	8012bd8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8012b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8012ba4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8012ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ba4:	08012be1 	.word	0x08012be1
 8012ba8:	08012bb5 	.word	0x08012bb5
 8012bac:	08012bc3 	.word	0x08012bc3
 8012bb0:	08012be1 	.word	0x08012be1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012bb4:	4b67      	ldr	r3, [pc, #412]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bb8:	4a66      	ldr	r2, [pc, #408]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012bba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012bc0:	e00f      	b.n	8012be2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012bc6:	3308      	adds	r3, #8
 8012bc8:	2102      	movs	r1, #2
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f001 f902 	bl	8013dd4 <RCCEx_PLL2_Config>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012bd6:	e004      	b.n	8012be2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012bd8:	2301      	movs	r3, #1
 8012bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012bde:	e000      	b.n	8012be2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8012be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d10a      	bne.n	8012c00 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8012bea:	4b5a      	ldr	r3, [pc, #360]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012bee:	f023 0103 	bic.w	r1, r3, #3
 8012bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012bf8:	4a56      	ldr	r2, [pc, #344]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012bfa:	430b      	orrs	r3, r1
 8012bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012bfe:	e003      	b.n	8012c08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012c04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8012c14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012c18:	2300      	movs	r3, #0
 8012c1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012c1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8012c22:	460b      	mov	r3, r1
 8012c24:	4313      	orrs	r3, r2
 8012c26:	f000 809f 	beq.w	8012d68 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012c2a:	4b4b      	ldr	r3, [pc, #300]	@ (8012d58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	4a4a      	ldr	r2, [pc, #296]	@ (8012d58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8012c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012c34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012c36:	f7fe f873 	bl	8010d20 <HAL_GetTick>
 8012c3a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012c3e:	e00b      	b.n	8012c58 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012c40:	f7fe f86e 	bl	8010d20 <HAL_GetTick>
 8012c44:	4602      	mov	r2, r0
 8012c46:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8012c4a:	1ad3      	subs	r3, r2, r3
 8012c4c:	2b64      	cmp	r3, #100	@ 0x64
 8012c4e:	d903      	bls.n	8012c58 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8012c50:	2303      	movs	r3, #3
 8012c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012c56:	e005      	b.n	8012c64 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012c58:	4b3f      	ldr	r3, [pc, #252]	@ (8012d58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d0ed      	beq.n	8012c40 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8012c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d179      	bne.n	8012d60 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012c6c:	4b39      	ldr	r3, [pc, #228]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012c6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012c74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012c78:	4053      	eors	r3, r2
 8012c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d015      	beq.n	8012cae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012c82:	4b34      	ldr	r3, [pc, #208]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012c8a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012c8e:	4b31      	ldr	r3, [pc, #196]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c92:	4a30      	ldr	r2, [pc, #192]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012c98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012ca4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8012ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012cac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8012cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012cb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012cba:	d118      	bne.n	8012cee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012cbc:	f7fe f830 	bl	8010d20 <HAL_GetTick>
 8012cc0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012cc4:	e00d      	b.n	8012ce2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012cc6:	f7fe f82b 	bl	8010d20 <HAL_GetTick>
 8012cca:	4602      	mov	r2, r0
 8012ccc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8012cd0:	1ad2      	subs	r2, r2, r3
 8012cd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d903      	bls.n	8012ce2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8012cda:	2303      	movs	r3, #3
 8012cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8012ce0:	e005      	b.n	8012cee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ce6:	f003 0302 	and.w	r3, r3, #2
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d0eb      	beq.n	8012cc6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8012cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d129      	bne.n	8012d4a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012cfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012d02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012d06:	d10e      	bne.n	8012d26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8012d08:	4b12      	ldr	r3, [pc, #72]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012d0a:	691b      	ldr	r3, [r3, #16]
 8012d0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012d14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012d18:	091a      	lsrs	r2, r3, #4
 8012d1a:	4b10      	ldr	r3, [pc, #64]	@ (8012d5c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8012d1c:	4013      	ands	r3, r2
 8012d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012d20:	430b      	orrs	r3, r1
 8012d22:	6113      	str	r3, [r2, #16]
 8012d24:	e005      	b.n	8012d32 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8012d26:	4b0b      	ldr	r3, [pc, #44]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012d28:	691b      	ldr	r3, [r3, #16]
 8012d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012d2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012d30:	6113      	str	r3, [r2, #16]
 8012d32:	4b08      	ldr	r3, [pc, #32]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012d34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012d3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012d42:	4a04      	ldr	r2, [pc, #16]	@ (8012d54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8012d44:	430b      	orrs	r3, r1
 8012d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8012d48:	e00e      	b.n	8012d68 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8012d52:	e009      	b.n	8012d68 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8012d54:	58024400 	.word	0x58024400
 8012d58:	58024800 	.word	0x58024800
 8012d5c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d70:	f002 0301 	and.w	r3, r2, #1
 8012d74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012d78:	2300      	movs	r3, #0
 8012d7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012d7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8012d82:	460b      	mov	r3, r1
 8012d84:	4313      	orrs	r3, r2
 8012d86:	f000 8089 	beq.w	8012e9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8012d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012d90:	2b28      	cmp	r3, #40	@ 0x28
 8012d92:	d86b      	bhi.n	8012e6c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8012d94:	a201      	add	r2, pc, #4	@ (adr r2, 8012d9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d9a:	bf00      	nop
 8012d9c:	08012e75 	.word	0x08012e75
 8012da0:	08012e6d 	.word	0x08012e6d
 8012da4:	08012e6d 	.word	0x08012e6d
 8012da8:	08012e6d 	.word	0x08012e6d
 8012dac:	08012e6d 	.word	0x08012e6d
 8012db0:	08012e6d 	.word	0x08012e6d
 8012db4:	08012e6d 	.word	0x08012e6d
 8012db8:	08012e6d 	.word	0x08012e6d
 8012dbc:	08012e41 	.word	0x08012e41
 8012dc0:	08012e6d 	.word	0x08012e6d
 8012dc4:	08012e6d 	.word	0x08012e6d
 8012dc8:	08012e6d 	.word	0x08012e6d
 8012dcc:	08012e6d 	.word	0x08012e6d
 8012dd0:	08012e6d 	.word	0x08012e6d
 8012dd4:	08012e6d 	.word	0x08012e6d
 8012dd8:	08012e6d 	.word	0x08012e6d
 8012ddc:	08012e57 	.word	0x08012e57
 8012de0:	08012e6d 	.word	0x08012e6d
 8012de4:	08012e6d 	.word	0x08012e6d
 8012de8:	08012e6d 	.word	0x08012e6d
 8012dec:	08012e6d 	.word	0x08012e6d
 8012df0:	08012e6d 	.word	0x08012e6d
 8012df4:	08012e6d 	.word	0x08012e6d
 8012df8:	08012e6d 	.word	0x08012e6d
 8012dfc:	08012e75 	.word	0x08012e75
 8012e00:	08012e6d 	.word	0x08012e6d
 8012e04:	08012e6d 	.word	0x08012e6d
 8012e08:	08012e6d 	.word	0x08012e6d
 8012e0c:	08012e6d 	.word	0x08012e6d
 8012e10:	08012e6d 	.word	0x08012e6d
 8012e14:	08012e6d 	.word	0x08012e6d
 8012e18:	08012e6d 	.word	0x08012e6d
 8012e1c:	08012e75 	.word	0x08012e75
 8012e20:	08012e6d 	.word	0x08012e6d
 8012e24:	08012e6d 	.word	0x08012e6d
 8012e28:	08012e6d 	.word	0x08012e6d
 8012e2c:	08012e6d 	.word	0x08012e6d
 8012e30:	08012e6d 	.word	0x08012e6d
 8012e34:	08012e6d 	.word	0x08012e6d
 8012e38:	08012e6d 	.word	0x08012e6d
 8012e3c:	08012e75 	.word	0x08012e75
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e44:	3308      	adds	r3, #8
 8012e46:	2101      	movs	r1, #1
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f000 ffc3 	bl	8013dd4 <RCCEx_PLL2_Config>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012e54:	e00f      	b.n	8012e76 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e5a:	3328      	adds	r3, #40	@ 0x28
 8012e5c:	2101      	movs	r1, #1
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f001 f86a 	bl	8013f38 <RCCEx_PLL3_Config>
 8012e64:	4603      	mov	r3, r0
 8012e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012e6a:	e004      	b.n	8012e76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012e72:	e000      	b.n	8012e76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8012e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d10a      	bne.n	8012e94 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012e7e:	4bbf      	ldr	r3, [pc, #764]	@ (801317c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8012e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8012e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012e8c:	4abb      	ldr	r2, [pc, #748]	@ (801317c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8012e8e:	430b      	orrs	r3, r1
 8012e90:	6553      	str	r3, [r2, #84]	@ 0x54
 8012e92:	e003      	b.n	8012e9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea4:	f002 0302 	and.w	r3, r2, #2
 8012ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012eac:	2300      	movs	r3, #0
 8012eae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012eb2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8012eb6:	460b      	mov	r3, r1
 8012eb8:	4313      	orrs	r3, r2
 8012eba:	d041      	beq.n	8012f40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012ec0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012ec2:	2b05      	cmp	r3, #5
 8012ec4:	d824      	bhi.n	8012f10 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8012ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8012ecc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8012ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ecc:	08012f19 	.word	0x08012f19
 8012ed0:	08012ee5 	.word	0x08012ee5
 8012ed4:	08012efb 	.word	0x08012efb
 8012ed8:	08012f19 	.word	0x08012f19
 8012edc:	08012f19 	.word	0x08012f19
 8012ee0:	08012f19 	.word	0x08012f19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012ee8:	3308      	adds	r3, #8
 8012eea:	2101      	movs	r1, #1
 8012eec:	4618      	mov	r0, r3
 8012eee:	f000 ff71 	bl	8013dd4 <RCCEx_PLL2_Config>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012ef8:	e00f      	b.n	8012f1a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012efe:	3328      	adds	r3, #40	@ 0x28
 8012f00:	2101      	movs	r1, #1
 8012f02:	4618      	mov	r0, r3
 8012f04:	f001 f818 	bl	8013f38 <RCCEx_PLL3_Config>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012f0e:	e004      	b.n	8012f1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f10:	2301      	movs	r3, #1
 8012f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012f16:	e000      	b.n	8012f1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8012f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d10a      	bne.n	8012f38 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012f22:	4b96      	ldr	r3, [pc, #600]	@ (801317c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8012f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f26:	f023 0107 	bic.w	r1, r3, #7
 8012f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012f2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012f30:	4a92      	ldr	r2, [pc, #584]	@ (801317c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8012f32:	430b      	orrs	r3, r1
 8012f34:	6553      	str	r3, [r2, #84]	@ 0x54
 8012f36:	e003      	b.n	8012f40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012f3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f48:	f002 0304 	and.w	r3, r2, #4
 8012f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012f50:	2300      	movs	r3, #0
 8012f52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012f56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8012f5a:	460b      	mov	r3, r1
 8012f5c:	4313      	orrs	r3, r2
 8012f5e:	d044      	beq.n	8012fea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012f68:	2b05      	cmp	r3, #5
 8012f6a:	d825      	bhi.n	8012fb8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8012f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8012f74 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8012f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f72:	bf00      	nop
 8012f74:	08012fc1 	.word	0x08012fc1
 8012f78:	08012f8d 	.word	0x08012f8d
 8012f7c:	08012fa3 	.word	0x08012fa3
 8012f80:	08012fc1 	.word	0x08012fc1
 8012f84:	08012fc1 	.word	0x08012fc1
 8012f88:	08012fc1 	.word	0x08012fc1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012f90:	3308      	adds	r3, #8
 8012f92:	2101      	movs	r1, #1
 8012f94:	4618      	mov	r0, r3
 8012f96:	f000 ff1d 	bl	8013dd4 <RCCEx_PLL2_Config>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012fa0:	e00f      	b.n	8012fc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012fa6:	3328      	adds	r3, #40	@ 0x28
 8012fa8:	2101      	movs	r1, #1
 8012faa:	4618      	mov	r0, r3
 8012fac:	f000 ffc4 	bl	8013f38 <RCCEx_PLL3_Config>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012fb6:	e004      	b.n	8012fc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012fb8:	2301      	movs	r3, #1
 8012fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8012fbe:	e000      	b.n	8012fc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8012fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d10b      	bne.n	8012fe2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012fca:	4b6c      	ldr	r3, [pc, #432]	@ (801317c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8012fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012fce:	f023 0107 	bic.w	r1, r3, #7
 8012fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012fda:	4a68      	ldr	r2, [pc, #416]	@ (801317c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8012fdc:	430b      	orrs	r3, r1
 8012fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8012fe0:	e003      	b.n	8012fea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8012fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff2:	f002 0320 	and.w	r3, r2, #32
 8012ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8013000:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8013004:	460b      	mov	r3, r1
 8013006:	4313      	orrs	r3, r2
 8013008:	d055      	beq.n	80130b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801300a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013016:	d033      	beq.n	8013080 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8013018:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801301c:	d82c      	bhi.n	8013078 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801301e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013022:	d02f      	beq.n	8013084 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8013024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013028:	d826      	bhi.n	8013078 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801302a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801302e:	d02b      	beq.n	8013088 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8013030:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013034:	d820      	bhi.n	8013078 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8013036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801303a:	d012      	beq.n	8013062 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801303c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013040:	d81a      	bhi.n	8013078 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8013042:	2b00      	cmp	r3, #0
 8013044:	d022      	beq.n	801308c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8013046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801304a:	d115      	bne.n	8013078 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801304c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013050:	3308      	adds	r3, #8
 8013052:	2100      	movs	r1, #0
 8013054:	4618      	mov	r0, r3
 8013056:	f000 febd 	bl	8013dd4 <RCCEx_PLL2_Config>
 801305a:	4603      	mov	r3, r0
 801305c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8013060:	e015      	b.n	801308e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013066:	3328      	adds	r3, #40	@ 0x28
 8013068:	2102      	movs	r1, #2
 801306a:	4618      	mov	r0, r3
 801306c:	f000 ff64 	bl	8013f38 <RCCEx_PLL3_Config>
 8013070:	4603      	mov	r3, r0
 8013072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8013076:	e00a      	b.n	801308e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013078:	2301      	movs	r3, #1
 801307a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801307e:	e006      	b.n	801308e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8013080:	bf00      	nop
 8013082:	e004      	b.n	801308e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8013084:	bf00      	nop
 8013086:	e002      	b.n	801308e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8013088:	bf00      	nop
 801308a:	e000      	b.n	801308e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801308c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801308e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013092:	2b00      	cmp	r3, #0
 8013094:	d10b      	bne.n	80130ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013096:	4b39      	ldr	r3, [pc, #228]	@ (801317c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8013098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801309a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801309e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80130a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80130a6:	4a35      	ldr	r2, [pc, #212]	@ (801317c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80130a8:	430b      	orrs	r3, r1
 80130aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80130ac:	e003      	b.n	80130b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80130b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80130b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80130ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80130c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80130c6:	2300      	movs	r3, #0
 80130c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80130cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80130d0:	460b      	mov	r3, r1
 80130d2:	4313      	orrs	r3, r2
 80130d4:	d058      	beq.n	8013188 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80130d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80130da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80130de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80130e2:	d033      	beq.n	801314c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80130e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80130e8:	d82c      	bhi.n	8013144 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80130ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80130ee:	d02f      	beq.n	8013150 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80130f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80130f4:	d826      	bhi.n	8013144 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80130f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80130fa:	d02b      	beq.n	8013154 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80130fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8013100:	d820      	bhi.n	8013144 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8013102:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013106:	d012      	beq.n	801312e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8013108:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801310c:	d81a      	bhi.n	8013144 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801310e:	2b00      	cmp	r3, #0
 8013110:	d022      	beq.n	8013158 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8013112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013116:	d115      	bne.n	8013144 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801311c:	3308      	adds	r3, #8
 801311e:	2100      	movs	r1, #0
 8013120:	4618      	mov	r0, r3
 8013122:	f000 fe57 	bl	8013dd4 <RCCEx_PLL2_Config>
 8013126:	4603      	mov	r3, r0
 8013128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801312c:	e015      	b.n	801315a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013132:	3328      	adds	r3, #40	@ 0x28
 8013134:	2102      	movs	r1, #2
 8013136:	4618      	mov	r0, r3
 8013138:	f000 fefe 	bl	8013f38 <RCCEx_PLL3_Config>
 801313c:	4603      	mov	r3, r0
 801313e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8013142:	e00a      	b.n	801315a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013144:	2301      	movs	r3, #1
 8013146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801314a:	e006      	b.n	801315a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801314c:	bf00      	nop
 801314e:	e004      	b.n	801315a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8013150:	bf00      	nop
 8013152:	e002      	b.n	801315a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8013154:	bf00      	nop
 8013156:	e000      	b.n	801315a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8013158:	bf00      	nop
    }

    if (ret == HAL_OK)
 801315a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801315e:	2b00      	cmp	r3, #0
 8013160:	d10e      	bne.n	8013180 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8013162:	4b06      	ldr	r3, [pc, #24]	@ (801317c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8013164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013166:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801316a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801316e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013172:	4a02      	ldr	r2, [pc, #8]	@ (801317c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8013174:	430b      	orrs	r3, r1
 8013176:	6593      	str	r3, [r2, #88]	@ 0x58
 8013178:	e006      	b.n	8013188 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801317a:	bf00      	nop
 801317c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013184:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8013188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013190:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8013194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013198:	2300      	movs	r3, #0
 801319a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801319e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80131a2:	460b      	mov	r3, r1
 80131a4:	4313      	orrs	r3, r2
 80131a6:	d055      	beq.n	8013254 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80131a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80131ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80131b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80131b4:	d033      	beq.n	801321e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80131b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80131ba:	d82c      	bhi.n	8013216 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80131bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80131c0:	d02f      	beq.n	8013222 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80131c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80131c6:	d826      	bhi.n	8013216 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80131c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80131cc:	d02b      	beq.n	8013226 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80131ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80131d2:	d820      	bhi.n	8013216 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80131d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80131d8:	d012      	beq.n	8013200 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80131da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80131de:	d81a      	bhi.n	8013216 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d022      	beq.n	801322a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80131e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80131e8:	d115      	bne.n	8013216 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80131ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80131ee:	3308      	adds	r3, #8
 80131f0:	2100      	movs	r1, #0
 80131f2:	4618      	mov	r0, r3
 80131f4:	f000 fdee 	bl	8013dd4 <RCCEx_PLL2_Config>
 80131f8:	4603      	mov	r3, r0
 80131fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80131fe:	e015      	b.n	801322c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013204:	3328      	adds	r3, #40	@ 0x28
 8013206:	2102      	movs	r1, #2
 8013208:	4618      	mov	r0, r3
 801320a:	f000 fe95 	bl	8013f38 <RCCEx_PLL3_Config>
 801320e:	4603      	mov	r3, r0
 8013210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8013214:	e00a      	b.n	801322c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013216:	2301      	movs	r3, #1
 8013218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801321c:	e006      	b.n	801322c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801321e:	bf00      	nop
 8013220:	e004      	b.n	801322c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8013222:	bf00      	nop
 8013224:	e002      	b.n	801322c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8013226:	bf00      	nop
 8013228:	e000      	b.n	801322c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801322a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801322c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013230:	2b00      	cmp	r3, #0
 8013232:	d10b      	bne.n	801324c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8013234:	4ba1      	ldr	r3, [pc, #644]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8013236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013238:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801323c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013240:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013244:	4a9d      	ldr	r2, [pc, #628]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8013246:	430b      	orrs	r3, r1
 8013248:	6593      	str	r3, [r2, #88]	@ 0x58
 801324a:	e003      	b.n	8013254 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801324c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8013254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325c:	f002 0308 	and.w	r3, r2, #8
 8013260:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8013264:	2300      	movs	r3, #0
 8013266:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801326a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801326e:	460b      	mov	r3, r1
 8013270:	4313      	orrs	r3, r2
 8013272:	d01e      	beq.n	80132b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8013274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801327c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013280:	d10c      	bne.n	801329c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8013282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013286:	3328      	adds	r3, #40	@ 0x28
 8013288:	2102      	movs	r1, #2
 801328a:	4618      	mov	r0, r3
 801328c:	f000 fe54 	bl	8013f38 <RCCEx_PLL3_Config>
 8013290:	4603      	mov	r3, r0
 8013292:	2b00      	cmp	r3, #0
 8013294:	d002      	beq.n	801329c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8013296:	2301      	movs	r3, #1
 8013298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801329c:	4b87      	ldr	r3, [pc, #540]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801329e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80132a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80132a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80132a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80132ac:	4a83      	ldr	r2, [pc, #524]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80132ae:	430b      	orrs	r3, r1
 80132b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80132b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80132b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ba:	f002 0310 	and.w	r3, r2, #16
 80132be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80132c2:	2300      	movs	r3, #0
 80132c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80132c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80132cc:	460b      	mov	r3, r1
 80132ce:	4313      	orrs	r3, r2
 80132d0:	d01e      	beq.n	8013310 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80132d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80132d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80132da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80132de:	d10c      	bne.n	80132fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80132e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80132e4:	3328      	adds	r3, #40	@ 0x28
 80132e6:	2102      	movs	r1, #2
 80132e8:	4618      	mov	r0, r3
 80132ea:	f000 fe25 	bl	8013f38 <RCCEx_PLL3_Config>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d002      	beq.n	80132fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80132f4:	2301      	movs	r3, #1
 80132f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80132fa:	4b70      	ldr	r3, [pc, #448]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80132fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80132fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8013302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013306:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801330a:	4a6c      	ldr	r2, [pc, #432]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801330c:	430b      	orrs	r3, r1
 801330e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8013310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013318:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801331c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013320:	2300      	movs	r3, #0
 8013322:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013326:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801332a:	460b      	mov	r3, r1
 801332c:	4313      	orrs	r3, r2
 801332e:	d03e      	beq.n	80133ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8013330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801333c:	d022      	beq.n	8013384 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801333e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013342:	d81b      	bhi.n	801337c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8013344:	2b00      	cmp	r3, #0
 8013346:	d003      	beq.n	8013350 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8013348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801334c:	d00b      	beq.n	8013366 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801334e:	e015      	b.n	801337c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013354:	3308      	adds	r3, #8
 8013356:	2100      	movs	r1, #0
 8013358:	4618      	mov	r0, r3
 801335a:	f000 fd3b 	bl	8013dd4 <RCCEx_PLL2_Config>
 801335e:	4603      	mov	r3, r0
 8013360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8013364:	e00f      	b.n	8013386 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801336a:	3328      	adds	r3, #40	@ 0x28
 801336c:	2102      	movs	r1, #2
 801336e:	4618      	mov	r0, r3
 8013370:	f000 fde2 	bl	8013f38 <RCCEx_PLL3_Config>
 8013374:	4603      	mov	r3, r0
 8013376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801337a:	e004      	b.n	8013386 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801337c:	2301      	movs	r3, #1
 801337e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8013382:	e000      	b.n	8013386 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8013384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801338a:	2b00      	cmp	r3, #0
 801338c:	d10b      	bne.n	80133a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801338e:	4b4b      	ldr	r3, [pc, #300]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8013390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013392:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8013396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801339a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801339e:	4a47      	ldr	r2, [pc, #284]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80133a0:	430b      	orrs	r3, r1
 80133a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80133a4:	e003      	b.n	80133ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80133a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80133aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80133ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80133b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80133ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80133bc:	2300      	movs	r3, #0
 80133be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80133c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80133c4:	460b      	mov	r3, r1
 80133c6:	4313      	orrs	r3, r2
 80133c8:	d03b      	beq.n	8013442 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80133ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80133ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80133d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80133d6:	d01f      	beq.n	8013418 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80133d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80133dc:	d818      	bhi.n	8013410 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80133de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80133e2:	d003      	beq.n	80133ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80133e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80133e8:	d007      	beq.n	80133fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80133ea:	e011      	b.n	8013410 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80133ec:	4b33      	ldr	r3, [pc, #204]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80133ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133f0:	4a32      	ldr	r2, [pc, #200]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80133f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80133f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80133f8:	e00f      	b.n	801341a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80133fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80133fe:	3328      	adds	r3, #40	@ 0x28
 8013400:	2101      	movs	r1, #1
 8013402:	4618      	mov	r0, r3
 8013404:	f000 fd98 	bl	8013f38 <RCCEx_PLL3_Config>
 8013408:	4603      	mov	r3, r0
 801340a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801340e:	e004      	b.n	801341a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013410:	2301      	movs	r3, #1
 8013412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8013416:	e000      	b.n	801341a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8013418:	bf00      	nop
    }

    if (ret == HAL_OK)
 801341a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801341e:	2b00      	cmp	r3, #0
 8013420:	d10b      	bne.n	801343a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8013422:	4b26      	ldr	r3, [pc, #152]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8013424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013426:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013432:	4a22      	ldr	r2, [pc, #136]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8013434:	430b      	orrs	r3, r1
 8013436:	6553      	str	r3, [r2, #84]	@ 0x54
 8013438:	e003      	b.n	8013442 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801343a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801343e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8013442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801344a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801344e:	673b      	str	r3, [r7, #112]	@ 0x70
 8013450:	2300      	movs	r3, #0
 8013452:	677b      	str	r3, [r7, #116]	@ 0x74
 8013454:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8013458:	460b      	mov	r3, r1
 801345a:	4313      	orrs	r3, r2
 801345c:	d034      	beq.n	80134c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013464:	2b00      	cmp	r3, #0
 8013466:	d003      	beq.n	8013470 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8013468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801346c:	d007      	beq.n	801347e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801346e:	e011      	b.n	8013494 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013470:	4b12      	ldr	r3, [pc, #72]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8013472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013474:	4a11      	ldr	r2, [pc, #68]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8013476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801347a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801347c:	e00e      	b.n	801349c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801347e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013482:	3308      	adds	r3, #8
 8013484:	2102      	movs	r1, #2
 8013486:	4618      	mov	r0, r3
 8013488:	f000 fca4 	bl	8013dd4 <RCCEx_PLL2_Config>
 801348c:	4603      	mov	r3, r0
 801348e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013492:	e003      	b.n	801349c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8013494:	2301      	movs	r3, #1
 8013496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801349a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801349c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d10d      	bne.n	80134c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80134a4:	4b05      	ldr	r3, [pc, #20]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80134a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80134a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80134ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80134b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80134b2:	4a02      	ldr	r2, [pc, #8]	@ (80134bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80134b4:	430b      	orrs	r3, r1
 80134b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80134b8:	e006      	b.n	80134c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80134ba:	bf00      	nop
 80134bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80134c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80134c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80134c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80134cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80134d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80134d6:	2300      	movs	r3, #0
 80134d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80134da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80134de:	460b      	mov	r3, r1
 80134e0:	4313      	orrs	r3, r2
 80134e2:	d00c      	beq.n	80134fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80134e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80134e8:	3328      	adds	r3, #40	@ 0x28
 80134ea:	2102      	movs	r1, #2
 80134ec:	4618      	mov	r0, r3
 80134ee:	f000 fd23 	bl	8013f38 <RCCEx_PLL3_Config>
 80134f2:	4603      	mov	r3, r0
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d002      	beq.n	80134fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80134f8:	2301      	movs	r3, #1
 80134fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80134fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013506:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801350a:	663b      	str	r3, [r7, #96]	@ 0x60
 801350c:	2300      	movs	r3, #0
 801350e:	667b      	str	r3, [r7, #100]	@ 0x64
 8013510:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8013514:	460b      	mov	r3, r1
 8013516:	4313      	orrs	r3, r2
 8013518:	d038      	beq.n	801358c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801351a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801351e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013526:	d018      	beq.n	801355a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8013528:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801352c:	d811      	bhi.n	8013552 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801352e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013532:	d014      	beq.n	801355e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8013534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013538:	d80b      	bhi.n	8013552 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801353a:	2b00      	cmp	r3, #0
 801353c:	d011      	beq.n	8013562 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801353e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013542:	d106      	bne.n	8013552 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013544:	4bc3      	ldr	r3, [pc, #780]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8013546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013548:	4ac2      	ldr	r2, [pc, #776]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801354a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801354e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8013550:	e008      	b.n	8013564 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013552:	2301      	movs	r3, #1
 8013554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8013558:	e004      	b.n	8013564 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801355a:	bf00      	nop
 801355c:	e002      	b.n	8013564 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801355e:	bf00      	nop
 8013560:	e000      	b.n	8013564 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8013562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013568:	2b00      	cmp	r3, #0
 801356a:	d10b      	bne.n	8013584 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801356c:	4bb9      	ldr	r3, [pc, #740]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801356e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013570:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8013574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801357c:	4ab5      	ldr	r2, [pc, #724]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801357e:	430b      	orrs	r3, r1
 8013580:	6553      	str	r3, [r2, #84]	@ 0x54
 8013582:	e003      	b.n	801358c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801358c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013594:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8013598:	65bb      	str	r3, [r7, #88]	@ 0x58
 801359a:	2300      	movs	r3, #0
 801359c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801359e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80135a2:	460b      	mov	r3, r1
 80135a4:	4313      	orrs	r3, r2
 80135a6:	d009      	beq.n	80135bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80135a8:	4baa      	ldr	r3, [pc, #680]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80135aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80135ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80135b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80135b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135b6:	4aa7      	ldr	r2, [pc, #668]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80135b8:	430b      	orrs	r3, r1
 80135ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80135bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80135c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80135c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80135ca:	2300      	movs	r3, #0
 80135cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80135ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80135d2:	460b      	mov	r3, r1
 80135d4:	4313      	orrs	r3, r2
 80135d6:	d00a      	beq.n	80135ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80135d8:	4b9e      	ldr	r3, [pc, #632]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80135da:	691b      	ldr	r3, [r3, #16]
 80135dc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80135e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80135e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80135e8:	4a9a      	ldr	r2, [pc, #616]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80135ea:	430b      	orrs	r3, r1
 80135ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80135ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80135f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80135fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80135fc:	2300      	movs	r3, #0
 80135fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013600:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8013604:	460b      	mov	r3, r1
 8013606:	4313      	orrs	r3, r2
 8013608:	d009      	beq.n	801361e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801360a:	4b92      	ldr	r3, [pc, #584]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801360c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801360e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8013612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013618:	4a8e      	ldr	r2, [pc, #568]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801361a:	430b      	orrs	r3, r1
 801361c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013626:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801362a:	643b      	str	r3, [r7, #64]	@ 0x40
 801362c:	2300      	movs	r3, #0
 801362e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013630:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8013634:	460b      	mov	r3, r1
 8013636:	4313      	orrs	r3, r2
 8013638:	d00e      	beq.n	8013658 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801363a:	4b86      	ldr	r3, [pc, #536]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801363c:	691b      	ldr	r3, [r3, #16]
 801363e:	4a85      	ldr	r2, [pc, #532]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8013640:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8013644:	6113      	str	r3, [r2, #16]
 8013646:	4b83      	ldr	r3, [pc, #524]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8013648:	6919      	ldr	r1, [r3, #16]
 801364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801364e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013652:	4a80      	ldr	r2, [pc, #512]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8013654:	430b      	orrs	r3, r1
 8013656:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013660:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8013664:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013666:	2300      	movs	r3, #0
 8013668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801366a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801366e:	460b      	mov	r3, r1
 8013670:	4313      	orrs	r3, r2
 8013672:	d009      	beq.n	8013688 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8013674:	4b77      	ldr	r3, [pc, #476]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8013676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013678:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801367c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8013680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013682:	4a74      	ldr	r2, [pc, #464]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8013684:	430b      	orrs	r3, r1
 8013686:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013690:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8013694:	633b      	str	r3, [r7, #48]	@ 0x30
 8013696:	2300      	movs	r3, #0
 8013698:	637b      	str	r3, [r7, #52]	@ 0x34
 801369a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801369e:	460b      	mov	r3, r1
 80136a0:	4313      	orrs	r3, r2
 80136a2:	d00a      	beq.n	80136ba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80136a4:	4b6b      	ldr	r3, [pc, #428]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80136a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80136a8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80136ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80136b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80136b4:	4a67      	ldr	r2, [pc, #412]	@ (8013854 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80136b6:	430b      	orrs	r3, r1
 80136b8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80136ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80136be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c2:	2100      	movs	r1, #0
 80136c4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80136c6:	f003 0301 	and.w	r3, r3, #1
 80136ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80136cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80136d0:	460b      	mov	r3, r1
 80136d2:	4313      	orrs	r3, r2
 80136d4:	d011      	beq.n	80136fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80136d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80136da:	3308      	adds	r3, #8
 80136dc:	2100      	movs	r1, #0
 80136de:	4618      	mov	r0, r3
 80136e0:	f000 fb78 	bl	8013dd4 <RCCEx_PLL2_Config>
 80136e4:	4603      	mov	r3, r0
 80136e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80136ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d003      	beq.n	80136fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80136f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80136f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80136fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80136fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013702:	2100      	movs	r1, #0
 8013704:	6239      	str	r1, [r7, #32]
 8013706:	f003 0302 	and.w	r3, r3, #2
 801370a:	627b      	str	r3, [r7, #36]	@ 0x24
 801370c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013710:	460b      	mov	r3, r1
 8013712:	4313      	orrs	r3, r2
 8013714:	d011      	beq.n	801373a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8013716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801371a:	3308      	adds	r3, #8
 801371c:	2101      	movs	r1, #1
 801371e:	4618      	mov	r0, r3
 8013720:	f000 fb58 	bl	8013dd4 <RCCEx_PLL2_Config>
 8013724:	4603      	mov	r3, r0
 8013726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801372a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801372e:	2b00      	cmp	r3, #0
 8013730:	d003      	beq.n	801373a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013742:	2100      	movs	r1, #0
 8013744:	61b9      	str	r1, [r7, #24]
 8013746:	f003 0304 	and.w	r3, r3, #4
 801374a:	61fb      	str	r3, [r7, #28]
 801374c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8013750:	460b      	mov	r3, r1
 8013752:	4313      	orrs	r3, r2
 8013754:	d011      	beq.n	801377a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801375a:	3308      	adds	r3, #8
 801375c:	2102      	movs	r1, #2
 801375e:	4618      	mov	r0, r3
 8013760:	f000 fb38 	bl	8013dd4 <RCCEx_PLL2_Config>
 8013764:	4603      	mov	r3, r0
 8013766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801376a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801376e:	2b00      	cmp	r3, #0
 8013770:	d003      	beq.n	801377a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013782:	2100      	movs	r1, #0
 8013784:	6139      	str	r1, [r7, #16]
 8013786:	f003 0308 	and.w	r3, r3, #8
 801378a:	617b      	str	r3, [r7, #20]
 801378c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013790:	460b      	mov	r3, r1
 8013792:	4313      	orrs	r3, r2
 8013794:	d011      	beq.n	80137ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801379a:	3328      	adds	r3, #40	@ 0x28
 801379c:	2100      	movs	r1, #0
 801379e:	4618      	mov	r0, r3
 80137a0:	f000 fbca 	bl	8013f38 <RCCEx_PLL3_Config>
 80137a4:	4603      	mov	r3, r0
 80137a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80137aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d003      	beq.n	80137ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80137b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80137b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80137ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80137be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c2:	2100      	movs	r1, #0
 80137c4:	60b9      	str	r1, [r7, #8]
 80137c6:	f003 0310 	and.w	r3, r3, #16
 80137ca:	60fb      	str	r3, [r7, #12]
 80137cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80137d0:	460b      	mov	r3, r1
 80137d2:	4313      	orrs	r3, r2
 80137d4:	d011      	beq.n	80137fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80137d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80137da:	3328      	adds	r3, #40	@ 0x28
 80137dc:	2101      	movs	r1, #1
 80137de:	4618      	mov	r0, r3
 80137e0:	f000 fbaa 	bl	8013f38 <RCCEx_PLL3_Config>
 80137e4:	4603      	mov	r3, r0
 80137e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80137ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d003      	beq.n	80137fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80137f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80137f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80137fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80137fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013802:	2100      	movs	r1, #0
 8013804:	6039      	str	r1, [r7, #0]
 8013806:	f003 0320 	and.w	r3, r3, #32
 801380a:	607b      	str	r3, [r7, #4]
 801380c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8013810:	460b      	mov	r3, r1
 8013812:	4313      	orrs	r3, r2
 8013814:	d011      	beq.n	801383a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801381a:	3328      	adds	r3, #40	@ 0x28
 801381c:	2102      	movs	r1, #2
 801381e:	4618      	mov	r0, r3
 8013820:	f000 fb8a 	bl	8013f38 <RCCEx_PLL3_Config>
 8013824:	4603      	mov	r3, r0
 8013826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801382a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801382e:	2b00      	cmp	r3, #0
 8013830:	d003      	beq.n	801383a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801383a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801383e:	2b00      	cmp	r3, #0
 8013840:	d101      	bne.n	8013846 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8013842:	2300      	movs	r3, #0
 8013844:	e000      	b.n	8013848 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8013846:	2301      	movs	r3, #1
}
 8013848:	4618      	mov	r0, r3
 801384a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801384e:	46bd      	mov	sp, r7
 8013850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013854:	58024400 	.word	0x58024400

08013858 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801385c:	f7fe fd96 	bl	801238c <HAL_RCC_GetHCLKFreq>
 8013860:	4602      	mov	r2, r0
 8013862:	4b06      	ldr	r3, [pc, #24]	@ (801387c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013864:	6a1b      	ldr	r3, [r3, #32]
 8013866:	091b      	lsrs	r3, r3, #4
 8013868:	f003 0307 	and.w	r3, r3, #7
 801386c:	4904      	ldr	r1, [pc, #16]	@ (8013880 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801386e:	5ccb      	ldrb	r3, [r1, r3]
 8013870:	f003 031f 	and.w	r3, r3, #31
 8013874:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013878:	4618      	mov	r0, r3
 801387a:	bd80      	pop	{r7, pc}
 801387c:	58024400 	.word	0x58024400
 8013880:	08023888 	.word	0x08023888

08013884 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013884:	b480      	push	{r7}
 8013886:	b089      	sub	sp, #36	@ 0x24
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801388c:	4ba1      	ldr	r3, [pc, #644]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013890:	f003 0303 	and.w	r3, r3, #3
 8013894:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013896:	4b9f      	ldr	r3, [pc, #636]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801389a:	0b1b      	lsrs	r3, r3, #12
 801389c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80138a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80138a2:	4b9c      	ldr	r3, [pc, #624]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80138a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138a6:	091b      	lsrs	r3, r3, #4
 80138a8:	f003 0301 	and.w	r3, r3, #1
 80138ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80138ae:	4b99      	ldr	r3, [pc, #612]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80138b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80138b2:	08db      	lsrs	r3, r3, #3
 80138b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138b8:	693a      	ldr	r2, [r7, #16]
 80138ba:	fb02 f303 	mul.w	r3, r2, r3
 80138be:	ee07 3a90 	vmov	s15, r3
 80138c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80138c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	f000 8111 	beq.w	8013af4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80138d2:	69bb      	ldr	r3, [r7, #24]
 80138d4:	2b02      	cmp	r3, #2
 80138d6:	f000 8083 	beq.w	80139e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	2b02      	cmp	r3, #2
 80138de:	f200 80a1 	bhi.w	8013a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d003      	beq.n	80138f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80138e8:	69bb      	ldr	r3, [r7, #24]
 80138ea:	2b01      	cmp	r3, #1
 80138ec:	d056      	beq.n	801399c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80138ee:	e099      	b.n	8013a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80138f0:	4b88      	ldr	r3, [pc, #544]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	f003 0320 	and.w	r3, r3, #32
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d02d      	beq.n	8013958 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80138fc:	4b85      	ldr	r3, [pc, #532]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	08db      	lsrs	r3, r3, #3
 8013902:	f003 0303 	and.w	r3, r3, #3
 8013906:	4a84      	ldr	r2, [pc, #528]	@ (8013b18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013908:	fa22 f303 	lsr.w	r3, r2, r3
 801390c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	ee07 3a90 	vmov	s15, r3
 8013914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	ee07 3a90 	vmov	s15, r3
 801391e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013926:	4b7b      	ldr	r3, [pc, #492]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801392a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801392e:	ee07 3a90 	vmov	s15, r3
 8013932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013936:	ed97 6a03 	vldr	s12, [r7, #12]
 801393a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801393e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801394a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801394e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013952:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013956:	e087      	b.n	8013a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013958:	697b      	ldr	r3, [r7, #20]
 801395a:	ee07 3a90 	vmov	s15, r3
 801395e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013962:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013b20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801396a:	4b6a      	ldr	r3, [pc, #424]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801396c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801396e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013972:	ee07 3a90 	vmov	s15, r3
 8013976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801397a:	ed97 6a03 	vldr	s12, [r7, #12]
 801397e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801398a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801398e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801399a:	e065      	b.n	8013a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	ee07 3a90 	vmov	s15, r3
 80139a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80139aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80139ae:	4b59      	ldr	r3, [pc, #356]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80139b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139b6:	ee07 3a90 	vmov	s15, r3
 80139ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80139be:	ed97 6a03 	vldr	s12, [r7, #12]
 80139c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80139c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80139ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80139ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80139d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80139de:	e043      	b.n	8013a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80139e0:	697b      	ldr	r3, [r7, #20]
 80139e2:	ee07 3a90 	vmov	s15, r3
 80139e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013b28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80139ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80139f2:	4b48      	ldr	r3, [pc, #288]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80139f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139fa:	ee07 3a90 	vmov	s15, r3
 80139fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8013a06:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013a22:	e021      	b.n	8013a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	ee07 3a90 	vmov	s15, r3
 8013a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a2e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013a36:	4b37      	ldr	r3, [pc, #220]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a3e:	ee07 3a90 	vmov	s15, r3
 8013a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8013a4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013a66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013a68:	4b2a      	ldr	r3, [pc, #168]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a6c:	0a5b      	lsrs	r3, r3, #9
 8013a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013a72:	ee07 3a90 	vmov	s15, r3
 8013a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8013a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013a8e:	ee17 2a90 	vmov	r2, s15
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013a96:	4b1f      	ldr	r3, [pc, #124]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a9a:	0c1b      	lsrs	r3, r3, #16
 8013a9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013aa0:	ee07 3a90 	vmov	s15, r3
 8013aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013aa8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8013ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013abc:	ee17 2a90 	vmov	r2, s15
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8013ac4:	4b13      	ldr	r3, [pc, #76]	@ (8013b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ac8:	0e1b      	lsrs	r3, r3, #24
 8013aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ace:	ee07 3a90 	vmov	s15, r3
 8013ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ad6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8013ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013aea:	ee17 2a90 	vmov	r2, s15
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013af2:	e008      	b.n	8013b06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2200      	movs	r2, #0
 8013af8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	2200      	movs	r2, #0
 8013afe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2200      	movs	r2, #0
 8013b04:	609a      	str	r2, [r3, #8]
}
 8013b06:	bf00      	nop
 8013b08:	3724      	adds	r7, #36	@ 0x24
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b10:	4770      	bx	lr
 8013b12:	bf00      	nop
 8013b14:	58024400 	.word	0x58024400
 8013b18:	03d09000 	.word	0x03d09000
 8013b1c:	46000000 	.word	0x46000000
 8013b20:	4c742400 	.word	0x4c742400
 8013b24:	4a742400 	.word	0x4a742400
 8013b28:	4af42400 	.word	0x4af42400

08013b2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	b089      	sub	sp, #36	@ 0x24
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013b34:	4ba1      	ldr	r3, [pc, #644]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b38:	f003 0303 	and.w	r3, r3, #3
 8013b3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8013b3e:	4b9f      	ldr	r3, [pc, #636]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b42:	0d1b      	lsrs	r3, r3, #20
 8013b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013b48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013b4a:	4b9c      	ldr	r3, [pc, #624]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b4e:	0a1b      	lsrs	r3, r3, #8
 8013b50:	f003 0301 	and.w	r3, r3, #1
 8013b54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8013b56:	4b99      	ldr	r3, [pc, #612]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b5a:	08db      	lsrs	r3, r3, #3
 8013b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b60:	693a      	ldr	r2, [r7, #16]
 8013b62:	fb02 f303 	mul.w	r3, r2, r3
 8013b66:	ee07 3a90 	vmov	s15, r3
 8013b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	f000 8111 	beq.w	8013d9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8013b7a:	69bb      	ldr	r3, [r7, #24]
 8013b7c:	2b02      	cmp	r3, #2
 8013b7e:	f000 8083 	beq.w	8013c88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013b82:	69bb      	ldr	r3, [r7, #24]
 8013b84:	2b02      	cmp	r3, #2
 8013b86:	f200 80a1 	bhi.w	8013ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013b8a:	69bb      	ldr	r3, [r7, #24]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d003      	beq.n	8013b98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013b90:	69bb      	ldr	r3, [r7, #24]
 8013b92:	2b01      	cmp	r3, #1
 8013b94:	d056      	beq.n	8013c44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013b96:	e099      	b.n	8013ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013b98:	4b88      	ldr	r3, [pc, #544]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f003 0320 	and.w	r3, r3, #32
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d02d      	beq.n	8013c00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013ba4:	4b85      	ldr	r3, [pc, #532]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	08db      	lsrs	r3, r3, #3
 8013baa:	f003 0303 	and.w	r3, r3, #3
 8013bae:	4a84      	ldr	r2, [pc, #528]	@ (8013dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8013bb4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013bb6:	68bb      	ldr	r3, [r7, #8]
 8013bb8:	ee07 3a90 	vmov	s15, r3
 8013bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	ee07 3a90 	vmov	s15, r3
 8013bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013bce:	4b7b      	ldr	r3, [pc, #492]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bd6:	ee07 3a90 	vmov	s15, r3
 8013bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8013be2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013bfe:	e087      	b.n	8013d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	ee07 3a90 	vmov	s15, r3
 8013c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c12:	4b6a      	ldr	r3, [pc, #424]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c1a:	ee07 3a90 	vmov	s15, r3
 8013c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013c42:	e065      	b.n	8013d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	ee07 3a90 	vmov	s15, r3
 8013c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013dcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c56:	4b59      	ldr	r3, [pc, #356]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c5e:	ee07 3a90 	vmov	s15, r3
 8013c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013c86:	e043      	b.n	8013d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	ee07 3a90 	vmov	s15, r3
 8013c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c9a:	4b48      	ldr	r3, [pc, #288]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ca2:	ee07 3a90 	vmov	s15, r3
 8013ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8013cae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013cca:	e021      	b.n	8013d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	ee07 3a90 	vmov	s15, r3
 8013cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cd6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013dcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013cde:	4b37      	ldr	r3, [pc, #220]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ce6:	ee07 3a90 	vmov	s15, r3
 8013cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8013cf2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013d0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8013d10:	4b2a      	ldr	r3, [pc, #168]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d14:	0a5b      	lsrs	r3, r3, #9
 8013d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d1a:	ee07 3a90 	vmov	s15, r3
 8013d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8013d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d36:	ee17 2a90 	vmov	r2, s15
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8013d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d42:	0c1b      	lsrs	r3, r3, #16
 8013d44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d48:	ee07 3a90 	vmov	s15, r3
 8013d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013d54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8013d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d64:	ee17 2a90 	vmov	r2, s15
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8013d6c:	4b13      	ldr	r3, [pc, #76]	@ (8013dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d70:	0e1b      	lsrs	r3, r3, #24
 8013d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d76:	ee07 3a90 	vmov	s15, r3
 8013d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8013d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d92:	ee17 2a90 	vmov	r2, s15
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8013d9a:	e008      	b.n	8013dae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	2200      	movs	r2, #0
 8013da6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2200      	movs	r2, #0
 8013dac:	609a      	str	r2, [r3, #8]
}
 8013dae:	bf00      	nop
 8013db0:	3724      	adds	r7, #36	@ 0x24
 8013db2:	46bd      	mov	sp, r7
 8013db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db8:	4770      	bx	lr
 8013dba:	bf00      	nop
 8013dbc:	58024400 	.word	0x58024400
 8013dc0:	03d09000 	.word	0x03d09000
 8013dc4:	46000000 	.word	0x46000000
 8013dc8:	4c742400 	.word	0x4c742400
 8013dcc:	4a742400 	.word	0x4a742400
 8013dd0:	4af42400 	.word	0x4af42400

08013dd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b084      	sub	sp, #16
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
 8013ddc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013dde:	2300      	movs	r3, #0
 8013de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013de2:	4b53      	ldr	r3, [pc, #332]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013de6:	f003 0303 	and.w	r3, r3, #3
 8013dea:	2b03      	cmp	r3, #3
 8013dec:	d101      	bne.n	8013df2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8013dee:	2301      	movs	r3, #1
 8013df0:	e099      	b.n	8013f26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8013df2:	4b4f      	ldr	r3, [pc, #316]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	4a4e      	ldr	r2, [pc, #312]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013df8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013dfe:	f7fc ff8f 	bl	8010d20 <HAL_GetTick>
 8013e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013e04:	e008      	b.n	8013e18 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013e06:	f7fc ff8b 	bl	8010d20 <HAL_GetTick>
 8013e0a:	4602      	mov	r2, r0
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	1ad3      	subs	r3, r2, r3
 8013e10:	2b02      	cmp	r3, #2
 8013e12:	d901      	bls.n	8013e18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013e14:	2303      	movs	r3, #3
 8013e16:	e086      	b.n	8013f26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013e18:	4b45      	ldr	r3, [pc, #276]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d1f0      	bne.n	8013e06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8013e24:	4b42      	ldr	r3, [pc, #264]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e28:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	031b      	lsls	r3, r3, #12
 8013e32:	493f      	ldr	r1, [pc, #252]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013e34:	4313      	orrs	r3, r2
 8013e36:	628b      	str	r3, [r1, #40]	@ 0x28
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	685b      	ldr	r3, [r3, #4]
 8013e3c:	3b01      	subs	r3, #1
 8013e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	689b      	ldr	r3, [r3, #8]
 8013e46:	3b01      	subs	r3, #1
 8013e48:	025b      	lsls	r3, r3, #9
 8013e4a:	b29b      	uxth	r3, r3
 8013e4c:	431a      	orrs	r2, r3
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	68db      	ldr	r3, [r3, #12]
 8013e52:	3b01      	subs	r3, #1
 8013e54:	041b      	lsls	r3, r3, #16
 8013e56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013e5a:	431a      	orrs	r2, r3
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	691b      	ldr	r3, [r3, #16]
 8013e60:	3b01      	subs	r3, #1
 8013e62:	061b      	lsls	r3, r3, #24
 8013e64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013e68:	4931      	ldr	r1, [pc, #196]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013e6a:	4313      	orrs	r3, r2
 8013e6c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8013e6e:	4b30      	ldr	r3, [pc, #192]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	695b      	ldr	r3, [r3, #20]
 8013e7a:	492d      	ldr	r1, [pc, #180]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013e7c:	4313      	orrs	r3, r2
 8013e7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8013e80:	4b2b      	ldr	r3, [pc, #172]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e84:	f023 0220 	bic.w	r2, r3, #32
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	699b      	ldr	r3, [r3, #24]
 8013e8c:	4928      	ldr	r1, [pc, #160]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013e8e:	4313      	orrs	r3, r2
 8013e90:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8013e92:	4b27      	ldr	r3, [pc, #156]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e96:	4a26      	ldr	r2, [pc, #152]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013e98:	f023 0310 	bic.w	r3, r3, #16
 8013e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8013e9e:	4b24      	ldr	r3, [pc, #144]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013ea0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013ea2:	4b24      	ldr	r3, [pc, #144]	@ (8013f34 <RCCEx_PLL2_Config+0x160>)
 8013ea4:	4013      	ands	r3, r2
 8013ea6:	687a      	ldr	r2, [r7, #4]
 8013ea8:	69d2      	ldr	r2, [r2, #28]
 8013eaa:	00d2      	lsls	r2, r2, #3
 8013eac:	4920      	ldr	r1, [pc, #128]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013eae:	4313      	orrs	r3, r2
 8013eb0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8013eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013eb8:	f043 0310 	orr.w	r3, r3, #16
 8013ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d106      	bne.n	8013ed2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8013ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ec8:	4a19      	ldr	r2, [pc, #100]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013eca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013ece:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013ed0:	e00f      	b.n	8013ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	2b01      	cmp	r3, #1
 8013ed6:	d106      	bne.n	8013ee6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8013ed8:	4b15      	ldr	r3, [pc, #84]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013edc:	4a14      	ldr	r2, [pc, #80]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013ede:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013ee4:	e005      	b.n	8013ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8013ee6:	4b12      	ldr	r3, [pc, #72]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013eea:	4a11      	ldr	r2, [pc, #68]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013eec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8013ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013ef8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8013efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013efe:	f7fc ff0f 	bl	8010d20 <HAL_GetTick>
 8013f02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013f04:	e008      	b.n	8013f18 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013f06:	f7fc ff0b 	bl	8010d20 <HAL_GetTick>
 8013f0a:	4602      	mov	r2, r0
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	1ad3      	subs	r3, r2, r3
 8013f10:	2b02      	cmp	r3, #2
 8013f12:	d901      	bls.n	8013f18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013f14:	2303      	movs	r3, #3
 8013f16:	e006      	b.n	8013f26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013f18:	4b05      	ldr	r3, [pc, #20]	@ (8013f30 <RCCEx_PLL2_Config+0x15c>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d0f0      	beq.n	8013f06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8013f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3710      	adds	r7, #16
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}
 8013f2e:	bf00      	nop
 8013f30:	58024400 	.word	0x58024400
 8013f34:	ffff0007 	.word	0xffff0007

08013f38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b084      	sub	sp, #16
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013f42:	2300      	movs	r3, #0
 8013f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013f46:	4b53      	ldr	r3, [pc, #332]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f4a:	f003 0303 	and.w	r3, r3, #3
 8013f4e:	2b03      	cmp	r3, #3
 8013f50:	d101      	bne.n	8013f56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8013f52:	2301      	movs	r3, #1
 8013f54:	e099      	b.n	801408a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8013f56:	4b4f      	ldr	r3, [pc, #316]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	4a4e      	ldr	r2, [pc, #312]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013f62:	f7fc fedd 	bl	8010d20 <HAL_GetTick>
 8013f66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013f68:	e008      	b.n	8013f7c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013f6a:	f7fc fed9 	bl	8010d20 <HAL_GetTick>
 8013f6e:	4602      	mov	r2, r0
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	1ad3      	subs	r3, r2, r3
 8013f74:	2b02      	cmp	r3, #2
 8013f76:	d901      	bls.n	8013f7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013f78:	2303      	movs	r3, #3
 8013f7a:	e086      	b.n	801408a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013f7c:	4b45      	ldr	r3, [pc, #276]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d1f0      	bne.n	8013f6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8013f88:	4b42      	ldr	r3, [pc, #264]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f8c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	051b      	lsls	r3, r3, #20
 8013f96:	493f      	ldr	r1, [pc, #252]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013f98:	4313      	orrs	r3, r2
 8013f9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	3b01      	subs	r3, #1
 8013fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	689b      	ldr	r3, [r3, #8]
 8013faa:	3b01      	subs	r3, #1
 8013fac:	025b      	lsls	r3, r3, #9
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	431a      	orrs	r2, r3
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	68db      	ldr	r3, [r3, #12]
 8013fb6:	3b01      	subs	r3, #1
 8013fb8:	041b      	lsls	r3, r3, #16
 8013fba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013fbe:	431a      	orrs	r2, r3
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	691b      	ldr	r3, [r3, #16]
 8013fc4:	3b01      	subs	r3, #1
 8013fc6:	061b      	lsls	r3, r3, #24
 8013fc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013fcc:	4931      	ldr	r1, [pc, #196]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8013fd2:	4b30      	ldr	r3, [pc, #192]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fd6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	695b      	ldr	r3, [r3, #20]
 8013fde:	492d      	ldr	r1, [pc, #180]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013fe0:	4313      	orrs	r3, r2
 8013fe2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8013fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fe8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	699b      	ldr	r3, [r3, #24]
 8013ff0:	4928      	ldr	r1, [pc, #160]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013ff2:	4313      	orrs	r3, r2
 8013ff4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8013ff6:	4b27      	ldr	r3, [pc, #156]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ffa:	4a26      	ldr	r2, [pc, #152]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8013ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014000:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8014002:	4b24      	ldr	r3, [pc, #144]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8014004:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014006:	4b24      	ldr	r3, [pc, #144]	@ (8014098 <RCCEx_PLL3_Config+0x160>)
 8014008:	4013      	ands	r3, r2
 801400a:	687a      	ldr	r2, [r7, #4]
 801400c:	69d2      	ldr	r2, [r2, #28]
 801400e:	00d2      	lsls	r2, r2, #3
 8014010:	4920      	ldr	r1, [pc, #128]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8014012:	4313      	orrs	r3, r2
 8014014:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8014016:	4b1f      	ldr	r3, [pc, #124]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8014018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801401a:	4a1e      	ldr	r2, [pc, #120]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 801401c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014020:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d106      	bne.n	8014036 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014028:	4b1a      	ldr	r3, [pc, #104]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 801402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801402c:	4a19      	ldr	r2, [pc, #100]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 801402e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8014032:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014034:	e00f      	b.n	8014056 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	2b01      	cmp	r3, #1
 801403a:	d106      	bne.n	801404a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801403c:	4b15      	ldr	r3, [pc, #84]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 801403e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014040:	4a14      	ldr	r2, [pc, #80]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8014042:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014046:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014048:	e005      	b.n	8014056 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801404a:	4b12      	ldr	r3, [pc, #72]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 801404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801404e:	4a11      	ldr	r2, [pc, #68]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8014050:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014054:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8014056:	4b0f      	ldr	r3, [pc, #60]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	4a0e      	ldr	r2, [pc, #56]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 801405c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014062:	f7fc fe5d 	bl	8010d20 <HAL_GetTick>
 8014066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014068:	e008      	b.n	801407c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801406a:	f7fc fe59 	bl	8010d20 <HAL_GetTick>
 801406e:	4602      	mov	r2, r0
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	1ad3      	subs	r3, r2, r3
 8014074:	2b02      	cmp	r3, #2
 8014076:	d901      	bls.n	801407c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014078:	2303      	movs	r3, #3
 801407a:	e006      	b.n	801408a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801407c:	4b05      	ldr	r3, [pc, #20]	@ (8014094 <RCCEx_PLL3_Config+0x15c>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014084:	2b00      	cmp	r3, #0
 8014086:	d0f0      	beq.n	801406a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014088:	7bfb      	ldrb	r3, [r7, #15]
}
 801408a:	4618      	mov	r0, r3
 801408c:	3710      	adds	r7, #16
 801408e:	46bd      	mov	sp, r7
 8014090:	bd80      	pop	{r7, pc}
 8014092:	bf00      	nop
 8014094:	58024400 	.word	0x58024400
 8014098:	ffff0007 	.word	0xffff0007

0801409c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b082      	sub	sp, #8
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d101      	bne.n	80140ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80140aa:	2301      	movs	r3, #1
 80140ac:	e042      	b.n	8014134 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d106      	bne.n	80140c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2200      	movs	r2, #0
 80140bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	f7fc fd11 	bl	8010ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2224      	movs	r2, #36	@ 0x24
 80140ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	681a      	ldr	r2, [r3, #0]
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	f022 0201 	bic.w	r2, r2, #1
 80140dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d002      	beq.n	80140ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f000 fe1e 	bl	8014d28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f000 f8b3 	bl	8014258 <UART_SetConfig>
 80140f2:	4603      	mov	r3, r0
 80140f4:	2b01      	cmp	r3, #1
 80140f6:	d101      	bne.n	80140fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80140f8:	2301      	movs	r3, #1
 80140fa:	e01b      	b.n	8014134 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	685a      	ldr	r2, [r3, #4]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801410a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	689a      	ldr	r2, [r3, #8]
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801411a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	681a      	ldr	r2, [r3, #0]
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	f042 0201 	orr.w	r2, r2, #1
 801412a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f000 fe9d 	bl	8014e6c <UART_CheckIdleState>
 8014132:	4603      	mov	r3, r0
}
 8014134:	4618      	mov	r0, r3
 8014136:	3708      	adds	r7, #8
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}

0801413c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b08a      	sub	sp, #40	@ 0x28
 8014140:	af02      	add	r7, sp, #8
 8014142:	60f8      	str	r0, [r7, #12]
 8014144:	60b9      	str	r1, [r7, #8]
 8014146:	603b      	str	r3, [r7, #0]
 8014148:	4613      	mov	r3, r2
 801414a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014152:	2b20      	cmp	r3, #32
 8014154:	d17b      	bne.n	801424e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d002      	beq.n	8014162 <HAL_UART_Transmit+0x26>
 801415c:	88fb      	ldrh	r3, [r7, #6]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d101      	bne.n	8014166 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8014162:	2301      	movs	r3, #1
 8014164:	e074      	b.n	8014250 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	2200      	movs	r2, #0
 801416a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2221      	movs	r2, #33	@ 0x21
 8014172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014176:	f7fc fdd3 	bl	8010d20 <HAL_GetTick>
 801417a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	88fa      	ldrh	r2, [r7, #6]
 8014180:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	88fa      	ldrh	r2, [r7, #6]
 8014188:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	689b      	ldr	r3, [r3, #8]
 8014190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014194:	d108      	bne.n	80141a8 <HAL_UART_Transmit+0x6c>
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	691b      	ldr	r3, [r3, #16]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d104      	bne.n	80141a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801419e:	2300      	movs	r3, #0
 80141a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	61bb      	str	r3, [r7, #24]
 80141a6:	e003      	b.n	80141b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80141ac:	2300      	movs	r3, #0
 80141ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80141b0:	e030      	b.n	8014214 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	9300      	str	r3, [sp, #0]
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	2200      	movs	r2, #0
 80141ba:	2180      	movs	r1, #128	@ 0x80
 80141bc:	68f8      	ldr	r0, [r7, #12]
 80141be:	f000 feff 	bl	8014fc0 <UART_WaitOnFlagUntilTimeout>
 80141c2:	4603      	mov	r3, r0
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d005      	beq.n	80141d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	2220      	movs	r2, #32
 80141cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80141d0:	2303      	movs	r3, #3
 80141d2:	e03d      	b.n	8014250 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80141d4:	69fb      	ldr	r3, [r7, #28]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d10b      	bne.n	80141f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80141da:	69bb      	ldr	r3, [r7, #24]
 80141dc:	881b      	ldrh	r3, [r3, #0]
 80141de:	461a      	mov	r2, r3
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80141e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80141ea:	69bb      	ldr	r3, [r7, #24]
 80141ec:	3302      	adds	r3, #2
 80141ee:	61bb      	str	r3, [r7, #24]
 80141f0:	e007      	b.n	8014202 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80141f2:	69fb      	ldr	r3, [r7, #28]
 80141f4:	781a      	ldrb	r2, [r3, #0]
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80141fc:	69fb      	ldr	r3, [r7, #28]
 80141fe:	3301      	adds	r3, #1
 8014200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8014208:	b29b      	uxth	r3, r3
 801420a:	3b01      	subs	r3, #1
 801420c:	b29a      	uxth	r2, r3
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801421a:	b29b      	uxth	r3, r3
 801421c:	2b00      	cmp	r3, #0
 801421e:	d1c8      	bne.n	80141b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	9300      	str	r3, [sp, #0]
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	2200      	movs	r2, #0
 8014228:	2140      	movs	r1, #64	@ 0x40
 801422a:	68f8      	ldr	r0, [r7, #12]
 801422c:	f000 fec8 	bl	8014fc0 <UART_WaitOnFlagUntilTimeout>
 8014230:	4603      	mov	r3, r0
 8014232:	2b00      	cmp	r3, #0
 8014234:	d005      	beq.n	8014242 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	2220      	movs	r2, #32
 801423a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801423e:	2303      	movs	r3, #3
 8014240:	e006      	b.n	8014250 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	2220      	movs	r2, #32
 8014246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801424a:	2300      	movs	r3, #0
 801424c:	e000      	b.n	8014250 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801424e:	2302      	movs	r3, #2
  }
}
 8014250:	4618      	mov	r0, r3
 8014252:	3720      	adds	r7, #32
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801425c:	b092      	sub	sp, #72	@ 0x48
 801425e:	af00      	add	r7, sp, #0
 8014260:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014262:	2300      	movs	r3, #0
 8014264:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	689a      	ldr	r2, [r3, #8]
 801426c:	697b      	ldr	r3, [r7, #20]
 801426e:	691b      	ldr	r3, [r3, #16]
 8014270:	431a      	orrs	r2, r3
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	695b      	ldr	r3, [r3, #20]
 8014276:	431a      	orrs	r2, r3
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	69db      	ldr	r3, [r3, #28]
 801427c:	4313      	orrs	r3, r2
 801427e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	681a      	ldr	r2, [r3, #0]
 8014286:	4bbe      	ldr	r3, [pc, #760]	@ (8014580 <UART_SetConfig+0x328>)
 8014288:	4013      	ands	r3, r2
 801428a:	697a      	ldr	r2, [r7, #20]
 801428c:	6812      	ldr	r2, [r2, #0]
 801428e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014290:	430b      	orrs	r3, r1
 8014292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	685b      	ldr	r3, [r3, #4]
 801429a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801429e:	697b      	ldr	r3, [r7, #20]
 80142a0:	68da      	ldr	r2, [r3, #12]
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	430a      	orrs	r2, r1
 80142a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	699b      	ldr	r3, [r3, #24]
 80142ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80142b0:	697b      	ldr	r3, [r7, #20]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	4ab3      	ldr	r2, [pc, #716]	@ (8014584 <UART_SetConfig+0x32c>)
 80142b6:	4293      	cmp	r3, r2
 80142b8:	d004      	beq.n	80142c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	6a1b      	ldr	r3, [r3, #32]
 80142be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80142c0:	4313      	orrs	r3, r2
 80142c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	689a      	ldr	r2, [r3, #8]
 80142ca:	4baf      	ldr	r3, [pc, #700]	@ (8014588 <UART_SetConfig+0x330>)
 80142cc:	4013      	ands	r3, r2
 80142ce:	697a      	ldr	r2, [r7, #20]
 80142d0:	6812      	ldr	r2, [r2, #0]
 80142d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80142d4:	430b      	orrs	r3, r1
 80142d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142de:	f023 010f 	bic.w	r1, r3, #15
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	430a      	orrs	r2, r1
 80142ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80142ee:	697b      	ldr	r3, [r7, #20]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	4aa6      	ldr	r2, [pc, #664]	@ (801458c <UART_SetConfig+0x334>)
 80142f4:	4293      	cmp	r3, r2
 80142f6:	d177      	bne.n	80143e8 <UART_SetConfig+0x190>
 80142f8:	4ba5      	ldr	r3, [pc, #660]	@ (8014590 <UART_SetConfig+0x338>)
 80142fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014300:	2b28      	cmp	r3, #40	@ 0x28
 8014302:	d86d      	bhi.n	80143e0 <UART_SetConfig+0x188>
 8014304:	a201      	add	r2, pc, #4	@ (adr r2, 801430c <UART_SetConfig+0xb4>)
 8014306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801430a:	bf00      	nop
 801430c:	080143b1 	.word	0x080143b1
 8014310:	080143e1 	.word	0x080143e1
 8014314:	080143e1 	.word	0x080143e1
 8014318:	080143e1 	.word	0x080143e1
 801431c:	080143e1 	.word	0x080143e1
 8014320:	080143e1 	.word	0x080143e1
 8014324:	080143e1 	.word	0x080143e1
 8014328:	080143e1 	.word	0x080143e1
 801432c:	080143b9 	.word	0x080143b9
 8014330:	080143e1 	.word	0x080143e1
 8014334:	080143e1 	.word	0x080143e1
 8014338:	080143e1 	.word	0x080143e1
 801433c:	080143e1 	.word	0x080143e1
 8014340:	080143e1 	.word	0x080143e1
 8014344:	080143e1 	.word	0x080143e1
 8014348:	080143e1 	.word	0x080143e1
 801434c:	080143c1 	.word	0x080143c1
 8014350:	080143e1 	.word	0x080143e1
 8014354:	080143e1 	.word	0x080143e1
 8014358:	080143e1 	.word	0x080143e1
 801435c:	080143e1 	.word	0x080143e1
 8014360:	080143e1 	.word	0x080143e1
 8014364:	080143e1 	.word	0x080143e1
 8014368:	080143e1 	.word	0x080143e1
 801436c:	080143c9 	.word	0x080143c9
 8014370:	080143e1 	.word	0x080143e1
 8014374:	080143e1 	.word	0x080143e1
 8014378:	080143e1 	.word	0x080143e1
 801437c:	080143e1 	.word	0x080143e1
 8014380:	080143e1 	.word	0x080143e1
 8014384:	080143e1 	.word	0x080143e1
 8014388:	080143e1 	.word	0x080143e1
 801438c:	080143d1 	.word	0x080143d1
 8014390:	080143e1 	.word	0x080143e1
 8014394:	080143e1 	.word	0x080143e1
 8014398:	080143e1 	.word	0x080143e1
 801439c:	080143e1 	.word	0x080143e1
 80143a0:	080143e1 	.word	0x080143e1
 80143a4:	080143e1 	.word	0x080143e1
 80143a8:	080143e1 	.word	0x080143e1
 80143ac:	080143d9 	.word	0x080143d9
 80143b0:	2301      	movs	r3, #1
 80143b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143b6:	e222      	b.n	80147fe <UART_SetConfig+0x5a6>
 80143b8:	2304      	movs	r3, #4
 80143ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143be:	e21e      	b.n	80147fe <UART_SetConfig+0x5a6>
 80143c0:	2308      	movs	r3, #8
 80143c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143c6:	e21a      	b.n	80147fe <UART_SetConfig+0x5a6>
 80143c8:	2310      	movs	r3, #16
 80143ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143ce:	e216      	b.n	80147fe <UART_SetConfig+0x5a6>
 80143d0:	2320      	movs	r3, #32
 80143d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143d6:	e212      	b.n	80147fe <UART_SetConfig+0x5a6>
 80143d8:	2340      	movs	r3, #64	@ 0x40
 80143da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143de:	e20e      	b.n	80147fe <UART_SetConfig+0x5a6>
 80143e0:	2380      	movs	r3, #128	@ 0x80
 80143e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80143e6:	e20a      	b.n	80147fe <UART_SetConfig+0x5a6>
 80143e8:	697b      	ldr	r3, [r7, #20]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	4a69      	ldr	r2, [pc, #420]	@ (8014594 <UART_SetConfig+0x33c>)
 80143ee:	4293      	cmp	r3, r2
 80143f0:	d130      	bne.n	8014454 <UART_SetConfig+0x1fc>
 80143f2:	4b67      	ldr	r3, [pc, #412]	@ (8014590 <UART_SetConfig+0x338>)
 80143f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80143f6:	f003 0307 	and.w	r3, r3, #7
 80143fa:	2b05      	cmp	r3, #5
 80143fc:	d826      	bhi.n	801444c <UART_SetConfig+0x1f4>
 80143fe:	a201      	add	r2, pc, #4	@ (adr r2, 8014404 <UART_SetConfig+0x1ac>)
 8014400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014404:	0801441d 	.word	0x0801441d
 8014408:	08014425 	.word	0x08014425
 801440c:	0801442d 	.word	0x0801442d
 8014410:	08014435 	.word	0x08014435
 8014414:	0801443d 	.word	0x0801443d
 8014418:	08014445 	.word	0x08014445
 801441c:	2300      	movs	r3, #0
 801441e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014422:	e1ec      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014424:	2304      	movs	r3, #4
 8014426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801442a:	e1e8      	b.n	80147fe <UART_SetConfig+0x5a6>
 801442c:	2308      	movs	r3, #8
 801442e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014432:	e1e4      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014434:	2310      	movs	r3, #16
 8014436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801443a:	e1e0      	b.n	80147fe <UART_SetConfig+0x5a6>
 801443c:	2320      	movs	r3, #32
 801443e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014442:	e1dc      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014444:	2340      	movs	r3, #64	@ 0x40
 8014446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801444a:	e1d8      	b.n	80147fe <UART_SetConfig+0x5a6>
 801444c:	2380      	movs	r3, #128	@ 0x80
 801444e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014452:	e1d4      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	4a4f      	ldr	r2, [pc, #316]	@ (8014598 <UART_SetConfig+0x340>)
 801445a:	4293      	cmp	r3, r2
 801445c:	d130      	bne.n	80144c0 <UART_SetConfig+0x268>
 801445e:	4b4c      	ldr	r3, [pc, #304]	@ (8014590 <UART_SetConfig+0x338>)
 8014460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014462:	f003 0307 	and.w	r3, r3, #7
 8014466:	2b05      	cmp	r3, #5
 8014468:	d826      	bhi.n	80144b8 <UART_SetConfig+0x260>
 801446a:	a201      	add	r2, pc, #4	@ (adr r2, 8014470 <UART_SetConfig+0x218>)
 801446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014470:	08014489 	.word	0x08014489
 8014474:	08014491 	.word	0x08014491
 8014478:	08014499 	.word	0x08014499
 801447c:	080144a1 	.word	0x080144a1
 8014480:	080144a9 	.word	0x080144a9
 8014484:	080144b1 	.word	0x080144b1
 8014488:	2300      	movs	r3, #0
 801448a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801448e:	e1b6      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014490:	2304      	movs	r3, #4
 8014492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014496:	e1b2      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014498:	2308      	movs	r3, #8
 801449a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801449e:	e1ae      	b.n	80147fe <UART_SetConfig+0x5a6>
 80144a0:	2310      	movs	r3, #16
 80144a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144a6:	e1aa      	b.n	80147fe <UART_SetConfig+0x5a6>
 80144a8:	2320      	movs	r3, #32
 80144aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144ae:	e1a6      	b.n	80147fe <UART_SetConfig+0x5a6>
 80144b0:	2340      	movs	r3, #64	@ 0x40
 80144b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144b6:	e1a2      	b.n	80147fe <UART_SetConfig+0x5a6>
 80144b8:	2380      	movs	r3, #128	@ 0x80
 80144ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144be:	e19e      	b.n	80147fe <UART_SetConfig+0x5a6>
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	4a35      	ldr	r2, [pc, #212]	@ (801459c <UART_SetConfig+0x344>)
 80144c6:	4293      	cmp	r3, r2
 80144c8:	d130      	bne.n	801452c <UART_SetConfig+0x2d4>
 80144ca:	4b31      	ldr	r3, [pc, #196]	@ (8014590 <UART_SetConfig+0x338>)
 80144cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80144ce:	f003 0307 	and.w	r3, r3, #7
 80144d2:	2b05      	cmp	r3, #5
 80144d4:	d826      	bhi.n	8014524 <UART_SetConfig+0x2cc>
 80144d6:	a201      	add	r2, pc, #4	@ (adr r2, 80144dc <UART_SetConfig+0x284>)
 80144d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144dc:	080144f5 	.word	0x080144f5
 80144e0:	080144fd 	.word	0x080144fd
 80144e4:	08014505 	.word	0x08014505
 80144e8:	0801450d 	.word	0x0801450d
 80144ec:	08014515 	.word	0x08014515
 80144f0:	0801451d 	.word	0x0801451d
 80144f4:	2300      	movs	r3, #0
 80144f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144fa:	e180      	b.n	80147fe <UART_SetConfig+0x5a6>
 80144fc:	2304      	movs	r3, #4
 80144fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014502:	e17c      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014504:	2308      	movs	r3, #8
 8014506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801450a:	e178      	b.n	80147fe <UART_SetConfig+0x5a6>
 801450c:	2310      	movs	r3, #16
 801450e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014512:	e174      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014514:	2320      	movs	r3, #32
 8014516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801451a:	e170      	b.n	80147fe <UART_SetConfig+0x5a6>
 801451c:	2340      	movs	r3, #64	@ 0x40
 801451e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014522:	e16c      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014524:	2380      	movs	r3, #128	@ 0x80
 8014526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801452a:	e168      	b.n	80147fe <UART_SetConfig+0x5a6>
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	4a1b      	ldr	r2, [pc, #108]	@ (80145a0 <UART_SetConfig+0x348>)
 8014532:	4293      	cmp	r3, r2
 8014534:	d142      	bne.n	80145bc <UART_SetConfig+0x364>
 8014536:	4b16      	ldr	r3, [pc, #88]	@ (8014590 <UART_SetConfig+0x338>)
 8014538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801453a:	f003 0307 	and.w	r3, r3, #7
 801453e:	2b05      	cmp	r3, #5
 8014540:	d838      	bhi.n	80145b4 <UART_SetConfig+0x35c>
 8014542:	a201      	add	r2, pc, #4	@ (adr r2, 8014548 <UART_SetConfig+0x2f0>)
 8014544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014548:	08014561 	.word	0x08014561
 801454c:	08014569 	.word	0x08014569
 8014550:	08014571 	.word	0x08014571
 8014554:	08014579 	.word	0x08014579
 8014558:	080145a5 	.word	0x080145a5
 801455c:	080145ad 	.word	0x080145ad
 8014560:	2300      	movs	r3, #0
 8014562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014566:	e14a      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014568:	2304      	movs	r3, #4
 801456a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801456e:	e146      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014570:	2308      	movs	r3, #8
 8014572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014576:	e142      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014578:	2310      	movs	r3, #16
 801457a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801457e:	e13e      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014580:	cfff69f3 	.word	0xcfff69f3
 8014584:	58000c00 	.word	0x58000c00
 8014588:	11fff4ff 	.word	0x11fff4ff
 801458c:	40011000 	.word	0x40011000
 8014590:	58024400 	.word	0x58024400
 8014594:	40004400 	.word	0x40004400
 8014598:	40004800 	.word	0x40004800
 801459c:	40004c00 	.word	0x40004c00
 80145a0:	40005000 	.word	0x40005000
 80145a4:	2320      	movs	r3, #32
 80145a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145aa:	e128      	b.n	80147fe <UART_SetConfig+0x5a6>
 80145ac:	2340      	movs	r3, #64	@ 0x40
 80145ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145b2:	e124      	b.n	80147fe <UART_SetConfig+0x5a6>
 80145b4:	2380      	movs	r3, #128	@ 0x80
 80145b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145ba:	e120      	b.n	80147fe <UART_SetConfig+0x5a6>
 80145bc:	697b      	ldr	r3, [r7, #20]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	4acb      	ldr	r2, [pc, #812]	@ (80148f0 <UART_SetConfig+0x698>)
 80145c2:	4293      	cmp	r3, r2
 80145c4:	d176      	bne.n	80146b4 <UART_SetConfig+0x45c>
 80145c6:	4bcb      	ldr	r3, [pc, #812]	@ (80148f4 <UART_SetConfig+0x69c>)
 80145c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80145ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80145ce:	2b28      	cmp	r3, #40	@ 0x28
 80145d0:	d86c      	bhi.n	80146ac <UART_SetConfig+0x454>
 80145d2:	a201      	add	r2, pc, #4	@ (adr r2, 80145d8 <UART_SetConfig+0x380>)
 80145d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145d8:	0801467d 	.word	0x0801467d
 80145dc:	080146ad 	.word	0x080146ad
 80145e0:	080146ad 	.word	0x080146ad
 80145e4:	080146ad 	.word	0x080146ad
 80145e8:	080146ad 	.word	0x080146ad
 80145ec:	080146ad 	.word	0x080146ad
 80145f0:	080146ad 	.word	0x080146ad
 80145f4:	080146ad 	.word	0x080146ad
 80145f8:	08014685 	.word	0x08014685
 80145fc:	080146ad 	.word	0x080146ad
 8014600:	080146ad 	.word	0x080146ad
 8014604:	080146ad 	.word	0x080146ad
 8014608:	080146ad 	.word	0x080146ad
 801460c:	080146ad 	.word	0x080146ad
 8014610:	080146ad 	.word	0x080146ad
 8014614:	080146ad 	.word	0x080146ad
 8014618:	0801468d 	.word	0x0801468d
 801461c:	080146ad 	.word	0x080146ad
 8014620:	080146ad 	.word	0x080146ad
 8014624:	080146ad 	.word	0x080146ad
 8014628:	080146ad 	.word	0x080146ad
 801462c:	080146ad 	.word	0x080146ad
 8014630:	080146ad 	.word	0x080146ad
 8014634:	080146ad 	.word	0x080146ad
 8014638:	08014695 	.word	0x08014695
 801463c:	080146ad 	.word	0x080146ad
 8014640:	080146ad 	.word	0x080146ad
 8014644:	080146ad 	.word	0x080146ad
 8014648:	080146ad 	.word	0x080146ad
 801464c:	080146ad 	.word	0x080146ad
 8014650:	080146ad 	.word	0x080146ad
 8014654:	080146ad 	.word	0x080146ad
 8014658:	0801469d 	.word	0x0801469d
 801465c:	080146ad 	.word	0x080146ad
 8014660:	080146ad 	.word	0x080146ad
 8014664:	080146ad 	.word	0x080146ad
 8014668:	080146ad 	.word	0x080146ad
 801466c:	080146ad 	.word	0x080146ad
 8014670:	080146ad 	.word	0x080146ad
 8014674:	080146ad 	.word	0x080146ad
 8014678:	080146a5 	.word	0x080146a5
 801467c:	2301      	movs	r3, #1
 801467e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014682:	e0bc      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014684:	2304      	movs	r3, #4
 8014686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801468a:	e0b8      	b.n	80147fe <UART_SetConfig+0x5a6>
 801468c:	2308      	movs	r3, #8
 801468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014692:	e0b4      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014694:	2310      	movs	r3, #16
 8014696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801469a:	e0b0      	b.n	80147fe <UART_SetConfig+0x5a6>
 801469c:	2320      	movs	r3, #32
 801469e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146a2:	e0ac      	b.n	80147fe <UART_SetConfig+0x5a6>
 80146a4:	2340      	movs	r3, #64	@ 0x40
 80146a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146aa:	e0a8      	b.n	80147fe <UART_SetConfig+0x5a6>
 80146ac:	2380      	movs	r3, #128	@ 0x80
 80146ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146b2:	e0a4      	b.n	80147fe <UART_SetConfig+0x5a6>
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	4a8f      	ldr	r2, [pc, #572]	@ (80148f8 <UART_SetConfig+0x6a0>)
 80146ba:	4293      	cmp	r3, r2
 80146bc:	d130      	bne.n	8014720 <UART_SetConfig+0x4c8>
 80146be:	4b8d      	ldr	r3, [pc, #564]	@ (80148f4 <UART_SetConfig+0x69c>)
 80146c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80146c2:	f003 0307 	and.w	r3, r3, #7
 80146c6:	2b05      	cmp	r3, #5
 80146c8:	d826      	bhi.n	8014718 <UART_SetConfig+0x4c0>
 80146ca:	a201      	add	r2, pc, #4	@ (adr r2, 80146d0 <UART_SetConfig+0x478>)
 80146cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146d0:	080146e9 	.word	0x080146e9
 80146d4:	080146f1 	.word	0x080146f1
 80146d8:	080146f9 	.word	0x080146f9
 80146dc:	08014701 	.word	0x08014701
 80146e0:	08014709 	.word	0x08014709
 80146e4:	08014711 	.word	0x08014711
 80146e8:	2300      	movs	r3, #0
 80146ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146ee:	e086      	b.n	80147fe <UART_SetConfig+0x5a6>
 80146f0:	2304      	movs	r3, #4
 80146f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146f6:	e082      	b.n	80147fe <UART_SetConfig+0x5a6>
 80146f8:	2308      	movs	r3, #8
 80146fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146fe:	e07e      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014700:	2310      	movs	r3, #16
 8014702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014706:	e07a      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014708:	2320      	movs	r3, #32
 801470a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801470e:	e076      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014710:	2340      	movs	r3, #64	@ 0x40
 8014712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014716:	e072      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014718:	2380      	movs	r3, #128	@ 0x80
 801471a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801471e:	e06e      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014720:	697b      	ldr	r3, [r7, #20]
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	4a75      	ldr	r2, [pc, #468]	@ (80148fc <UART_SetConfig+0x6a4>)
 8014726:	4293      	cmp	r3, r2
 8014728:	d130      	bne.n	801478c <UART_SetConfig+0x534>
 801472a:	4b72      	ldr	r3, [pc, #456]	@ (80148f4 <UART_SetConfig+0x69c>)
 801472c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801472e:	f003 0307 	and.w	r3, r3, #7
 8014732:	2b05      	cmp	r3, #5
 8014734:	d826      	bhi.n	8014784 <UART_SetConfig+0x52c>
 8014736:	a201      	add	r2, pc, #4	@ (adr r2, 801473c <UART_SetConfig+0x4e4>)
 8014738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801473c:	08014755 	.word	0x08014755
 8014740:	0801475d 	.word	0x0801475d
 8014744:	08014765 	.word	0x08014765
 8014748:	0801476d 	.word	0x0801476d
 801474c:	08014775 	.word	0x08014775
 8014750:	0801477d 	.word	0x0801477d
 8014754:	2300      	movs	r3, #0
 8014756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801475a:	e050      	b.n	80147fe <UART_SetConfig+0x5a6>
 801475c:	2304      	movs	r3, #4
 801475e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014762:	e04c      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014764:	2308      	movs	r3, #8
 8014766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801476a:	e048      	b.n	80147fe <UART_SetConfig+0x5a6>
 801476c:	2310      	movs	r3, #16
 801476e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014772:	e044      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014774:	2320      	movs	r3, #32
 8014776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801477a:	e040      	b.n	80147fe <UART_SetConfig+0x5a6>
 801477c:	2340      	movs	r3, #64	@ 0x40
 801477e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014782:	e03c      	b.n	80147fe <UART_SetConfig+0x5a6>
 8014784:	2380      	movs	r3, #128	@ 0x80
 8014786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801478a:	e038      	b.n	80147fe <UART_SetConfig+0x5a6>
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	4a5b      	ldr	r2, [pc, #364]	@ (8014900 <UART_SetConfig+0x6a8>)
 8014792:	4293      	cmp	r3, r2
 8014794:	d130      	bne.n	80147f8 <UART_SetConfig+0x5a0>
 8014796:	4b57      	ldr	r3, [pc, #348]	@ (80148f4 <UART_SetConfig+0x69c>)
 8014798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801479a:	f003 0307 	and.w	r3, r3, #7
 801479e:	2b05      	cmp	r3, #5
 80147a0:	d826      	bhi.n	80147f0 <UART_SetConfig+0x598>
 80147a2:	a201      	add	r2, pc, #4	@ (adr r2, 80147a8 <UART_SetConfig+0x550>)
 80147a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147a8:	080147c1 	.word	0x080147c1
 80147ac:	080147c9 	.word	0x080147c9
 80147b0:	080147d1 	.word	0x080147d1
 80147b4:	080147d9 	.word	0x080147d9
 80147b8:	080147e1 	.word	0x080147e1
 80147bc:	080147e9 	.word	0x080147e9
 80147c0:	2302      	movs	r3, #2
 80147c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147c6:	e01a      	b.n	80147fe <UART_SetConfig+0x5a6>
 80147c8:	2304      	movs	r3, #4
 80147ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147ce:	e016      	b.n	80147fe <UART_SetConfig+0x5a6>
 80147d0:	2308      	movs	r3, #8
 80147d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147d6:	e012      	b.n	80147fe <UART_SetConfig+0x5a6>
 80147d8:	2310      	movs	r3, #16
 80147da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147de:	e00e      	b.n	80147fe <UART_SetConfig+0x5a6>
 80147e0:	2320      	movs	r3, #32
 80147e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147e6:	e00a      	b.n	80147fe <UART_SetConfig+0x5a6>
 80147e8:	2340      	movs	r3, #64	@ 0x40
 80147ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147ee:	e006      	b.n	80147fe <UART_SetConfig+0x5a6>
 80147f0:	2380      	movs	r3, #128	@ 0x80
 80147f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147f6:	e002      	b.n	80147fe <UART_SetConfig+0x5a6>
 80147f8:	2380      	movs	r3, #128	@ 0x80
 80147fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	4a3f      	ldr	r2, [pc, #252]	@ (8014900 <UART_SetConfig+0x6a8>)
 8014804:	4293      	cmp	r3, r2
 8014806:	f040 80f8 	bne.w	80149fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801480a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801480e:	2b20      	cmp	r3, #32
 8014810:	dc46      	bgt.n	80148a0 <UART_SetConfig+0x648>
 8014812:	2b02      	cmp	r3, #2
 8014814:	f2c0 8082 	blt.w	801491c <UART_SetConfig+0x6c4>
 8014818:	3b02      	subs	r3, #2
 801481a:	2b1e      	cmp	r3, #30
 801481c:	d87e      	bhi.n	801491c <UART_SetConfig+0x6c4>
 801481e:	a201      	add	r2, pc, #4	@ (adr r2, 8014824 <UART_SetConfig+0x5cc>)
 8014820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014824:	080148a7 	.word	0x080148a7
 8014828:	0801491d 	.word	0x0801491d
 801482c:	080148af 	.word	0x080148af
 8014830:	0801491d 	.word	0x0801491d
 8014834:	0801491d 	.word	0x0801491d
 8014838:	0801491d 	.word	0x0801491d
 801483c:	080148bf 	.word	0x080148bf
 8014840:	0801491d 	.word	0x0801491d
 8014844:	0801491d 	.word	0x0801491d
 8014848:	0801491d 	.word	0x0801491d
 801484c:	0801491d 	.word	0x0801491d
 8014850:	0801491d 	.word	0x0801491d
 8014854:	0801491d 	.word	0x0801491d
 8014858:	0801491d 	.word	0x0801491d
 801485c:	080148cf 	.word	0x080148cf
 8014860:	0801491d 	.word	0x0801491d
 8014864:	0801491d 	.word	0x0801491d
 8014868:	0801491d 	.word	0x0801491d
 801486c:	0801491d 	.word	0x0801491d
 8014870:	0801491d 	.word	0x0801491d
 8014874:	0801491d 	.word	0x0801491d
 8014878:	0801491d 	.word	0x0801491d
 801487c:	0801491d 	.word	0x0801491d
 8014880:	0801491d 	.word	0x0801491d
 8014884:	0801491d 	.word	0x0801491d
 8014888:	0801491d 	.word	0x0801491d
 801488c:	0801491d 	.word	0x0801491d
 8014890:	0801491d 	.word	0x0801491d
 8014894:	0801491d 	.word	0x0801491d
 8014898:	0801491d 	.word	0x0801491d
 801489c:	0801490f 	.word	0x0801490f
 80148a0:	2b40      	cmp	r3, #64	@ 0x40
 80148a2:	d037      	beq.n	8014914 <UART_SetConfig+0x6bc>
 80148a4:	e03a      	b.n	801491c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80148a6:	f7fe ffd7 	bl	8013858 <HAL_RCCEx_GetD3PCLK1Freq>
 80148aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80148ac:	e03c      	b.n	8014928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80148ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fe ffe6 	bl	8013884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80148b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80148bc:	e034      	b.n	8014928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80148be:	f107 0318 	add.w	r3, r7, #24
 80148c2:	4618      	mov	r0, r3
 80148c4:	f7ff f932 	bl	8013b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80148c8:	69fb      	ldr	r3, [r7, #28]
 80148ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80148cc:	e02c      	b.n	8014928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80148ce:	4b09      	ldr	r3, [pc, #36]	@ (80148f4 <UART_SetConfig+0x69c>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	f003 0320 	and.w	r3, r3, #32
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d016      	beq.n	8014908 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80148da:	4b06      	ldr	r3, [pc, #24]	@ (80148f4 <UART_SetConfig+0x69c>)
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	08db      	lsrs	r3, r3, #3
 80148e0:	f003 0303 	and.w	r3, r3, #3
 80148e4:	4a07      	ldr	r2, [pc, #28]	@ (8014904 <UART_SetConfig+0x6ac>)
 80148e6:	fa22 f303 	lsr.w	r3, r2, r3
 80148ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80148ec:	e01c      	b.n	8014928 <UART_SetConfig+0x6d0>
 80148ee:	bf00      	nop
 80148f0:	40011400 	.word	0x40011400
 80148f4:	58024400 	.word	0x58024400
 80148f8:	40007800 	.word	0x40007800
 80148fc:	40007c00 	.word	0x40007c00
 8014900:	58000c00 	.word	0x58000c00
 8014904:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8014908:	4b9d      	ldr	r3, [pc, #628]	@ (8014b80 <UART_SetConfig+0x928>)
 801490a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801490c:	e00c      	b.n	8014928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801490e:	4b9d      	ldr	r3, [pc, #628]	@ (8014b84 <UART_SetConfig+0x92c>)
 8014910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014912:	e009      	b.n	8014928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014914:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801491a:	e005      	b.n	8014928 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801491c:	2300      	movs	r3, #0
 801491e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014920:	2301      	movs	r3, #1
 8014922:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014926:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801492a:	2b00      	cmp	r3, #0
 801492c:	f000 81de 	beq.w	8014cec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014934:	4a94      	ldr	r2, [pc, #592]	@ (8014b88 <UART_SetConfig+0x930>)
 8014936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801493a:	461a      	mov	r2, r3
 801493c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801493e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014942:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	685a      	ldr	r2, [r3, #4]
 8014948:	4613      	mov	r3, r2
 801494a:	005b      	lsls	r3, r3, #1
 801494c:	4413      	add	r3, r2
 801494e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014950:	429a      	cmp	r2, r3
 8014952:	d305      	bcc.n	8014960 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	685b      	ldr	r3, [r3, #4]
 8014958:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801495a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801495c:	429a      	cmp	r2, r3
 801495e:	d903      	bls.n	8014968 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8014960:	2301      	movs	r3, #1
 8014962:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014966:	e1c1      	b.n	8014cec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801496a:	2200      	movs	r2, #0
 801496c:	60bb      	str	r3, [r7, #8]
 801496e:	60fa      	str	r2, [r7, #12]
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014974:	4a84      	ldr	r2, [pc, #528]	@ (8014b88 <UART_SetConfig+0x930>)
 8014976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801497a:	b29b      	uxth	r3, r3
 801497c:	2200      	movs	r2, #0
 801497e:	603b      	str	r3, [r7, #0]
 8014980:	607a      	str	r2, [r7, #4]
 8014982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801498a:	f7fb fbb1 	bl	80100f0 <__aeabi_uldivmod>
 801498e:	4602      	mov	r2, r0
 8014990:	460b      	mov	r3, r1
 8014992:	4610      	mov	r0, r2
 8014994:	4619      	mov	r1, r3
 8014996:	f04f 0200 	mov.w	r2, #0
 801499a:	f04f 0300 	mov.w	r3, #0
 801499e:	020b      	lsls	r3, r1, #8
 80149a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80149a4:	0202      	lsls	r2, r0, #8
 80149a6:	6979      	ldr	r1, [r7, #20]
 80149a8:	6849      	ldr	r1, [r1, #4]
 80149aa:	0849      	lsrs	r1, r1, #1
 80149ac:	2000      	movs	r0, #0
 80149ae:	460c      	mov	r4, r1
 80149b0:	4605      	mov	r5, r0
 80149b2:	eb12 0804 	adds.w	r8, r2, r4
 80149b6:	eb43 0905 	adc.w	r9, r3, r5
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	685b      	ldr	r3, [r3, #4]
 80149be:	2200      	movs	r2, #0
 80149c0:	469a      	mov	sl, r3
 80149c2:	4693      	mov	fp, r2
 80149c4:	4652      	mov	r2, sl
 80149c6:	465b      	mov	r3, fp
 80149c8:	4640      	mov	r0, r8
 80149ca:	4649      	mov	r1, r9
 80149cc:	f7fb fb90 	bl	80100f0 <__aeabi_uldivmod>
 80149d0:	4602      	mov	r2, r0
 80149d2:	460b      	mov	r3, r1
 80149d4:	4613      	mov	r3, r2
 80149d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80149d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80149de:	d308      	bcc.n	80149f2 <UART_SetConfig+0x79a>
 80149e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80149e6:	d204      	bcs.n	80149f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80149ee:	60da      	str	r2, [r3, #12]
 80149f0:	e17c      	b.n	8014cec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80149f2:	2301      	movs	r3, #1
 80149f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80149f8:	e178      	b.n	8014cec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	69db      	ldr	r3, [r3, #28]
 80149fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014a02:	f040 80c5 	bne.w	8014b90 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8014a06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014a0a:	2b20      	cmp	r3, #32
 8014a0c:	dc48      	bgt.n	8014aa0 <UART_SetConfig+0x848>
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	db7b      	blt.n	8014b0a <UART_SetConfig+0x8b2>
 8014a12:	2b20      	cmp	r3, #32
 8014a14:	d879      	bhi.n	8014b0a <UART_SetConfig+0x8b2>
 8014a16:	a201      	add	r2, pc, #4	@ (adr r2, 8014a1c <UART_SetConfig+0x7c4>)
 8014a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a1c:	08014aa7 	.word	0x08014aa7
 8014a20:	08014aaf 	.word	0x08014aaf
 8014a24:	08014b0b 	.word	0x08014b0b
 8014a28:	08014b0b 	.word	0x08014b0b
 8014a2c:	08014ab7 	.word	0x08014ab7
 8014a30:	08014b0b 	.word	0x08014b0b
 8014a34:	08014b0b 	.word	0x08014b0b
 8014a38:	08014b0b 	.word	0x08014b0b
 8014a3c:	08014ac7 	.word	0x08014ac7
 8014a40:	08014b0b 	.word	0x08014b0b
 8014a44:	08014b0b 	.word	0x08014b0b
 8014a48:	08014b0b 	.word	0x08014b0b
 8014a4c:	08014b0b 	.word	0x08014b0b
 8014a50:	08014b0b 	.word	0x08014b0b
 8014a54:	08014b0b 	.word	0x08014b0b
 8014a58:	08014b0b 	.word	0x08014b0b
 8014a5c:	08014ad7 	.word	0x08014ad7
 8014a60:	08014b0b 	.word	0x08014b0b
 8014a64:	08014b0b 	.word	0x08014b0b
 8014a68:	08014b0b 	.word	0x08014b0b
 8014a6c:	08014b0b 	.word	0x08014b0b
 8014a70:	08014b0b 	.word	0x08014b0b
 8014a74:	08014b0b 	.word	0x08014b0b
 8014a78:	08014b0b 	.word	0x08014b0b
 8014a7c:	08014b0b 	.word	0x08014b0b
 8014a80:	08014b0b 	.word	0x08014b0b
 8014a84:	08014b0b 	.word	0x08014b0b
 8014a88:	08014b0b 	.word	0x08014b0b
 8014a8c:	08014b0b 	.word	0x08014b0b
 8014a90:	08014b0b 	.word	0x08014b0b
 8014a94:	08014b0b 	.word	0x08014b0b
 8014a98:	08014b0b 	.word	0x08014b0b
 8014a9c:	08014afd 	.word	0x08014afd
 8014aa0:	2b40      	cmp	r3, #64	@ 0x40
 8014aa2:	d02e      	beq.n	8014b02 <UART_SetConfig+0x8aa>
 8014aa4:	e031      	b.n	8014b0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014aa6:	f7fd fca1 	bl	80123ec <HAL_RCC_GetPCLK1Freq>
 8014aaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014aac:	e033      	b.n	8014b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014aae:	f7fd fcb3 	bl	8012418 <HAL_RCC_GetPCLK2Freq>
 8014ab2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014ab4:	e02f      	b.n	8014b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014aba:	4618      	mov	r0, r3
 8014abc:	f7fe fee2 	bl	8013884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014ac4:	e027      	b.n	8014b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014ac6:	f107 0318 	add.w	r3, r7, #24
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7ff f82e 	bl	8013b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014ad0:	69fb      	ldr	r3, [r7, #28]
 8014ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014ad4:	e01f      	b.n	8014b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8014b8c <UART_SetConfig+0x934>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	f003 0320 	and.w	r3, r3, #32
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d009      	beq.n	8014af6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8014b8c <UART_SetConfig+0x934>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	08db      	lsrs	r3, r3, #3
 8014ae8:	f003 0303 	and.w	r3, r3, #3
 8014aec:	4a24      	ldr	r2, [pc, #144]	@ (8014b80 <UART_SetConfig+0x928>)
 8014aee:	fa22 f303 	lsr.w	r3, r2, r3
 8014af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014af4:	e00f      	b.n	8014b16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8014af6:	4b22      	ldr	r3, [pc, #136]	@ (8014b80 <UART_SetConfig+0x928>)
 8014af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014afa:	e00c      	b.n	8014b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014afc:	4b21      	ldr	r3, [pc, #132]	@ (8014b84 <UART_SetConfig+0x92c>)
 8014afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014b00:	e009      	b.n	8014b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014b08:	e005      	b.n	8014b16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014b0e:	2301      	movs	r3, #1
 8014b10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014b14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	f000 80e7 	beq.w	8014cec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014b1e:	697b      	ldr	r3, [r7, #20]
 8014b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b22:	4a19      	ldr	r2, [pc, #100]	@ (8014b88 <UART_SetConfig+0x930>)
 8014b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014b28:	461a      	mov	r2, r3
 8014b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014b30:	005a      	lsls	r2, r3, #1
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	685b      	ldr	r3, [r3, #4]
 8014b36:	085b      	lsrs	r3, r3, #1
 8014b38:	441a      	add	r2, r3
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b42:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b46:	2b0f      	cmp	r3, #15
 8014b48:	d916      	bls.n	8014b78 <UART_SetConfig+0x920>
 8014b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014b50:	d212      	bcs.n	8014b78 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	f023 030f 	bic.w	r3, r3, #15
 8014b5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b5e:	085b      	lsrs	r3, r3, #1
 8014b60:	b29b      	uxth	r3, r3
 8014b62:	f003 0307 	and.w	r3, r3, #7
 8014b66:	b29a      	uxth	r2, r3
 8014b68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014b6a:	4313      	orrs	r3, r2
 8014b6c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014b74:	60da      	str	r2, [r3, #12]
 8014b76:	e0b9      	b.n	8014cec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014b78:	2301      	movs	r3, #1
 8014b7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014b7e:	e0b5      	b.n	8014cec <UART_SetConfig+0xa94>
 8014b80:	03d09000 	.word	0x03d09000
 8014b84:	003d0900 	.word	0x003d0900
 8014b88:	08023898 	.word	0x08023898
 8014b8c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8014b90:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014b94:	2b20      	cmp	r3, #32
 8014b96:	dc49      	bgt.n	8014c2c <UART_SetConfig+0x9d4>
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	db7c      	blt.n	8014c96 <UART_SetConfig+0xa3e>
 8014b9c:	2b20      	cmp	r3, #32
 8014b9e:	d87a      	bhi.n	8014c96 <UART_SetConfig+0xa3e>
 8014ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8014ba8 <UART_SetConfig+0x950>)
 8014ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ba6:	bf00      	nop
 8014ba8:	08014c33 	.word	0x08014c33
 8014bac:	08014c3b 	.word	0x08014c3b
 8014bb0:	08014c97 	.word	0x08014c97
 8014bb4:	08014c97 	.word	0x08014c97
 8014bb8:	08014c43 	.word	0x08014c43
 8014bbc:	08014c97 	.word	0x08014c97
 8014bc0:	08014c97 	.word	0x08014c97
 8014bc4:	08014c97 	.word	0x08014c97
 8014bc8:	08014c53 	.word	0x08014c53
 8014bcc:	08014c97 	.word	0x08014c97
 8014bd0:	08014c97 	.word	0x08014c97
 8014bd4:	08014c97 	.word	0x08014c97
 8014bd8:	08014c97 	.word	0x08014c97
 8014bdc:	08014c97 	.word	0x08014c97
 8014be0:	08014c97 	.word	0x08014c97
 8014be4:	08014c97 	.word	0x08014c97
 8014be8:	08014c63 	.word	0x08014c63
 8014bec:	08014c97 	.word	0x08014c97
 8014bf0:	08014c97 	.word	0x08014c97
 8014bf4:	08014c97 	.word	0x08014c97
 8014bf8:	08014c97 	.word	0x08014c97
 8014bfc:	08014c97 	.word	0x08014c97
 8014c00:	08014c97 	.word	0x08014c97
 8014c04:	08014c97 	.word	0x08014c97
 8014c08:	08014c97 	.word	0x08014c97
 8014c0c:	08014c97 	.word	0x08014c97
 8014c10:	08014c97 	.word	0x08014c97
 8014c14:	08014c97 	.word	0x08014c97
 8014c18:	08014c97 	.word	0x08014c97
 8014c1c:	08014c97 	.word	0x08014c97
 8014c20:	08014c97 	.word	0x08014c97
 8014c24:	08014c97 	.word	0x08014c97
 8014c28:	08014c89 	.word	0x08014c89
 8014c2c:	2b40      	cmp	r3, #64	@ 0x40
 8014c2e:	d02e      	beq.n	8014c8e <UART_SetConfig+0xa36>
 8014c30:	e031      	b.n	8014c96 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014c32:	f7fd fbdb 	bl	80123ec <HAL_RCC_GetPCLK1Freq>
 8014c36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014c38:	e033      	b.n	8014ca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014c3a:	f7fd fbed 	bl	8012418 <HAL_RCC_GetPCLK2Freq>
 8014c3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014c40:	e02f      	b.n	8014ca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7fe fe1c 	bl	8013884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c50:	e027      	b.n	8014ca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014c52:	f107 0318 	add.w	r3, r7, #24
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7fe ff68 	bl	8013b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014c5c:	69fb      	ldr	r3, [r7, #28]
 8014c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c60:	e01f      	b.n	8014ca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014c62:	4b2d      	ldr	r3, [pc, #180]	@ (8014d18 <UART_SetConfig+0xac0>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	f003 0320 	and.w	r3, r3, #32
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d009      	beq.n	8014c82 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8014d18 <UART_SetConfig+0xac0>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	08db      	lsrs	r3, r3, #3
 8014c74:	f003 0303 	and.w	r3, r3, #3
 8014c78:	4a28      	ldr	r2, [pc, #160]	@ (8014d1c <UART_SetConfig+0xac4>)
 8014c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8014c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014c80:	e00f      	b.n	8014ca2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8014c82:	4b26      	ldr	r3, [pc, #152]	@ (8014d1c <UART_SetConfig+0xac4>)
 8014c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c86:	e00c      	b.n	8014ca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014c88:	4b25      	ldr	r3, [pc, #148]	@ (8014d20 <UART_SetConfig+0xac8>)
 8014c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c8c:	e009      	b.n	8014ca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c94:	e005      	b.n	8014ca2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8014c96:	2300      	movs	r3, #0
 8014c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8014ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d021      	beq.n	8014cec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014ca8:	697b      	ldr	r3, [r7, #20]
 8014caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cac:	4a1d      	ldr	r2, [pc, #116]	@ (8014d24 <UART_SetConfig+0xacc>)
 8014cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014cb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8014cba:	697b      	ldr	r3, [r7, #20]
 8014cbc:	685b      	ldr	r3, [r3, #4]
 8014cbe:	085b      	lsrs	r3, r3, #1
 8014cc0:	441a      	add	r2, r3
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	685b      	ldr	r3, [r3, #4]
 8014cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8014cca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cce:	2b0f      	cmp	r3, #15
 8014cd0:	d909      	bls.n	8014ce6 <UART_SetConfig+0xa8e>
 8014cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014cd8:	d205      	bcs.n	8014ce6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cdc:	b29a      	uxth	r2, r3
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	60da      	str	r2, [r3, #12]
 8014ce4:	e002      	b.n	8014cec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014cec:	697b      	ldr	r3, [r7, #20]
 8014cee:	2201      	movs	r2, #1
 8014cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8014cf4:	697b      	ldr	r3, [r7, #20]
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	2200      	movs	r2, #0
 8014d06:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8014d08:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3748      	adds	r7, #72	@ 0x48
 8014d10:	46bd      	mov	sp, r7
 8014d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014d16:	bf00      	nop
 8014d18:	58024400 	.word	0x58024400
 8014d1c:	03d09000 	.word	0x03d09000
 8014d20:	003d0900 	.word	0x003d0900
 8014d24:	08023898 	.word	0x08023898

08014d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014d28:	b480      	push	{r7}
 8014d2a:	b083      	sub	sp, #12
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d34:	f003 0308 	and.w	r3, r3, #8
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d00a      	beq.n	8014d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	685b      	ldr	r3, [r3, #4]
 8014d42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	430a      	orrs	r2, r1
 8014d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d56:	f003 0301 	and.w	r3, r3, #1
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d00a      	beq.n	8014d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	685b      	ldr	r3, [r3, #4]
 8014d64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	430a      	orrs	r2, r1
 8014d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d78:	f003 0302 	and.w	r3, r3, #2
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d00a      	beq.n	8014d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	430a      	orrs	r2, r1
 8014d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d9a:	f003 0304 	and.w	r3, r3, #4
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d00a      	beq.n	8014db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	685b      	ldr	r3, [r3, #4]
 8014da8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	430a      	orrs	r2, r1
 8014db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014dbc:	f003 0310 	and.w	r3, r3, #16
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d00a      	beq.n	8014dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	689b      	ldr	r3, [r3, #8]
 8014dca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	430a      	orrs	r2, r1
 8014dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014dde:	f003 0320 	and.w	r3, r3, #32
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d00a      	beq.n	8014dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	689b      	ldr	r3, [r3, #8]
 8014dec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	430a      	orrs	r2, r1
 8014dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d01a      	beq.n	8014e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	430a      	orrs	r2, r1
 8014e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014e26:	d10a      	bne.n	8014e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	430a      	orrs	r2, r1
 8014e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d00a      	beq.n	8014e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	685b      	ldr	r3, [r3, #4]
 8014e50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	430a      	orrs	r2, r1
 8014e5e:	605a      	str	r2, [r3, #4]
  }
}
 8014e60:	bf00      	nop
 8014e62:	370c      	adds	r7, #12
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr

08014e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b098      	sub	sp, #96	@ 0x60
 8014e70:	af02      	add	r7, sp, #8
 8014e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2200      	movs	r2, #0
 8014e78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014e7c:	f7fb ff50 	bl	8010d20 <HAL_GetTick>
 8014e80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	f003 0308 	and.w	r3, r3, #8
 8014e8c:	2b08      	cmp	r3, #8
 8014e8e:	d12f      	bne.n	8014ef0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014e90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014e94:	9300      	str	r3, [sp, #0]
 8014e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014e98:	2200      	movs	r2, #0
 8014e9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	f000 f88e 	bl	8014fc0 <UART_WaitOnFlagUntilTimeout>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d022      	beq.n	8014ef0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014eb2:	e853 3f00 	ldrex	r3, [r3]
 8014eb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014ebe:	653b      	str	r3, [r7, #80]	@ 0x50
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	461a      	mov	r2, r3
 8014ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8014eca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ecc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014ece:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ed0:	e841 2300 	strex	r3, r2, [r1]
 8014ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d1e6      	bne.n	8014eaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2220      	movs	r2, #32
 8014ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014eec:	2303      	movs	r3, #3
 8014eee:	e063      	b.n	8014fb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	f003 0304 	and.w	r3, r3, #4
 8014efa:	2b04      	cmp	r3, #4
 8014efc:	d149      	bne.n	8014f92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014efe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014f02:	9300      	str	r3, [sp, #0]
 8014f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014f06:	2200      	movs	r2, #0
 8014f08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8014f0c:	6878      	ldr	r0, [r7, #4]
 8014f0e:	f000 f857 	bl	8014fc0 <UART_WaitOnFlagUntilTimeout>
 8014f12:	4603      	mov	r3, r0
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d03c      	beq.n	8014f92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f20:	e853 3f00 	ldrex	r3, [r3]
 8014f24:	623b      	str	r3, [r7, #32]
   return(result);
 8014f26:	6a3b      	ldr	r3, [r7, #32]
 8014f28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	461a      	mov	r2, r3
 8014f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8014f38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014f3e:	e841 2300 	strex	r3, r2, [r1]
 8014f42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d1e6      	bne.n	8014f18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	3308      	adds	r3, #8
 8014f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	e853 3f00 	ldrex	r3, [r3]
 8014f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	f023 0301 	bic.w	r3, r3, #1
 8014f60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	3308      	adds	r3, #8
 8014f68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014f6a:	61fa      	str	r2, [r7, #28]
 8014f6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f6e:	69b9      	ldr	r1, [r7, #24]
 8014f70:	69fa      	ldr	r2, [r7, #28]
 8014f72:	e841 2300 	strex	r3, r2, [r1]
 8014f76:	617b      	str	r3, [r7, #20]
   return(result);
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d1e5      	bne.n	8014f4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	2220      	movs	r2, #32
 8014f82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	2200      	movs	r2, #0
 8014f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014f8e:	2303      	movs	r3, #3
 8014f90:	e012      	b.n	8014fb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	2220      	movs	r2, #32
 8014f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	2220      	movs	r2, #32
 8014f9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2200      	movs	r2, #0
 8014fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2200      	movs	r2, #0
 8014fac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014fb6:	2300      	movs	r3, #0
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3758      	adds	r7, #88	@ 0x58
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b084      	sub	sp, #16
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	60f8      	str	r0, [r7, #12]
 8014fc8:	60b9      	str	r1, [r7, #8]
 8014fca:	603b      	str	r3, [r7, #0]
 8014fcc:	4613      	mov	r3, r2
 8014fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014fd0:	e04f      	b.n	8015072 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014fd2:	69bb      	ldr	r3, [r7, #24]
 8014fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fd8:	d04b      	beq.n	8015072 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014fda:	f7fb fea1 	bl	8010d20 <HAL_GetTick>
 8014fde:	4602      	mov	r2, r0
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	1ad3      	subs	r3, r2, r3
 8014fe4:	69ba      	ldr	r2, [r7, #24]
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d302      	bcc.n	8014ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8014fea:	69bb      	ldr	r3, [r7, #24]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d101      	bne.n	8014ff4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014ff0:	2303      	movs	r3, #3
 8014ff2:	e04e      	b.n	8015092 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	f003 0304 	and.w	r3, r3, #4
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d037      	beq.n	8015072 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	2b80      	cmp	r3, #128	@ 0x80
 8015006:	d034      	beq.n	8015072 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	2b40      	cmp	r3, #64	@ 0x40
 801500c:	d031      	beq.n	8015072 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	69db      	ldr	r3, [r3, #28]
 8015014:	f003 0308 	and.w	r3, r3, #8
 8015018:	2b08      	cmp	r3, #8
 801501a:	d110      	bne.n	801503e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	2208      	movs	r2, #8
 8015022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015024:	68f8      	ldr	r0, [r7, #12]
 8015026:	f000 f839 	bl	801509c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	2208      	movs	r2, #8
 801502e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	2200      	movs	r2, #0
 8015036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801503a:	2301      	movs	r3, #1
 801503c:	e029      	b.n	8015092 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	69db      	ldr	r3, [r3, #28]
 8015044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801504c:	d111      	bne.n	8015072 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015058:	68f8      	ldr	r0, [r7, #12]
 801505a:	f000 f81f 	bl	801509c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	2220      	movs	r2, #32
 8015062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	2200      	movs	r2, #0
 801506a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801506e:	2303      	movs	r3, #3
 8015070:	e00f      	b.n	8015092 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	69da      	ldr	r2, [r3, #28]
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	4013      	ands	r3, r2
 801507c:	68ba      	ldr	r2, [r7, #8]
 801507e:	429a      	cmp	r2, r3
 8015080:	bf0c      	ite	eq
 8015082:	2301      	moveq	r3, #1
 8015084:	2300      	movne	r3, #0
 8015086:	b2db      	uxtb	r3, r3
 8015088:	461a      	mov	r2, r3
 801508a:	79fb      	ldrb	r3, [r7, #7]
 801508c:	429a      	cmp	r2, r3
 801508e:	d0a0      	beq.n	8014fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015090:	2300      	movs	r3, #0
}
 8015092:	4618      	mov	r0, r3
 8015094:	3710      	adds	r7, #16
 8015096:	46bd      	mov	sp, r7
 8015098:	bd80      	pop	{r7, pc}
	...

0801509c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801509c:	b480      	push	{r7}
 801509e:	b095      	sub	sp, #84	@ 0x54
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150ac:	e853 3f00 	ldrex	r3, [r3]
 80150b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80150b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80150b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	461a      	mov	r2, r3
 80150c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80150c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80150c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80150c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80150ca:	e841 2300 	strex	r3, r2, [r1]
 80150ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80150d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d1e6      	bne.n	80150a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	3308      	adds	r3, #8
 80150dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150de:	6a3b      	ldr	r3, [r7, #32]
 80150e0:	e853 3f00 	ldrex	r3, [r3]
 80150e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80150e6:	69fa      	ldr	r2, [r7, #28]
 80150e8:	4b1e      	ldr	r3, [pc, #120]	@ (8015164 <UART_EndRxTransfer+0xc8>)
 80150ea:	4013      	ands	r3, r2
 80150ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	3308      	adds	r3, #8
 80150f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80150f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80150f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80150fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80150fe:	e841 2300 	strex	r3, r2, [r1]
 8015102:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015106:	2b00      	cmp	r3, #0
 8015108:	d1e5      	bne.n	80150d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801510e:	2b01      	cmp	r3, #1
 8015110:	d118      	bne.n	8015144 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	e853 3f00 	ldrex	r3, [r3]
 801511e:	60bb      	str	r3, [r7, #8]
   return(result);
 8015120:	68bb      	ldr	r3, [r7, #8]
 8015122:	f023 0310 	bic.w	r3, r3, #16
 8015126:	647b      	str	r3, [r7, #68]	@ 0x44
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	461a      	mov	r2, r3
 801512e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015130:	61bb      	str	r3, [r7, #24]
 8015132:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015134:	6979      	ldr	r1, [r7, #20]
 8015136:	69ba      	ldr	r2, [r7, #24]
 8015138:	e841 2300 	strex	r3, r2, [r1]
 801513c:	613b      	str	r3, [r7, #16]
   return(result);
 801513e:	693b      	ldr	r3, [r7, #16]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d1e6      	bne.n	8015112 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2220      	movs	r2, #32
 8015148:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2200      	movs	r2, #0
 8015150:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	2200      	movs	r2, #0
 8015156:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8015158:	bf00      	nop
 801515a:	3754      	adds	r7, #84	@ 0x54
 801515c:	46bd      	mov	sp, r7
 801515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015162:	4770      	bx	lr
 8015164:	effffffe 	.word	0xeffffffe

08015168 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015168:	b480      	push	{r7}
 801516a:	b085      	sub	sp, #20
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015176:	2b01      	cmp	r3, #1
 8015178:	d101      	bne.n	801517e <HAL_UARTEx_DisableFifoMode+0x16>
 801517a:	2302      	movs	r3, #2
 801517c:	e027      	b.n	80151ce <HAL_UARTEx_DisableFifoMode+0x66>
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	2201      	movs	r2, #1
 8015182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	2224      	movs	r2, #36	@ 0x24
 801518a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	681a      	ldr	r2, [r3, #0]
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	f022 0201 	bic.w	r2, r2, #1
 80151a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80151ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	2200      	movs	r2, #0
 80151b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	68fa      	ldr	r2, [r7, #12]
 80151ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2220      	movs	r2, #32
 80151c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2200      	movs	r2, #0
 80151c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80151cc:	2300      	movs	r3, #0
}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3714      	adds	r7, #20
 80151d2:	46bd      	mov	sp, r7
 80151d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d8:	4770      	bx	lr

080151da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80151da:	b580      	push	{r7, lr}
 80151dc:	b084      	sub	sp, #16
 80151de:	af00      	add	r7, sp, #0
 80151e0:	6078      	str	r0, [r7, #4]
 80151e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80151ea:	2b01      	cmp	r3, #1
 80151ec:	d101      	bne.n	80151f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80151ee:	2302      	movs	r3, #2
 80151f0:	e02d      	b.n	801524e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	2201      	movs	r2, #1
 80151f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2224      	movs	r2, #36	@ 0x24
 80151fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	681a      	ldr	r2, [r3, #0]
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	f022 0201 	bic.w	r2, r2, #1
 8015218:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	689b      	ldr	r3, [r3, #8]
 8015220:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	683a      	ldr	r2, [r7, #0]
 801522a:	430a      	orrs	r2, r1
 801522c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801522e:	6878      	ldr	r0, [r7, #4]
 8015230:	f000 f850 	bl	80152d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	68fa      	ldr	r2, [r7, #12]
 801523a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2220      	movs	r2, #32
 8015240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	2200      	movs	r2, #0
 8015248:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801524c:	2300      	movs	r3, #0
}
 801524e:	4618      	mov	r0, r3
 8015250:	3710      	adds	r7, #16
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}

08015256 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015256:	b580      	push	{r7, lr}
 8015258:	b084      	sub	sp, #16
 801525a:	af00      	add	r7, sp, #0
 801525c:	6078      	str	r0, [r7, #4]
 801525e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015266:	2b01      	cmp	r3, #1
 8015268:	d101      	bne.n	801526e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801526a:	2302      	movs	r3, #2
 801526c:	e02d      	b.n	80152ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	2201      	movs	r2, #1
 8015272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	2224      	movs	r2, #36	@ 0x24
 801527a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	681a      	ldr	r2, [r3, #0]
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	f022 0201 	bic.w	r2, r2, #1
 8015294:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	689b      	ldr	r3, [r3, #8]
 801529c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	683a      	ldr	r2, [r7, #0]
 80152a6:	430a      	orrs	r2, r1
 80152a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80152aa:	6878      	ldr	r0, [r7, #4]
 80152ac:	f000 f812 	bl	80152d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	68fa      	ldr	r2, [r7, #12]
 80152b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2220      	movs	r2, #32
 80152bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2200      	movs	r2, #0
 80152c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80152c8:	2300      	movs	r3, #0
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3710      	adds	r7, #16
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}
	...

080152d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80152d4:	b480      	push	{r7}
 80152d6:	b085      	sub	sp, #20
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d108      	bne.n	80152f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2201      	movs	r2, #1
 80152e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2201      	movs	r2, #1
 80152f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80152f4:	e031      	b.n	801535a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80152f6:	2310      	movs	r3, #16
 80152f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80152fa:	2310      	movs	r3, #16
 80152fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	689b      	ldr	r3, [r3, #8]
 8015304:	0e5b      	lsrs	r3, r3, #25
 8015306:	b2db      	uxtb	r3, r3
 8015308:	f003 0307 	and.w	r3, r3, #7
 801530c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	689b      	ldr	r3, [r3, #8]
 8015314:	0f5b      	lsrs	r3, r3, #29
 8015316:	b2db      	uxtb	r3, r3
 8015318:	f003 0307 	and.w	r3, r3, #7
 801531c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801531e:	7bbb      	ldrb	r3, [r7, #14]
 8015320:	7b3a      	ldrb	r2, [r7, #12]
 8015322:	4911      	ldr	r1, [pc, #68]	@ (8015368 <UARTEx_SetNbDataToProcess+0x94>)
 8015324:	5c8a      	ldrb	r2, [r1, r2]
 8015326:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801532a:	7b3a      	ldrb	r2, [r7, #12]
 801532c:	490f      	ldr	r1, [pc, #60]	@ (801536c <UARTEx_SetNbDataToProcess+0x98>)
 801532e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015330:	fb93 f3f2 	sdiv	r3, r3, r2
 8015334:	b29a      	uxth	r2, r3
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801533c:	7bfb      	ldrb	r3, [r7, #15]
 801533e:	7b7a      	ldrb	r2, [r7, #13]
 8015340:	4909      	ldr	r1, [pc, #36]	@ (8015368 <UARTEx_SetNbDataToProcess+0x94>)
 8015342:	5c8a      	ldrb	r2, [r1, r2]
 8015344:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015348:	7b7a      	ldrb	r2, [r7, #13]
 801534a:	4908      	ldr	r1, [pc, #32]	@ (801536c <UARTEx_SetNbDataToProcess+0x98>)
 801534c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801534e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015352:	b29a      	uxth	r2, r3
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801535a:	bf00      	nop
 801535c:	3714      	adds	r7, #20
 801535e:	46bd      	mov	sp, r7
 8015360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015364:	4770      	bx	lr
 8015366:	bf00      	nop
 8015368:	080238b0 	.word	0x080238b0
 801536c:	080238b8 	.word	0x080238b8

08015370 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b082      	sub	sp, #8
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 801537a:	683b      	ldr	r3, [r7, #0]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d009      	beq.n	8015394 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8015380:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8015382:	461a      	mov	r2, r3
        err.type, err.code);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801538a:	6839      	ldr	r1, [r7, #0]
 801538c:	4807      	ldr	r0, [pc, #28]	@ (80153ac <ai_log_err+0x3c>)
 801538e:	f00d fa19 	bl	80227c4 <iprintf>
 8015392:	e009      	b.n	80153a8 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8015394:	793b      	ldrb	r3, [r7, #4]
 8015396:	4619      	mov	r1, r3
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801539e:	461a      	mov	r2, r3
 80153a0:	4803      	ldr	r0, [pc, #12]	@ (80153b0 <ai_log_err+0x40>)
 80153a2:	f00d fa0f 	bl	80227c4 <iprintf>

  do {} while (1);
 80153a6:	bf00      	nop
 80153a8:	bf00      	nop
 80153aa:	e7fd      	b.n	80153a8 <ai_log_err+0x38>
 80153ac:	08023780 	.word	0x08023780
 80153b0:	080237b4 	.word	0x080237b4

080153b4 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b086      	sub	sp, #24
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 80153bc:	2200      	movs	r2, #0
 80153be:	6879      	ldr	r1, [r7, #4]
 80153c0:	4828      	ldr	r0, [pc, #160]	@ (8015464 <ai_boostrap+0xb0>)
 80153c2:	f000 fb17 	bl	80159f4 <ai_network_create_and_init>
 80153c6:	4603      	mov	r3, r0
 80153c8:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 80153ca:	7b3b      	ldrb	r3, [r7, #12]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d006      	beq.n	80153de <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 80153d0:	4925      	ldr	r1, [pc, #148]	@ (8015468 <ai_boostrap+0xb4>)
 80153d2:	68f8      	ldr	r0, [r7, #12]
 80153d4:	f7ff ffcc 	bl	8015370 <ai_log_err>
    return -1;
 80153d8:	f04f 33ff 	mov.w	r3, #4294967295
 80153dc:	e03e      	b.n	801545c <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 80153de:	4b21      	ldr	r3, [pc, #132]	@ (8015464 <ai_boostrap+0xb0>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	2100      	movs	r1, #0
 80153e4:	4618      	mov	r0, r3
 80153e6:	f000 fb83 	bl	8015af0 <ai_network_inputs_get>
 80153ea:	4603      	mov	r3, r0
 80153ec:	4a1f      	ldr	r2, [pc, #124]	@ (801546c <ai_boostrap+0xb8>)
 80153ee:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80153f0:	4b1c      	ldr	r3, [pc, #112]	@ (8015464 <ai_boostrap+0xb0>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	2100      	movs	r1, #0
 80153f6:	4618      	mov	r0, r3
 80153f8:	f000 fb94 	bl	8015b24 <ai_network_outputs_get>
 80153fc:	4603      	mov	r3, r0
 80153fe:	4a1c      	ldr	r2, [pc, #112]	@ (8015470 <ai_boostrap+0xbc>)
 8015400:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8015402:	2300      	movs	r3, #0
 8015404:	617b      	str	r3, [r7, #20]
 8015406:	e00f      	b.n	8015428 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8015408:	4b18      	ldr	r3, [pc, #96]	@ (801546c <ai_boostrap+0xb8>)
 801540a:	6819      	ldr	r1, [r3, #0]
 801540c:	697a      	ldr	r2, [r7, #20]
 801540e:	4613      	mov	r3, r2
 8015410:	00db      	lsls	r3, r3, #3
 8015412:	1a9b      	subs	r3, r3, r2
 8015414:	009b      	lsls	r3, r3, #2
 8015416:	440b      	add	r3, r1
 8015418:	685a      	ldr	r2, [r3, #4]
 801541a:	4916      	ldr	r1, [pc, #88]	@ (8015474 <ai_boostrap+0xc0>)
 801541c:	697b      	ldr	r3, [r7, #20]
 801541e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8015422:	697b      	ldr	r3, [r7, #20]
 8015424:	3301      	adds	r3, #1
 8015426:	617b      	str	r3, [r7, #20]
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	2b00      	cmp	r3, #0
 801542c:	ddec      	ble.n	8015408 <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 801542e:	2300      	movs	r3, #0
 8015430:	613b      	str	r3, [r7, #16]
 8015432:	e00f      	b.n	8015454 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8015434:	4b0e      	ldr	r3, [pc, #56]	@ (8015470 <ai_boostrap+0xbc>)
 8015436:	6819      	ldr	r1, [r3, #0]
 8015438:	693a      	ldr	r2, [r7, #16]
 801543a:	4613      	mov	r3, r2
 801543c:	00db      	lsls	r3, r3, #3
 801543e:	1a9b      	subs	r3, r3, r2
 8015440:	009b      	lsls	r3, r3, #2
 8015442:	440b      	add	r3, r1
 8015444:	685a      	ldr	r2, [r3, #4]
 8015446:	490c      	ldr	r1, [pc, #48]	@ (8015478 <ai_boostrap+0xc4>)
 8015448:	693b      	ldr	r3, [r7, #16]
 801544a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 801544e:	693b      	ldr	r3, [r7, #16]
 8015450:	3301      	adds	r3, #1
 8015452:	613b      	str	r3, [r7, #16]
 8015454:	693b      	ldr	r3, [r7, #16]
 8015456:	2b00      	cmp	r3, #0
 8015458:	ddec      	ble.n	8015434 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 801545a:	2300      	movs	r3, #0
}
 801545c:	4618      	mov	r0, r3
 801545e:	3718      	adds	r7, #24
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}
 8015464:	240043a0 	.word	0x240043a0
 8015468:	080237e4 	.word	0x080237e4
 801546c:	240043a4 	.word	0x240043a4
 8015470:	240043a8 	.word	0x240043a8
 8015474:	24000bac 	.word	0x24000bac
 8015478:	24000bb0 	.word	0x24000bb0

0801547c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8015480:	4803      	ldr	r0, [pc, #12]	@ (8015490 <MX_X_CUBE_AI_Init+0x14>)
 8015482:	f00d fa07 	bl	8022894 <puts>

  ai_boostrap(data_activations0);
 8015486:	4803      	ldr	r0, [pc, #12]	@ (8015494 <MX_X_CUBE_AI_Init+0x18>)
 8015488:	f7ff ff94 	bl	80153b4 <ai_boostrap>
    /* USER CODE END 5 */
}
 801548c:	bf00      	nop
 801548e:	bd80      	pop	{r7, pc}
 8015490:	08023800 	.word	0x08023800
 8015494:	24000024 	.word	0x24000024

08015498 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8015498:	b590      	push	{r4, r7, lr}
 801549a:	f5ad 7d61 	sub.w	sp, sp, #900	@ 0x384
 801549e:	af00      	add	r7, sp, #0

	ai_i8 input_data [28*28];
	ai_i8 output_data [10];

	// Load test digit ( change to digit1 .. digit5 )
	memcpy ( input_data , digit1 , sizeof ( input_data ) );
 80154a0:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80154a4:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 80154a8:	4a72      	ldr	r2, [pc, #456]	@ (8015674 <MX_X_CUBE_AI_Process+0x1dc>)
 80154aa:	4618      	mov	r0, r3
 80154ac:	4611      	mov	r1, r2
 80154ae:	f44f 7344 	mov.w	r3, #784	@ 0x310
 80154b2:	461a      	mov	r2, r3
 80154b4:	f00d fb7b 	bl	8022bae <memcpy>


	// Initialize AI buffers
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = {
 80154b8:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80154bc:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80154c0:	4a6d      	ldr	r2, [pc, #436]	@ (8015678 <MX_X_CUBE_AI_Process+0x1e0>)
 80154c2:	601a      	str	r2, [r3, #0]
 80154c4:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80154c8:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80154cc:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80154d0:	605a      	str	r2, [r3, #4]
 80154d2:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80154d6:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80154da:	2200      	movs	r2, #0
 80154dc:	609a      	str	r2, [r3, #8]
 80154de:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80154e2:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80154e6:	2200      	movs	r2, #0
 80154e8:	60da      	str	r2, [r3, #12]
 80154ea:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80154ee:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80154f2:	f44f 7244 	mov.w	r2, #784	@ 0x310
 80154f6:	611a      	str	r2, [r3, #16]
 80154f8:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80154fc:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8015500:	2201      	movs	r2, #1
 8015502:	751a      	strb	r2, [r3, #20]
 8015504:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8015508:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 801550c:	6953      	ldr	r3, [r2, #20]
 801550e:	2104      	movs	r1, #4
 8015510:	f361 231f 	bfi	r3, r1, #8, #24
 8015514:	6153      	str	r3, [r2, #20]
	    AI_BUFFER_INIT(
 8015516:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 801551a:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 801551e:	4a57      	ldr	r2, [pc, #348]	@ (801567c <MX_X_CUBE_AI_Process+0x1e4>)
 8015520:	461c      	mov	r4, r3
 8015522:	4613      	mov	r3, r2
 8015524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = {
 801552a:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 801552e:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8015532:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8015536:	619a      	str	r2, [r3, #24]
	        NULL,                            // meta_info
	        input_data                       // data
	    )
	};

	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = {
 8015538:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 801553c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015540:	4a4d      	ldr	r2, [pc, #308]	@ (8015678 <MX_X_CUBE_AI_Process+0x1e0>)
 8015542:	601a      	str	r2, [r3, #0]
 8015544:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8015548:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801554c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8015550:	605a      	str	r2, [r3, #4]
 8015552:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8015556:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801555a:	2200      	movs	r2, #0
 801555c:	609a      	str	r2, [r3, #8]
 801555e:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8015562:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015566:	2200      	movs	r2, #0
 8015568:	60da      	str	r2, [r3, #12]
 801556a:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 801556e:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015572:	220a      	movs	r2, #10
 8015574:	611a      	str	r2, [r3, #16]
 8015576:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 801557a:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801557e:	2201      	movs	r2, #1
 8015580:	751a      	strb	r2, [r3, #20]
 8015582:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8015586:	f5a3 725c 	sub.w	r2, r3, #880	@ 0x370
 801558a:	6953      	ldr	r3, [r2, #20]
 801558c:	2104      	movs	r1, #4
 801558e:	f361 231f 	bfi	r3, r1, #8, #24
 8015592:	6153      	str	r3, [r2, #20]
	    AI_BUFFER_INIT(
 8015594:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8015598:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 801559c:	4a38      	ldr	r2, [pc, #224]	@ (8015680 <MX_X_CUBE_AI_Process+0x1e8>)
 801559e:	461c      	mov	r4, r3
 80155a0:	4613      	mov	r3, r2
 80155a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80155a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = {
 80155a8:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80155ac:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80155b0:	463a      	mov	r2, r7
 80155b2:	619a      	str	r2, [r3, #24]
	        output_data                      // data
	    )
	};

	// Run inference
	if ( ai_network_run ( network , ai_input , ai_output ) != 1) {
 80155b4:	4b33      	ldr	r3, [pc, #204]	@ (8015684 <MX_X_CUBE_AI_Process+0x1ec>)
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	f107 0210 	add.w	r2, r7, #16
 80155bc:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80155c0:	4618      	mov	r0, r3
 80155c2:	f000 fb05 	bl	8015bd0 <ai_network_run>
 80155c6:	4603      	mov	r3, r0
 80155c8:	2b01      	cmp	r3, #1
 80155ca:	d00b      	beq.n	80155e4 <MX_X_CUBE_AI_Process+0x14c>
		HAL_UART_Transmit(&huart3, (uint8_t*)err_msg, strlen(err_msg), HAL_MAX_DELAY);
 80155cc:	482e      	ldr	r0, [pc, #184]	@ (8015688 <MX_X_CUBE_AI_Process+0x1f0>)
 80155ce:	f7fa fd37 	bl	8010040 <strlen>
 80155d2:	4603      	mov	r3, r0
 80155d4:	b29a      	uxth	r2, r3
 80155d6:	f04f 33ff 	mov.w	r3, #4294967295
 80155da:	492b      	ldr	r1, [pc, #172]	@ (8015688 <MX_X_CUBE_AI_Process+0x1f0>)
 80155dc:	482b      	ldr	r0, [pc, #172]	@ (801568c <MX_X_CUBE_AI_Process+0x1f4>)
 80155de:	f7fe fdad 	bl	801413c <HAL_UART_Transmit>
 80155e2:	e042      	b.n	801566a <MX_X_CUBE_AI_Process+0x1d2>
		return ;
	}

	// Find predicted digit
	int max_idx = 0;
 80155e4:	2300      	movs	r3, #0
 80155e6:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
	int8_t max_val = output_data [0];
 80155ea:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80155ee:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80155f2:	781b      	ldrb	r3, [r3, #0]
 80155f4:	f887 337b 	strb.w	r3, [r7, #891]	@ 0x37b
	for (int i = 1; i < 10; i ++) {
 80155f8:	2301      	movs	r3, #1
 80155fa:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80155fe:	e01f      	b.n	8015640 <MX_X_CUBE_AI_Process+0x1a8>
		if ( output_data [i ] > max_val ) {
 8015600:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8015604:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 8015608:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801560c:	4413      	add	r3, r2
 801560e:	f993 3000 	ldrsb.w	r3, [r3]
 8015612:	f997 237b 	ldrsb.w	r2, [r7, #891]	@ 0x37b
 8015616:	429a      	cmp	r2, r3
 8015618:	da0d      	bge.n	8015636 <MX_X_CUBE_AI_Process+0x19e>
			max_val = output_data [i ];
 801561a:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 801561e:	f5a3 724a 	sub.w	r2, r3, #808	@ 0x328
 8015622:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8015626:	4413      	add	r3, r2
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	f887 337b 	strb.w	r3, [r7, #891]	@ 0x37b
			max_idx = i;
 801562e:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8015632:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
	for (int i = 1; i < 10; i ++) {
 8015636:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801563a:	3301      	adds	r3, #1
 801563c:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8015640:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8015644:	2b09      	cmp	r3, #9
 8015646:	dddb      	ble.n	8015600 <MX_X_CUBE_AI_Process+0x168>
		}
	}
	sprintf(msg, "Predicted digit : %d\r\n", max_idx);
 8015648:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 801564c:	4910      	ldr	r1, [pc, #64]	@ (8015690 <MX_X_CUBE_AI_Process+0x1f8>)
 801564e:	4811      	ldr	r0, [pc, #68]	@ (8015694 <MX_X_CUBE_AI_Process+0x1fc>)
 8015650:	f00d f928 	bl	80228a4 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8015654:	480f      	ldr	r0, [pc, #60]	@ (8015694 <MX_X_CUBE_AI_Process+0x1fc>)
 8015656:	f7fa fcf3 	bl	8010040 <strlen>
 801565a:	4603      	mov	r3, r0
 801565c:	b29a      	uxth	r2, r3
 801565e:	f04f 33ff 	mov.w	r3, #4294967295
 8015662:	490c      	ldr	r1, [pc, #48]	@ (8015694 <MX_X_CUBE_AI_Process+0x1fc>)
 8015664:	4809      	ldr	r0, [pc, #36]	@ (801568c <MX_X_CUBE_AI_Process+0x1f4>)
 8015666:	f7fe fd69 	bl	801413c <HAL_UART_Transmit>

    /* USER CODE END 6 */
}
 801566a:	f507 7761 	add.w	r7, r7, #900	@ 0x384
 801566e:	46bd      	mov	sp, r7
 8015670:	bd90      	pop	{r4, r7, pc}
 8015672:	bf00      	nop
 8015674:	080238c0 	.word	0x080238c0
 8015678:	00840440 	.word	0x00840440
 801567c:	08023838 	.word	0x08023838
 8015680:	08023848 	.word	0x08023848
 8015684:	240043a0 	.word	0x240043a0
 8015688:	24000010 	.word	0x24000010
 801568c:	24000ae0 	.word	0x24000ae0
 8015690:	08023820 	.word	0x08023820
 8015694:	24000b78 	.word	0x24000b78

08015698 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80156a2:	683a      	ldr	r2, [r7, #0]
 80156a4:	2101      	movs	r1, #1
 80156a6:	4853      	ldr	r0, [pc, #332]	@ (80157f4 <network_configure_activations+0x15c>)
 80156a8:	f000 fb70 	bl	8015d8c <ai_platform_get_activations_map>
 80156ac:	4603      	mov	r3, r0
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	f000 8096 	beq.w	80157e0 <network_configure_activations+0x148>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor_150_output_array.data = AI_PTR(g_network_activations_map[0] + 5416);
 80156b4:	4b4f      	ldr	r3, [pc, #316]	@ (80157f4 <network_configure_activations+0x15c>)
 80156b6:	681a      	ldr	r2, [r3, #0]
 80156b8:	f241 5328 	movw	r3, #5416	@ 0x1528
 80156bc:	4413      	add	r3, r2
 80156be:	4a4e      	ldr	r2, [pc, #312]	@ (80157f8 <network_configure_activations+0x160>)
 80156c0:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor_150_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5416);
 80156c2:	4b4c      	ldr	r3, [pc, #304]	@ (80157f4 <network_configure_activations+0x15c>)
 80156c4:	681a      	ldr	r2, [r3, #0]
 80156c6:	f241 5328 	movw	r3, #5416	@ 0x1528
 80156ca:	4413      	add	r3, r2
 80156cc:	4a4a      	ldr	r2, [pc, #296]	@ (80157f8 <network_configure_activations+0x160>)
 80156ce:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 6200);
 80156d0:	4b48      	ldr	r3, [pc, #288]	@ (80157f4 <network_configure_activations+0x15c>)
 80156d2:	681a      	ldr	r2, [r3, #0]
 80156d4:	f641 0338 	movw	r3, #6200	@ 0x1838
 80156d8:	4413      	add	r3, r2
 80156da:	4a48      	ldr	r2, [pc, #288]	@ (80157fc <network_configure_activations+0x164>)
 80156dc:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 6200);
 80156de:	4b45      	ldr	r3, [pc, #276]	@ (80157f4 <network_configure_activations+0x15c>)
 80156e0:	681a      	ldr	r2, [r3, #0]
 80156e2:	f641 0338 	movw	r3, #6200	@ 0x1838
 80156e6:	4413      	add	r3, r2
 80156e8:	4a44      	ldr	r2, [pc, #272]	@ (80157fc <network_configure_activations+0x164>)
 80156ea:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 7260);
 80156ec:	4b41      	ldr	r3, [pc, #260]	@ (80157f4 <network_configure_activations+0x15c>)
 80156ee:	681a      	ldr	r2, [r3, #0]
 80156f0:	f641 435c 	movw	r3, #7260	@ 0x1c5c
 80156f4:	4413      	add	r3, r2
 80156f6:	4a42      	ldr	r2, [pc, #264]	@ (8015800 <network_configure_activations+0x168>)
 80156f8:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 7260);
 80156fa:	4b3e      	ldr	r3, [pc, #248]	@ (80157f4 <network_configure_activations+0x15c>)
 80156fc:	681a      	ldr	r2, [r3, #0]
 80156fe:	f641 435c 	movw	r3, #7260	@ 0x1c5c
 8015702:	4413      	add	r3, r2
 8015704:	4a3e      	ldr	r2, [pc, #248]	@ (8015800 <network_configure_activations+0x168>)
 8015706:	60d3      	str	r3, [r2, #12]
    conv2d_0_output_array.data = AI_PTR(g_network_activations_map[0] + 320);
 8015708:	4b3a      	ldr	r3, [pc, #232]	@ (80157f4 <network_configure_activations+0x15c>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8015710:	4a3c      	ldr	r2, [pc, #240]	@ (8015804 <network_configure_activations+0x16c>)
 8015712:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 320);
 8015714:	4b37      	ldr	r3, [pc, #220]	@ (80157f4 <network_configure_activations+0x15c>)
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 801571c:	4a39      	ldr	r2, [pc, #228]	@ (8015804 <network_configure_activations+0x16c>)
 801571e:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 5728);
 8015720:	4b34      	ldr	r3, [pc, #208]	@ (80157f4 <network_configure_activations+0x15c>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	f503 53b3 	add.w	r3, r3, #5728	@ 0x1660
 8015728:	4a37      	ldr	r2, [pc, #220]	@ (8015808 <network_configure_activations+0x170>)
 801572a:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 5728);
 801572c:	4b31      	ldr	r3, [pc, #196]	@ (80157f4 <network_configure_activations+0x15c>)
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	f503 53b3 	add.w	r3, r3, #5728	@ 0x1660
 8015734:	4a34      	ldr	r2, [pc, #208]	@ (8015808 <network_configure_activations+0x170>)
 8015736:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 12896);
 8015738:	4b2e      	ldr	r3, [pc, #184]	@ (80157f4 <network_configure_activations+0x15c>)
 801573a:	681a      	ldr	r2, [r3, #0]
 801573c:	f243 2360 	movw	r3, #12896	@ 0x3260
 8015740:	4413      	add	r3, r2
 8015742:	4a32      	ldr	r2, [pc, #200]	@ (801580c <network_configure_activations+0x174>)
 8015744:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 12896);
 8015746:	4b2b      	ldr	r3, [pc, #172]	@ (80157f4 <network_configure_activations+0x15c>)
 8015748:	681a      	ldr	r2, [r3, #0]
 801574a:	f243 2360 	movw	r3, #12896	@ 0x3260
 801574e:	4413      	add	r3, r2
 8015750:	4a2e      	ldr	r2, [pc, #184]	@ (801580c <network_configure_activations+0x174>)
 8015752:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8015754:	4b27      	ldr	r3, [pc, #156]	@ (80157f4 <network_configure_activations+0x15c>)
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	4a2d      	ldr	r2, [pc, #180]	@ (8015810 <network_configure_activations+0x178>)
 801575a:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801575c:	4b25      	ldr	r3, [pc, #148]	@ (80157f4 <network_configure_activations+0x15c>)
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	4a2b      	ldr	r2, [pc, #172]	@ (8015810 <network_configure_activations+0x178>)
 8015762:	60d3      	str	r3, [r2, #12]
    gemm_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1600);
 8015764:	4b23      	ldr	r3, [pc, #140]	@ (80157f4 <network_configure_activations+0x15c>)
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 801576c:	4a29      	ldr	r2, [pc, #164]	@ (8015814 <network_configure_activations+0x17c>)
 801576e:	6093      	str	r3, [r2, #8]
    gemm_5_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1600);
 8015770:	4b20      	ldr	r3, [pc, #128]	@ (80157f4 <network_configure_activations+0x15c>)
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8015778:	4a26      	ldr	r2, [pc, #152]	@ (8015814 <network_configure_activations+0x17c>)
 801577a:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 5440);
 801577c:	4b1d      	ldr	r3, [pc, #116]	@ (80157f4 <network_configure_activations+0x15c>)
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8015784:	4a24      	ldr	r2, [pc, #144]	@ (8015818 <network_configure_activations+0x180>)
 8015786:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5440);
 8015788:	4b1a      	ldr	r3, [pc, #104]	@ (80157f4 <network_configure_activations+0x15c>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8015790:	4a21      	ldr	r2, [pc, #132]	@ (8015818 <network_configure_activations+0x180>)
 8015792:	60d3      	str	r3, [r2, #12]
    gemm_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8015794:	4b17      	ldr	r3, [pc, #92]	@ (80157f4 <network_configure_activations+0x15c>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	4a20      	ldr	r2, [pc, #128]	@ (801581c <network_configure_activations+0x184>)
 801579a:	6093      	str	r3, [r2, #8]
    gemm_6_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 801579c:	4b15      	ldr	r3, [pc, #84]	@ (80157f4 <network_configure_activations+0x15c>)
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	4a1e      	ldr	r2, [pc, #120]	@ (801581c <network_configure_activations+0x184>)
 80157a2:	60d3      	str	r3, [r2, #12]
    gemm_6_output_array.data = AI_PTR(g_network_activations_map[0] + 228);
 80157a4:	4b13      	ldr	r3, [pc, #76]	@ (80157f4 <network_configure_activations+0x15c>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	33e4      	adds	r3, #228	@ 0xe4
 80157aa:	4a1d      	ldr	r2, [pc, #116]	@ (8015820 <network_configure_activations+0x188>)
 80157ac:	6093      	str	r3, [r2, #8]
    gemm_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 228);
 80157ae:	4b11      	ldr	r3, [pc, #68]	@ (80157f4 <network_configure_activations+0x15c>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	33e4      	adds	r3, #228	@ 0xe4
 80157b4:	4a1a      	ldr	r2, [pc, #104]	@ (8015820 <network_configure_activations+0x188>)
 80157b6:	60d3      	str	r3, [r2, #12]
    nl_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 240);
 80157b8:	4b0e      	ldr	r3, [pc, #56]	@ (80157f4 <network_configure_activations+0x15c>)
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	33f0      	adds	r3, #240	@ 0xf0
 80157be:	4a19      	ldr	r2, [pc, #100]	@ (8015824 <network_configure_activations+0x18c>)
 80157c0:	6093      	str	r3, [r2, #8]
    nl_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 240);
 80157c2:	4b0c      	ldr	r3, [pc, #48]	@ (80157f4 <network_configure_activations+0x15c>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	33f0      	adds	r3, #240	@ 0xf0
 80157c8:	4a16      	ldr	r2, [pc, #88]	@ (8015824 <network_configure_activations+0x18c>)
 80157ca:	60d3      	str	r3, [r2, #12]
    nl_7_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80157cc:	4b09      	ldr	r3, [pc, #36]	@ (80157f4 <network_configure_activations+0x15c>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	4a15      	ldr	r2, [pc, #84]	@ (8015828 <network_configure_activations+0x190>)
 80157d2:	6093      	str	r3, [r2, #8]
    nl_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80157d4:	4b07      	ldr	r3, [pc, #28]	@ (80157f4 <network_configure_activations+0x15c>)
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	4a13      	ldr	r2, [pc, #76]	@ (8015828 <network_configure_activations+0x190>)
 80157da:	60d3      	str	r3, [r2, #12]
    return true;
 80157dc:	2301      	movs	r3, #1
 80157de:	e005      	b.n	80157ec <network_configure_activations+0x154>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80157e0:	2213      	movs	r2, #19
 80157e2:	2130      	movs	r1, #48	@ 0x30
 80157e4:	6878      	ldr	r0, [r7, #4]
 80157e6:	f000 fb4f 	bl	8015e88 <ai_platform_network_set_error>
  return false;
 80157ea:	2300      	movs	r3, #0
}
 80157ec:	4618      	mov	r0, r3
 80157ee:	3708      	adds	r7, #8
 80157f0:	46bd      	mov	sp, r7
 80157f2:	bd80      	pop	{r7, pc}
 80157f4:	240043ac 	.word	0x240043ac
 80157f8:	24000028 	.word	0x24000028
 80157fc:	24000108 	.word	0x24000108
 8015800:	24000118 	.word	0x24000118
 8015804:	24000038 	.word	0x24000038
 8015808:	24000128 	.word	0x24000128
 801580c:	24000138 	.word	0x24000138
 8015810:	24000048 	.word	0x24000048
 8015814:	24000148 	.word	0x24000148
 8015818:	24000058 	.word	0x24000058
 801581c:	24000158 	.word	0x24000158
 8015820:	24000068 	.word	0x24000068
 8015824:	24000168 	.word	0x24000168
 8015828:	24000078 	.word	0x24000078

0801582c <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b082      	sub	sp, #8
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
 8015834:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8015836:	683a      	ldr	r2, [r7, #0]
 8015838:	2101      	movs	r1, #1
 801583a:	4851      	ldr	r0, [pc, #324]	@ (8015980 <network_configure_weights+0x154>)
 801583c:	f000 fa4e 	bl	8015cdc <ai_platform_get_weights_map>
 8015840:	4603      	mov	r3, r0
 8015842:	2b00      	cmp	r3, #0
 8015844:	f000 8092 	beq.w	801596c <network_configure_weights+0x140>
    /* Updating weights (byte) offsets */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8015848:	4b4e      	ldr	r3, [pc, #312]	@ (8015984 <network_configure_weights+0x158>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015850:	4a4c      	ldr	r2, [pc, #304]	@ (8015984 <network_configure_weights+0x158>)
 8015852:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8015854:	4b4a      	ldr	r3, [pc, #296]	@ (8015980 <network_configure_weights+0x154>)
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	4a4a      	ldr	r2, [pc, #296]	@ (8015984 <network_configure_weights+0x158>)
 801585a:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 801585c:	4b48      	ldr	r3, [pc, #288]	@ (8015980 <network_configure_weights+0x154>)
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	4a48      	ldr	r2, [pc, #288]	@ (8015984 <network_configure_weights+0x158>)
 8015862:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8015864:	4b48      	ldr	r3, [pc, #288]	@ (8015988 <network_configure_weights+0x15c>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801586c:	4a46      	ldr	r2, [pc, #280]	@ (8015988 <network_configure_weights+0x15c>)
 801586e:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 288);
 8015870:	4b43      	ldr	r3, [pc, #268]	@ (8015980 <network_configure_weights+0x154>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8015878:	4a43      	ldr	r2, [pc, #268]	@ (8015988 <network_configure_weights+0x15c>)
 801587a:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 288);
 801587c:	4b40      	ldr	r3, [pc, #256]	@ (8015980 <network_configure_weights+0x154>)
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8015884:	4a40      	ldr	r2, [pc, #256]	@ (8015988 <network_configure_weights+0x15c>)
 8015886:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8015888:	4b40      	ldr	r3, [pc, #256]	@ (801598c <network_configure_weights+0x160>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015890:	4a3e      	ldr	r2, [pc, #248]	@ (801598c <network_configure_weights+0x160>)
 8015892:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 416);
 8015894:	4b3a      	ldr	r3, [pc, #232]	@ (8015980 <network_configure_weights+0x154>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 801589c:	4a3b      	ldr	r2, [pc, #236]	@ (801598c <network_configure_weights+0x160>)
 801589e:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 416);
 80158a0:	4b37      	ldr	r3, [pc, #220]	@ (8015980 <network_configure_weights+0x154>)
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80158a8:	4a38      	ldr	r2, [pc, #224]	@ (801598c <network_configure_weights+0x160>)
 80158aa:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80158ac:	4b38      	ldr	r3, [pc, #224]	@ (8015990 <network_configure_weights+0x164>)
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80158b4:	4a36      	ldr	r2, [pc, #216]	@ (8015990 <network_configure_weights+0x164>)
 80158b6:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 18848);
 80158b8:	4b31      	ldr	r3, [pc, #196]	@ (8015980 <network_configure_weights+0x154>)
 80158ba:	681a      	ldr	r2, [r3, #0]
 80158bc:	f644 13a0 	movw	r3, #18848	@ 0x49a0
 80158c0:	4413      	add	r3, r2
 80158c2:	4a33      	ldr	r2, [pc, #204]	@ (8015990 <network_configure_weights+0x164>)
 80158c4:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 18848);
 80158c6:	4b2e      	ldr	r3, [pc, #184]	@ (8015980 <network_configure_weights+0x154>)
 80158c8:	681a      	ldr	r2, [r3, #0]
 80158ca:	f644 13a0 	movw	r3, #18848	@ 0x49a0
 80158ce:	4413      	add	r3, r2
 80158d0:	4a2f      	ldr	r2, [pc, #188]	@ (8015990 <network_configure_weights+0x164>)
 80158d2:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 80158d4:	4b2f      	ldr	r3, [pc, #188]	@ (8015994 <network_configure_weights+0x168>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80158dc:	4a2d      	ldr	r2, [pc, #180]	@ (8015994 <network_configure_weights+0x168>)
 80158de:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 19104);
 80158e0:	4b27      	ldr	r3, [pc, #156]	@ (8015980 <network_configure_weights+0x154>)
 80158e2:	681a      	ldr	r2, [r3, #0]
 80158e4:	f644 23a0 	movw	r3, #19104	@ 0x4aa0
 80158e8:	4413      	add	r3, r2
 80158ea:	4a2a      	ldr	r2, [pc, #168]	@ (8015994 <network_configure_weights+0x168>)
 80158ec:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 19104);
 80158ee:	4b24      	ldr	r3, [pc, #144]	@ (8015980 <network_configure_weights+0x154>)
 80158f0:	681a      	ldr	r2, [r3, #0]
 80158f2:	f644 23a0 	movw	r3, #19104	@ 0x4aa0
 80158f6:	4413      	add	r3, r2
 80158f8:	4a26      	ldr	r2, [pc, #152]	@ (8015994 <network_configure_weights+0x168>)
 80158fa:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80158fc:	4b26      	ldr	r3, [pc, #152]	@ (8015998 <network_configure_weights+0x16c>)
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015904:	4a24      	ldr	r2, [pc, #144]	@ (8015998 <network_configure_weights+0x16c>)
 8015906:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 121504);
 8015908:	4b1d      	ldr	r3, [pc, #116]	@ (8015980 <network_configure_weights+0x154>)
 801590a:	681a      	ldr	r2, [r3, #0]
 801590c:	4b23      	ldr	r3, [pc, #140]	@ (801599c <network_configure_weights+0x170>)
 801590e:	4413      	add	r3, r2
 8015910:	4a21      	ldr	r2, [pc, #132]	@ (8015998 <network_configure_weights+0x16c>)
 8015912:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 121504);
 8015914:	4b1a      	ldr	r3, [pc, #104]	@ (8015980 <network_configure_weights+0x154>)
 8015916:	681a      	ldr	r2, [r3, #0]
 8015918:	4b20      	ldr	r3, [pc, #128]	@ (801599c <network_configure_weights+0x170>)
 801591a:	4413      	add	r3, r2
 801591c:	4a1e      	ldr	r2, [pc, #120]	@ (8015998 <network_configure_weights+0x16c>)
 801591e:	60d3      	str	r3, [r2, #12]
    gemm_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8015920:	4b1f      	ldr	r3, [pc, #124]	@ (80159a0 <network_configure_weights+0x174>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015928:	4a1d      	ldr	r2, [pc, #116]	@ (80159a0 <network_configure_weights+0x174>)
 801592a:	6013      	str	r3, [r2, #0]
    gemm_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 121760);
 801592c:	4b14      	ldr	r3, [pc, #80]	@ (8015980 <network_configure_weights+0x154>)
 801592e:	681a      	ldr	r2, [r3, #0]
 8015930:	4b1c      	ldr	r3, [pc, #112]	@ (80159a4 <network_configure_weights+0x178>)
 8015932:	4413      	add	r3, r2
 8015934:	4a1a      	ldr	r2, [pc, #104]	@ (80159a0 <network_configure_weights+0x174>)
 8015936:	6093      	str	r3, [r2, #8]
    gemm_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 121760);
 8015938:	4b11      	ldr	r3, [pc, #68]	@ (8015980 <network_configure_weights+0x154>)
 801593a:	681a      	ldr	r2, [r3, #0]
 801593c:	4b19      	ldr	r3, [pc, #100]	@ (80159a4 <network_configure_weights+0x178>)
 801593e:	4413      	add	r3, r2
 8015940:	4a17      	ldr	r2, [pc, #92]	@ (80159a0 <network_configure_weights+0x174>)
 8015942:	60d3      	str	r3, [r2, #12]
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8015944:	4b18      	ldr	r3, [pc, #96]	@ (80159a8 <network_configure_weights+0x17c>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801594c:	4a16      	ldr	r2, [pc, #88]	@ (80159a8 <network_configure_weights+0x17c>)
 801594e:	6013      	str	r3, [r2, #0]
    gemm_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 122400);
 8015950:	4b0b      	ldr	r3, [pc, #44]	@ (8015980 <network_configure_weights+0x154>)
 8015952:	681a      	ldr	r2, [r3, #0]
 8015954:	4b15      	ldr	r3, [pc, #84]	@ (80159ac <network_configure_weights+0x180>)
 8015956:	4413      	add	r3, r2
 8015958:	4a13      	ldr	r2, [pc, #76]	@ (80159a8 <network_configure_weights+0x17c>)
 801595a:	6093      	str	r3, [r2, #8]
    gemm_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 122400);
 801595c:	4b08      	ldr	r3, [pc, #32]	@ (8015980 <network_configure_weights+0x154>)
 801595e:	681a      	ldr	r2, [r3, #0]
 8015960:	4b12      	ldr	r3, [pc, #72]	@ (80159ac <network_configure_weights+0x180>)
 8015962:	4413      	add	r3, r2
 8015964:	4a10      	ldr	r2, [pc, #64]	@ (80159a8 <network_configure_weights+0x17c>)
 8015966:	60d3      	str	r3, [r2, #12]
    return true;
 8015968:	2301      	movs	r3, #1
 801596a:	e005      	b.n	8015978 <network_configure_weights+0x14c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 801596c:	2212      	movs	r2, #18
 801596e:	2130      	movs	r1, #48	@ 0x30
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	f000 fa89 	bl	8015e88 <ai_platform_network_set_error>
  return false;
 8015976:	2300      	movs	r3, #0
}
 8015978:	4618      	mov	r0, r3
 801597a:	3708      	adds	r7, #8
 801597c:	46bd      	mov	sp, r7
 801597e:	bd80      	pop	{r7, pc}
 8015980:	240043b0 	.word	0x240043b0
 8015984:	24000088 	.word	0x24000088
 8015988:	24000098 	.word	0x24000098
 801598c:	240000a8 	.word	0x240000a8
 8015990:	240000b8 	.word	0x240000b8
 8015994:	240000c8 	.word	0x240000c8
 8015998:	240000d8 	.word	0x240000d8
 801599c:	0001daa0 	.word	0x0001daa0
 80159a0:	240000e8 	.word	0x240000e8
 80159a4:	0001dba0 	.word	0x0001dba0
 80159a8:	240000f8 	.word	0x240000f8
 80159ac:	0001de20 	.word	0x0001de20

080159b0 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b082      	sub	sp, #8
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f000 fa59 	bl	8015e70 <ai_platform_network_get_error>
 80159be:	4603      	mov	r3, r0
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3708      	adds	r7, #8
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}

080159c8 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b084      	sub	sp, #16
 80159cc:	af02      	add	r7, sp, #8
 80159ce:	6078      	str	r0, [r7, #4]
 80159d0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80159d2:	2300      	movs	r3, #0
 80159d4:	9301      	str	r3, [sp, #4]
 80159d6:	2305      	movs	r3, #5
 80159d8:	9300      	str	r3, [sp, #0]
 80159da:	2301      	movs	r3, #1
 80159dc:	4a04      	ldr	r2, [pc, #16]	@ (80159f0 <ai_network_create+0x28>)
 80159de:	6839      	ldr	r1, [r7, #0]
 80159e0:	6878      	ldr	r0, [r7, #4]
 80159e2:	f000 fb45 	bl	8016070 <ai_platform_network_create>
 80159e6:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80159e8:	4618      	mov	r0, r3
 80159ea:	3708      	adds	r7, #8
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bd80      	pop	{r7, pc}
 80159f0:	240009a8 	.word	0x240009a8

080159f4 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b094      	sub	sp, #80	@ 0x50
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	60f8      	str	r0, [r7, #12]
 80159fc:	60b9      	str	r1, [r7, #8]
 80159fe:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8015a00:	2100      	movs	r1, #0
 8015a02:	68f8      	ldr	r0, [r7, #12]
 8015a04:	f7ff ffe0 	bl	80159c8 <ai_network_create>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8015a0c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d001      	beq.n	8015a18 <ai_network_create_and_init+0x24>
    return err;
 8015a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015a16:	e067      	b.n	8015ae8 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 8015a18:	f107 0310 	add.w	r3, r7, #16
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f000 f8e7 	bl	8015bf0 <ai_network_data_params_get>
 8015a22:	4603      	mov	r3, r0
 8015a24:	f083 0301 	eor.w	r3, r3, #1
 8015a28:	b2db      	uxtb	r3, r3
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d008      	beq.n	8015a40 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7ff ffbc 	bl	80159b0 <ai_network_get_error>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8015a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015a3e:	e053      	b.n	8015ae8 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8015a40:	2300      	movs	r3, #0
 8015a42:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8015a46:	e012      	b.n	8015a6e <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8015a48:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8015a4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015a50:	009b      	lsls	r3, r3, #2
 8015a52:	68ba      	ldr	r2, [r7, #8]
 8015a54:	4413      	add	r3, r2
 8015a56:	681a      	ldr	r2, [r3, #0]
 8015a58:	f107 0310 	add.w	r3, r7, #16
 8015a5c:	330c      	adds	r3, #12
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f000 f92c 	bl	8015cbc <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8015a64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015a68:	3301      	adds	r3, #1
 8015a6a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8015a6e:	68bb      	ldr	r3, [r7, #8]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d004      	beq.n	8015a7e <ai_network_create_and_init+0x8a>
 8015a74:	8bfb      	ldrh	r3, [r7, #30]
 8015a76:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d3e4      	bcc.n	8015a48 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8015a7e:	2300      	movs	r3, #0
 8015a80:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8015a84:	e012      	b.n	8015aac <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8015a86:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8015a8a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8015a8e:	009b      	lsls	r3, r3, #2
 8015a90:	687a      	ldr	r2, [r7, #4]
 8015a92:	4413      	add	r3, r2
 8015a94:	681a      	ldr	r2, [r3, #0]
 8015a96:	f107 0310 	add.w	r3, r7, #16
 8015a9a:	3304      	adds	r3, #4
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f000 f90d 	bl	8015cbc <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8015aa2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8015aa6:	3301      	adds	r3, #1
 8015aa8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d004      	beq.n	8015abc <ai_network_create_and_init+0xc8>
 8015ab2:	8afb      	ldrh	r3, [r7, #22]
 8015ab4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	d3e4      	bcc.n	8015a86 <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	f107 0210 	add.w	r2, r7, #16
 8015ac4:	4611      	mov	r1, r2
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f000 f846 	bl	8015b58 <ai_network_init>
 8015acc:	4603      	mov	r3, r0
 8015ace:	f083 0301 	eor.w	r3, r3, #1
 8015ad2:	b2db      	uxtb	r3, r3
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d006      	beq.n	8015ae6 <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7ff ff67 	bl	80159b0 <ai_network_get_error>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8015ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3750      	adds	r7, #80	@ 0x50
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}

08015af0 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b082      	sub	sp, #8
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
 8015af8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d104      	bne.n	8015b0a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8015b00:	4b06      	ldr	r3, [pc, #24]	@ (8015b1c <ai_network_inputs_get+0x2c>)
 8015b02:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	4a06      	ldr	r2, [pc, #24]	@ (8015b20 <ai_network_inputs_get+0x30>)
 8015b08:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8015b0a:	6839      	ldr	r1, [r7, #0]
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	f000 f9c1 	bl	8015e94 <ai_platform_inputs_get>
 8015b12:	4603      	mov	r3, r0
}
 8015b14:	4618      	mov	r0, r3
 8015b16:	3708      	adds	r7, #8
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}
 8015b1c:	240009a8 	.word	0x240009a8
 8015b20:	a1c00100 	.word	0xa1c00100

08015b24 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b082      	sub	sp, #8
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d104      	bne.n	8015b3e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8015b34:	4b06      	ldr	r3, [pc, #24]	@ (8015b50 <ai_network_outputs_get+0x2c>)
 8015b36:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	4a06      	ldr	r2, [pc, #24]	@ (8015b54 <ai_network_outputs_get+0x30>)
 8015b3c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8015b3e:	6839      	ldr	r1, [r7, #0]
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f000 fa1f 	bl	8015f84 <ai_platform_outputs_get>
 8015b46:	4603      	mov	r3, r0
}
 8015b48:	4618      	mov	r0, r3
 8015b4a:	3708      	adds	r7, #8
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}
 8015b50:	240009a8 	.word	0x240009a8
 8015b54:	a1c00100 	.word	0xa1c00100

08015b58 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b084      	sub	sp, #16
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
 8015b60:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8015b62:	6839      	ldr	r1, [r7, #0]
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	f000 fac5 	bl	80160f4 <ai_platform_network_init>
 8015b6a:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8015b6c:	2301      	movs	r3, #1
 8015b6e:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d101      	bne.n	8015b7a <ai_network_init+0x22>
 8015b76:	2300      	movs	r3, #0
 8015b78:	e026      	b.n	8015bc8 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 8015b7a:	6839      	ldr	r1, [r7, #0]
 8015b7c:	68f8      	ldr	r0, [r7, #12]
 8015b7e:	f7ff fe55 	bl	801582c <network_configure_weights>
 8015b82:	4603      	mov	r3, r0
 8015b84:	461a      	mov	r2, r3
 8015b86:	7afb      	ldrb	r3, [r7, #11]
 8015b88:	4013      	ands	r3, r2
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	bf14      	ite	ne
 8015b8e:	2301      	movne	r3, #1
 8015b90:	2300      	moveq	r3, #0
 8015b92:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8015b94:	6839      	ldr	r1, [r7, #0]
 8015b96:	68f8      	ldr	r0, [r7, #12]
 8015b98:	f7ff fd7e 	bl	8015698 <network_configure_activations>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	461a      	mov	r2, r3
 8015ba0:	7afb      	ldrb	r3, [r7, #11]
 8015ba2:	4013      	ands	r3, r2
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	bf14      	ite	ne
 8015ba8:	2301      	movne	r3, #1
 8015baa:	2300      	moveq	r3, #0
 8015bac:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8015bae:	6878      	ldr	r0, [r7, #4]
 8015bb0:	f000 fb60 	bl	8016274 <ai_platform_network_post_init>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	461a      	mov	r2, r3
 8015bb8:	7afb      	ldrb	r3, [r7, #11]
 8015bba:	4013      	ands	r3, r2
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	bf14      	ite	ne
 8015bc0:	2301      	movne	r3, #1
 8015bc2:	2300      	moveq	r3, #0
 8015bc4:	72fb      	strb	r3, [r7, #11]

  return ok;
 8015bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3710      	adds	r7, #16
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}

08015bd0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b084      	sub	sp, #16
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	60f8      	str	r0, [r7, #12]
 8015bd8:	60b9      	str	r1, [r7, #8]
 8015bda:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8015bdc:	687a      	ldr	r2, [r7, #4]
 8015bde:	68b9      	ldr	r1, [r7, #8]
 8015be0:	68f8      	ldr	r0, [r7, #12]
 8015be2:	f000 fb77 	bl	80162d4 <ai_platform_network_process>
 8015be6:	4603      	mov	r3, r0
}
 8015be8:	4618      	mov	r0, r3
 8015bea:	3710      	adds	r7, #16
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}

08015bf0 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b086      	sub	sp, #24
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d101      	bne.n	8015c02 <ai_network_data_params_get+0x12>
 8015bfe:	2300      	movs	r3, #0
 8015c00:	e016      	b.n	8015c30 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8015c02:	4a0d      	ldr	r2, [pc, #52]	@ (8015c38 <ai_network_data_params_get+0x48>)
 8015c04:	f107 0310 	add.w	r3, r7, #16
 8015c08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015c0c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8015c10:	4a0a      	ldr	r2, [pc, #40]	@ (8015c3c <ai_network_data_params_get+0x4c>)
 8015c12:	f107 0308 	add.w	r3, r7, #8
 8015c16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015c1a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8015c1e:	f107 0210 	add.w	r2, r7, #16
 8015c22:	f107 0308 	add.w	r3, r7, #8
 8015c26:	4619      	mov	r1, r3
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f000 f907 	bl	8015e3c <ai_platform_bind_network_params>
 8015c2e:	4603      	mov	r3, r0
}
 8015c30:	4618      	mov	r0, r3
 8015c32:	3718      	adds	r7, #24
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}
 8015c38:	08023878 	.word	0x08023878
 8015c3c:	08023880 	.word	0x08023880

08015c40 <ai_buffer_get_size>:
 8015c40:	b368      	cbz	r0, 8015c9e <ai_buffer_get_size+0x5e>
 8015c42:	4b17      	ldr	r3, [pc, #92]	@ (8015ca0 <ai_buffer_get_size+0x60>)
 8015c44:	4a17      	ldr	r2, [pc, #92]	@ (8015ca4 <ai_buffer_get_size+0x64>)
 8015c46:	b410      	push	{r4}
 8015c48:	6804      	ldr	r4, [r0, #0]
 8015c4a:	4023      	ands	r3, r4
 8015c4c:	4293      	cmp	r3, r2
 8015c4e:	d123      	bne.n	8015c98 <ai_buffer_get_size+0x58>
 8015c50:	b311      	cbz	r1, 8015c98 <ai_buffer_get_size+0x58>
 8015c52:	6984      	ldr	r4, [r0, #24]
 8015c54:	6862      	ldr	r2, [r4, #4]
 8015c56:	321f      	adds	r2, #31
 8015c58:	f022 021f 	bic.w	r2, r2, #31
 8015c5c:	7d03      	ldrb	r3, [r0, #20]
 8015c5e:	6941      	ldr	r1, [r0, #20]
 8015c60:	f1a3 0301 	sub.w	r3, r3, #1
 8015c64:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8015c68:	fab3 f383 	clz	r3, r3
 8015c6c:	095b      	lsrs	r3, r3, #5
 8015c6e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8015c72:	da0c      	bge.n	8015c8e <ai_buffer_get_size+0x4e>
 8015c74:	2b01      	cmp	r3, #1
 8015c76:	d103      	bne.n	8015c80 <ai_buffer_get_size+0x40>
 8015c78:	2802      	cmp	r0, #2
 8015c7a:	f04f 0302 	mov.w	r3, #2
 8015c7e:	d006      	beq.n	8015c8e <ai_buffer_get_size+0x4e>
 8015c80:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8015c84:	3301      	adds	r3, #1
 8015c86:	4298      	cmp	r0, r3
 8015c88:	fb01 f202 	mul.w	r2, r1, r2
 8015c8c:	d1f2      	bne.n	8015c74 <ai_buffer_get_size+0x34>
 8015c8e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8015c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c96:	4770      	bx	lr
 8015c98:	6984      	ldr	r4, [r0, #24]
 8015c9a:	6862      	ldr	r2, [r4, #4]
 8015c9c:	e7de      	b.n	8015c5c <ai_buffer_get_size+0x1c>
 8015c9e:	4770      	bx	lr
 8015ca0:	017fffff 	.word	0x017fffff
 8015ca4:	000400c0 	.word	0x000400c0

08015ca8 <ai_buffer_array_sane>:
 8015ca8:	b138      	cbz	r0, 8015cba <ai_buffer_array_sane+0x12>
 8015caa:	6843      	ldr	r3, [r0, #4]
 8015cac:	b123      	cbz	r3, 8015cb8 <ai_buffer_array_sane+0x10>
 8015cae:	8840      	ldrh	r0, [r0, #2]
 8015cb0:	3800      	subs	r0, #0
 8015cb2:	bf18      	it	ne
 8015cb4:	2001      	movne	r0, #1
 8015cb6:	4770      	bx	lr
 8015cb8:	4618      	mov	r0, r3
 8015cba:	4770      	bx	lr

08015cbc <ai_buffer_array_item_set_address>:
 8015cbc:	b150      	cbz	r0, 8015cd4 <ai_buffer_array_item_set_address+0x18>
 8015cbe:	6843      	ldr	r3, [r0, #4]
 8015cc0:	b14b      	cbz	r3, 8015cd6 <ai_buffer_array_item_set_address+0x1a>
 8015cc2:	8840      	ldrh	r0, [r0, #2]
 8015cc4:	b900      	cbnz	r0, 8015cc8 <ai_buffer_array_item_set_address+0xc>
 8015cc6:	4770      	bx	lr
 8015cc8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8015ccc:	2001      	movs	r0, #1
 8015cce:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8015cd2:	605a      	str	r2, [r3, #4]
 8015cd4:	4770      	bx	lr
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	4770      	bx	lr
 8015cda:	bf00      	nop

08015cdc <ai_platform_get_weights_map>:
 8015cdc:	2900      	cmp	r1, #0
 8015cde:	bf18      	it	ne
 8015ce0:	2800      	cmpne	r0, #0
 8015ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ce4:	bf0c      	ite	eq
 8015ce6:	2401      	moveq	r4, #1
 8015ce8:	2400      	movne	r4, #0
 8015cea:	2a00      	cmp	r2, #0
 8015cec:	bf08      	it	eq
 8015cee:	f044 0401 	orreq.w	r4, r4, #1
 8015cf2:	b114      	cbz	r4, 8015cfa <ai_platform_get_weights_map+0x1e>
 8015cf4:	2400      	movs	r4, #0
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cfa:	4616      	mov	r6, r2
 8015cfc:	4b22      	ldr	r3, [pc, #136]	@ (8015d88 <ai_platform_get_weights_map+0xac>)
 8015cfe:	6812      	ldr	r2, [r2, #0]
 8015d00:	4605      	mov	r5, r0
 8015d02:	460f      	mov	r7, r1
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d022      	beq.n	8015d4e <ai_platform_get_weights_map+0x72>
 8015d08:	6870      	ldr	r0, [r6, #4]
 8015d0a:	2800      	cmp	r0, #0
 8015d0c:	d0f2      	beq.n	8015cf4 <ai_platform_get_weights_map+0x18>
 8015d0e:	6806      	ldr	r6, [r0, #0]
 8015d10:	429e      	cmp	r6, r3
 8015d12:	d006      	beq.n	8015d22 <ai_platform_get_weights_map+0x46>
 8015d14:	f1a1 0401 	sub.w	r4, r1, #1
 8015d18:	6028      	str	r0, [r5, #0]
 8015d1a:	fab4 f484 	clz	r4, r4
 8015d1e:	0964      	lsrs	r4, r4, #5
 8015d20:	e7e9      	b.n	8015cf6 <ai_platform_get_weights_map+0x1a>
 8015d22:	3d04      	subs	r5, #4
 8015d24:	4602      	mov	r2, r0
 8015d26:	4621      	mov	r1, r4
 8015d28:	e000      	b.n	8015d2c <ai_platform_get_weights_map+0x50>
 8015d2a:	4619      	mov	r1, r3
 8015d2c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8015d30:	42b3      	cmp	r3, r6
 8015d32:	d025      	beq.n	8015d80 <ai_platform_get_weights_map+0xa4>
 8015d34:	f845 3f04 	str.w	r3, [r5, #4]!
 8015d38:	1c4b      	adds	r3, r1, #1
 8015d3a:	429f      	cmp	r7, r3
 8015d3c:	d8f5      	bhi.n	8015d2a <ai_platform_get_weights_map+0x4e>
 8015d3e:	d1da      	bne.n	8015cf6 <ai_platform_get_weights_map+0x1a>
 8015d40:	3102      	adds	r1, #2
 8015d42:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8015d46:	42b3      	cmp	r3, r6
 8015d48:	d1d5      	bne.n	8015cf6 <ai_platform_get_weights_map+0x1a>
 8015d4a:	2401      	movs	r4, #1
 8015d4c:	e7d3      	b.n	8015cf6 <ai_platform_get_weights_map+0x1a>
 8015d4e:	1d30      	adds	r0, r6, #4
 8015d50:	f7ff ffaa 	bl	8015ca8 <ai_buffer_array_sane>
 8015d54:	2800      	cmp	r0, #0
 8015d56:	d0cd      	beq.n	8015cf4 <ai_platform_get_weights_map+0x18>
 8015d58:	88f3      	ldrh	r3, [r6, #6]
 8015d5a:	429f      	cmp	r7, r3
 8015d5c:	d1ca      	bne.n	8015cf4 <ai_platform_get_weights_map+0x18>
 8015d5e:	3d04      	subs	r5, #4
 8015d60:	4622      	mov	r2, r4
 8015d62:	68b3      	ldr	r3, [r6, #8]
 8015d64:	4423      	add	r3, r4
 8015d66:	341c      	adds	r4, #28
 8015d68:	685b      	ldr	r3, [r3, #4]
 8015d6a:	b123      	cbz	r3, 8015d76 <ai_platform_get_weights_map+0x9a>
 8015d6c:	3201      	adds	r2, #1
 8015d6e:	f845 3f04 	str.w	r3, [r5, #4]!
 8015d72:	4297      	cmp	r7, r2
 8015d74:	d8f5      	bhi.n	8015d62 <ai_platform_get_weights_map+0x86>
 8015d76:	1abc      	subs	r4, r7, r2
 8015d78:	fab4 f484 	clz	r4, r4
 8015d7c:	0964      	lsrs	r4, r4, #5
 8015d7e:	e7ba      	b.n	8015cf6 <ai_platform_get_weights_map+0x1a>
 8015d80:	428f      	cmp	r7, r1
 8015d82:	d1b8      	bne.n	8015cf6 <ai_platform_get_weights_map+0x1a>
 8015d84:	e7e1      	b.n	8015d4a <ai_platform_get_weights_map+0x6e>
 8015d86:	bf00      	nop
 8015d88:	a1facade 	.word	0xa1facade

08015d8c <ai_platform_get_activations_map>:
 8015d8c:	2900      	cmp	r1, #0
 8015d8e:	bf18      	it	ne
 8015d90:	2800      	cmpne	r0, #0
 8015d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d94:	bf0c      	ite	eq
 8015d96:	2401      	moveq	r4, #1
 8015d98:	2400      	movne	r4, #0
 8015d9a:	2a00      	cmp	r2, #0
 8015d9c:	bf08      	it	eq
 8015d9e:	f044 0401 	orreq.w	r4, r4, #1
 8015da2:	b114      	cbz	r4, 8015daa <ai_platform_get_activations_map+0x1e>
 8015da4:	2400      	movs	r4, #0
 8015da6:	4620      	mov	r0, r4
 8015da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015daa:	4616      	mov	r6, r2
 8015dac:	4b22      	ldr	r3, [pc, #136]	@ (8015e38 <ai_platform_get_activations_map+0xac>)
 8015dae:	6812      	ldr	r2, [r2, #0]
 8015db0:	4605      	mov	r5, r0
 8015db2:	460f      	mov	r7, r1
 8015db4:	429a      	cmp	r2, r3
 8015db6:	d022      	beq.n	8015dfe <ai_platform_get_activations_map+0x72>
 8015db8:	6a30      	ldr	r0, [r6, #32]
 8015dba:	2800      	cmp	r0, #0
 8015dbc:	d0f2      	beq.n	8015da4 <ai_platform_get_activations_map+0x18>
 8015dbe:	6806      	ldr	r6, [r0, #0]
 8015dc0:	429e      	cmp	r6, r3
 8015dc2:	d006      	beq.n	8015dd2 <ai_platform_get_activations_map+0x46>
 8015dc4:	f1a1 0401 	sub.w	r4, r1, #1
 8015dc8:	6028      	str	r0, [r5, #0]
 8015dca:	fab4 f484 	clz	r4, r4
 8015dce:	0964      	lsrs	r4, r4, #5
 8015dd0:	e7e9      	b.n	8015da6 <ai_platform_get_activations_map+0x1a>
 8015dd2:	3d04      	subs	r5, #4
 8015dd4:	4602      	mov	r2, r0
 8015dd6:	4621      	mov	r1, r4
 8015dd8:	e000      	b.n	8015ddc <ai_platform_get_activations_map+0x50>
 8015dda:	4619      	mov	r1, r3
 8015ddc:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8015de0:	42b3      	cmp	r3, r6
 8015de2:	d026      	beq.n	8015e32 <ai_platform_get_activations_map+0xa6>
 8015de4:	f845 3f04 	str.w	r3, [r5, #4]!
 8015de8:	1c4b      	adds	r3, r1, #1
 8015dea:	429f      	cmp	r7, r3
 8015dec:	d8f5      	bhi.n	8015dda <ai_platform_get_activations_map+0x4e>
 8015dee:	d1da      	bne.n	8015da6 <ai_platform_get_activations_map+0x1a>
 8015df0:	3102      	adds	r1, #2
 8015df2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8015df6:	42b3      	cmp	r3, r6
 8015df8:	d1d5      	bne.n	8015da6 <ai_platform_get_activations_map+0x1a>
 8015dfa:	2401      	movs	r4, #1
 8015dfc:	e7d3      	b.n	8015da6 <ai_platform_get_activations_map+0x1a>
 8015dfe:	f106 000c 	add.w	r0, r6, #12
 8015e02:	f7ff ff51 	bl	8015ca8 <ai_buffer_array_sane>
 8015e06:	2800      	cmp	r0, #0
 8015e08:	d0cc      	beq.n	8015da4 <ai_platform_get_activations_map+0x18>
 8015e0a:	89f3      	ldrh	r3, [r6, #14]
 8015e0c:	429f      	cmp	r7, r3
 8015e0e:	d1c9      	bne.n	8015da4 <ai_platform_get_activations_map+0x18>
 8015e10:	3d04      	subs	r5, #4
 8015e12:	4622      	mov	r2, r4
 8015e14:	6933      	ldr	r3, [r6, #16]
 8015e16:	4423      	add	r3, r4
 8015e18:	341c      	adds	r4, #28
 8015e1a:	685b      	ldr	r3, [r3, #4]
 8015e1c:	b123      	cbz	r3, 8015e28 <ai_platform_get_activations_map+0x9c>
 8015e1e:	3201      	adds	r2, #1
 8015e20:	f845 3f04 	str.w	r3, [r5, #4]!
 8015e24:	4297      	cmp	r7, r2
 8015e26:	d8f5      	bhi.n	8015e14 <ai_platform_get_activations_map+0x88>
 8015e28:	1abc      	subs	r4, r7, r2
 8015e2a:	fab4 f484 	clz	r4, r4
 8015e2e:	0964      	lsrs	r4, r4, #5
 8015e30:	e7b9      	b.n	8015da6 <ai_platform_get_activations_map+0x1a>
 8015e32:	428f      	cmp	r7, r1
 8015e34:	d1b7      	bne.n	8015da6 <ai_platform_get_activations_map+0x1a>
 8015e36:	e7e0      	b.n	8015dfa <ai_platform_get_activations_map+0x6e>
 8015e38:	a1facade 	.word	0xa1facade

08015e3c <ai_platform_bind_network_params>:
 8015e3c:	2a00      	cmp	r2, #0
 8015e3e:	bf18      	it	ne
 8015e40:	2900      	cmpne	r1, #0
 8015e42:	d010      	beq.n	8015e66 <ai_platform_bind_network_params+0x2a>
 8015e44:	b178      	cbz	r0, 8015e66 <ai_platform_bind_network_params+0x2a>
 8015e46:	4603      	mov	r3, r0
 8015e48:	4808      	ldr	r0, [pc, #32]	@ (8015e6c <ai_platform_bind_network_params+0x30>)
 8015e4a:	f103 0c0c 	add.w	ip, r3, #12
 8015e4e:	f843 0b04 	str.w	r0, [r3], #4
 8015e52:	c903      	ldmia	r1, {r0, r1}
 8015e54:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e58:	2301      	movs	r3, #1
 8015e5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e5e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015e62:	4618      	mov	r0, r3
 8015e64:	4770      	bx	lr
 8015e66:	2300      	movs	r3, #0
 8015e68:	4618      	mov	r0, r3
 8015e6a:	4770      	bx	lr
 8015e6c:	a1facade 	.word	0xa1facade

08015e70 <ai_platform_network_get_error>:
 8015e70:	4b04      	ldr	r3, [pc, #16]	@ (8015e84 <ai_platform_network_get_error+0x14>)
 8015e72:	6802      	ldr	r2, [r0, #0]
 8015e74:	4393      	bics	r3, r2
 8015e76:	d102      	bne.n	8015e7e <ai_platform_network_get_error+0xe>
 8015e78:	300c      	adds	r0, #12
 8015e7a:	f000 bc73 	b.w	8016764 <core_get_error>
 8015e7e:	f241 0010 	movw	r0, #4112	@ 0x1010
 8015e82:	4770      	bx	lr
 8015e84:	a1c00100 	.word	0xa1c00100

08015e88 <ai_platform_network_set_error>:
 8015e88:	b110      	cbz	r0, 8015e90 <ai_platform_network_set_error+0x8>
 8015e8a:	300c      	adds	r0, #12
 8015e8c:	f000 bc70 	b.w	8016770 <core_set_error>
 8015e90:	4770      	bx	lr
 8015e92:	bf00      	nop

08015e94 <ai_platform_inputs_get>:
 8015e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e98:	4b39      	ldr	r3, [pc, #228]	@ (8015f80 <ai_platform_inputs_get+0xec>)
 8015e9a:	b085      	sub	sp, #20
 8015e9c:	6802      	ldr	r2, [r0, #0]
 8015e9e:	4393      	bics	r3, r2
 8015ea0:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8015ea4:	d162      	bne.n	8015f6c <ai_platform_inputs_get+0xd8>
 8015ea6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d051      	beq.n	8015f50 <ai_platform_inputs_get+0xbc>
 8015eac:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8015eb0:	f1ba 0f00 	cmp.w	sl, #0
 8015eb4:	d04c      	beq.n	8015f50 <ai_platform_inputs_get+0xbc>
 8015eb6:	f04f 0900 	mov.w	r9, #0
 8015eba:	464d      	mov	r5, r9
 8015ebc:	e016      	b.n	8015eec <ai_platform_inputs_get+0x58>
 8015ebe:	9901      	ldr	r1, [sp, #4]
 8015ec0:	2301      	movs	r3, #1
 8015ec2:	f848 3001 	str.w	r3, [r8, r1]
 8015ec6:	69b1      	ldr	r1, [r6, #24]
 8015ec8:	f04f 0301 	mov.w	r3, #1
 8015ecc:	684e      	ldr	r6, [r1, #4]
 8015ece:	3501      	adds	r5, #1
 8015ed0:	f109 091c 	add.w	r9, r9, #28
 8015ed4:	7523      	strb	r3, [r4, #20]
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	6961      	ldr	r1, [r4, #20]
 8015eda:	6020      	str	r0, [r4, #0]
 8015edc:	f36b 211f 	bfi	r1, fp, #8, #24
 8015ee0:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8015ee4:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8015ee8:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8015eec:	f8ba 3000 	ldrh.w	r3, [sl]
 8015ef0:	b2ac      	uxth	r4, r5
 8015ef2:	42ab      	cmp	r3, r5
 8015ef4:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8015ef8:	9301      	str	r3, [sp, #4]
 8015efa:	d93b      	bls.n	8015f74 <ai_platform_inputs_get+0xe0>
 8015efc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d037      	beq.n	8015f74 <ai_platform_inputs_get+0xe0>
 8015f04:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8015f08:	2e00      	cmp	r6, #0
 8015f0a:	d033      	beq.n	8015f74 <ai_platform_inputs_get+0xe0>
 8015f0c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8015f10:	69b2      	ldr	r2, [r6, #24]
 8015f12:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8015f16:	6810      	ldr	r0, [r2, #0]
 8015f18:	68b3      	ldr	r3, [r6, #8]
 8015f1a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8015f1e:	68f2      	ldr	r2, [r6, #12]
 8015f20:	444c      	add	r4, r9
 8015f22:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8015f26:	9200      	str	r2, [sp, #0]
 8015f28:	f00a ffc2 	bl	8020eb0 <ai_array_to_buffer_fmt>
 8015f2c:	69b1      	ldr	r1, [r6, #24]
 8015f2e:	9a00      	ldr	r2, [sp, #0]
 8015f30:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8015f34:	2f00      	cmp	r7, #0
 8015f36:	d0c7      	beq.n	8015ec8 <ai_platform_inputs_get+0x34>
 8015f38:	2100      	movs	r1, #0
 8015f3a:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8015f3e:	6831      	ldr	r1, [r6, #0]
 8015f40:	6079      	str	r1, [r7, #4]
 8015f42:	b111      	cbz	r1, 8015f4a <ai_platform_inputs_get+0xb6>
 8015f44:	8849      	ldrh	r1, [r1, #2]
 8015f46:	2900      	cmp	r1, #0
 8015f48:	d1b9      	bne.n	8015ebe <ai_platform_inputs_get+0x2a>
 8015f4a:	69b1      	ldr	r1, [r6, #24]
 8015f4c:	2700      	movs	r7, #0
 8015f4e:	e7bb      	b.n	8015ec8 <ai_platform_inputs_get+0x34>
 8015f50:	9803      	ldr	r0, [sp, #12]
 8015f52:	2400      	movs	r4, #0
 8015f54:	2218      	movs	r2, #24
 8015f56:	2111      	movs	r1, #17
 8015f58:	300c      	adds	r0, #12
 8015f5a:	f000 fc09 	bl	8016770 <core_set_error>
 8015f5e:	4620      	mov	r0, r4
 8015f60:	9b02      	ldr	r3, [sp, #8]
 8015f62:	b103      	cbz	r3, 8015f66 <ai_platform_inputs_get+0xd2>
 8015f64:	801c      	strh	r4, [r3, #0]
 8015f66:	b005      	add	sp, #20
 8015f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f6c:	2000      	movs	r0, #0
 8015f6e:	b005      	add	sp, #20
 8015f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f74:	2c00      	cmp	r4, #0
 8015f76:	d0eb      	beq.n	8015f50 <ai_platform_inputs_get+0xbc>
 8015f78:	f8da 3008 	ldr.w	r3, [sl, #8]
 8015f7c:	6858      	ldr	r0, [r3, #4]
 8015f7e:	e7ef      	b.n	8015f60 <ai_platform_inputs_get+0xcc>
 8015f80:	a1c00100 	.word	0xa1c00100

08015f84 <ai_platform_outputs_get>:
 8015f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f88:	4b38      	ldr	r3, [pc, #224]	@ (801606c <ai_platform_outputs_get+0xe8>)
 8015f8a:	b085      	sub	sp, #20
 8015f8c:	6802      	ldr	r2, [r0, #0]
 8015f8e:	4393      	bics	r3, r2
 8015f90:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8015f94:	d15f      	bne.n	8016056 <ai_platform_outputs_get+0xd2>
 8015f96:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8015f98:	2b01      	cmp	r3, #1
 8015f9a:	d94e      	bls.n	801603a <ai_platform_outputs_get+0xb6>
 8015f9c:	f04f 0900 	mov.w	r9, #0
 8015fa0:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8015fa4:	464d      	mov	r5, r9
 8015fa6:	e016      	b.n	8015fd6 <ai_platform_outputs_get+0x52>
 8015fa8:	9901      	ldr	r1, [sp, #4]
 8015faa:	2301      	movs	r3, #1
 8015fac:	f848 3001 	str.w	r3, [r8, r1]
 8015fb0:	69b1      	ldr	r1, [r6, #24]
 8015fb2:	f04f 0301 	mov.w	r3, #1
 8015fb6:	684e      	ldr	r6, [r1, #4]
 8015fb8:	3501      	adds	r5, #1
 8015fba:	f109 091c 	add.w	r9, r9, #28
 8015fbe:	7523      	strb	r3, [r4, #20]
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	6961      	ldr	r1, [r4, #20]
 8015fc4:	6020      	str	r0, [r4, #0]
 8015fc6:	f36b 211f 	bfi	r1, fp, #8, #24
 8015fca:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8015fce:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8015fd2:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8015fd6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8015fda:	b2ac      	uxth	r4, r5
 8015fdc:	42ab      	cmp	r3, r5
 8015fde:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8015fe2:	9301      	str	r3, [sp, #4]
 8015fe4:	d93b      	bls.n	801605e <ai_platform_outputs_get+0xda>
 8015fe6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d037      	beq.n	801605e <ai_platform_outputs_get+0xda>
 8015fee:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8015ff2:	2e00      	cmp	r6, #0
 8015ff4:	d033      	beq.n	801605e <ai_platform_outputs_get+0xda>
 8015ff6:	f8da 3014 	ldr.w	r3, [sl, #20]
 8015ffa:	69b2      	ldr	r2, [r6, #24]
 8015ffc:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8016000:	6810      	ldr	r0, [r2, #0]
 8016002:	68b3      	ldr	r3, [r6, #8]
 8016004:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8016008:	68f2      	ldr	r2, [r6, #12]
 801600a:	444c      	add	r4, r9
 801600c:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8016010:	9200      	str	r2, [sp, #0]
 8016012:	f00a ff4d 	bl	8020eb0 <ai_array_to_buffer_fmt>
 8016016:	69b1      	ldr	r1, [r6, #24]
 8016018:	9a00      	ldr	r2, [sp, #0]
 801601a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 801601e:	2f00      	cmp	r7, #0
 8016020:	d0c7      	beq.n	8015fb2 <ai_platform_outputs_get+0x2e>
 8016022:	2100      	movs	r1, #0
 8016024:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8016028:	6831      	ldr	r1, [r6, #0]
 801602a:	6079      	str	r1, [r7, #4]
 801602c:	b111      	cbz	r1, 8016034 <ai_platform_outputs_get+0xb0>
 801602e:	8849      	ldrh	r1, [r1, #2]
 8016030:	2900      	cmp	r1, #0
 8016032:	d1b9      	bne.n	8015fa8 <ai_platform_outputs_get+0x24>
 8016034:	69b1      	ldr	r1, [r6, #24]
 8016036:	2700      	movs	r7, #0
 8016038:	e7bb      	b.n	8015fb2 <ai_platform_outputs_get+0x2e>
 801603a:	9803      	ldr	r0, [sp, #12]
 801603c:	2400      	movs	r4, #0
 801603e:	2218      	movs	r2, #24
 8016040:	2111      	movs	r1, #17
 8016042:	300c      	adds	r0, #12
 8016044:	f000 fb94 	bl	8016770 <core_set_error>
 8016048:	4620      	mov	r0, r4
 801604a:	9b02      	ldr	r3, [sp, #8]
 801604c:	b103      	cbz	r3, 8016050 <ai_platform_outputs_get+0xcc>
 801604e:	801c      	strh	r4, [r3, #0]
 8016050:	b005      	add	sp, #20
 8016052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016056:	2000      	movs	r0, #0
 8016058:	b005      	add	sp, #20
 801605a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801605e:	2c00      	cmp	r4, #0
 8016060:	d0eb      	beq.n	801603a <ai_platform_outputs_get+0xb6>
 8016062:	f8da 3014 	ldr.w	r3, [sl, #20]
 8016066:	6858      	ldr	r0, [r3, #4]
 8016068:	e7ef      	b.n	801604a <ai_platform_outputs_get+0xc6>
 801606a:	bf00      	nop
 801606c:	a1c00100 	.word	0xa1c00100

08016070 <ai_platform_network_create>:
 8016070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016074:	b083      	sub	sp, #12
 8016076:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 801607a:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801607e:	b320      	cbz	r0, 80160ca <ai_platform_network_create+0x5a>
 8016080:	6002      	str	r2, [r0, #0]
 8016082:	4616      	mov	r6, r2
 8016084:	461f      	mov	r7, r3
 8016086:	4604      	mov	r4, r0
 8016088:	f000 fb6a 	bl	8016760 <core_init>
 801608c:	b970      	cbnz	r0, 80160ac <ai_platform_network_create+0x3c>
 801608e:	2530      	movs	r5, #48	@ 0x30
 8016090:	2300      	movs	r3, #0
 8016092:	6023      	str	r3, [r4, #0]
 8016094:	2410      	movs	r4, #16
 8016096:	464a      	mov	r2, r9
 8016098:	4641      	mov	r1, r8
 801609a:	4638      	mov	r0, r7
 801609c:	f00a ffb2 	bl	8021004 <ai_version_get>
 80160a0:	60b0      	str	r0, [r6, #8]
 80160a2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80160a6:	b003      	add	sp, #12
 80160a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160ac:	2200      	movs	r2, #0
 80160ae:	4641      	mov	r1, r8
 80160b0:	4638      	mov	r0, r7
 80160b2:	f00a ffa7 	bl	8021004 <ai_version_get>
 80160b6:	4605      	mov	r5, r0
 80160b8:	2200      	movs	r2, #0
 80160ba:	2105      	movs	r1, #5
 80160bc:	2001      	movs	r0, #1
 80160be:	f00a ffa1 	bl	8021004 <ai_version_get>
 80160c2:	4285      	cmp	r5, r0
 80160c4:	d008      	beq.n	80160d8 <ai_platform_network_create+0x68>
 80160c6:	2501      	movs	r5, #1
 80160c8:	e7e2      	b.n	8016090 <ai_platform_network_create+0x20>
 80160ca:	2510      	movs	r5, #16
 80160cc:	462c      	mov	r4, r5
 80160ce:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80160d2:	b003      	add	sp, #12
 80160d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160d8:	4b05      	ldr	r3, [pc, #20]	@ (80160f0 <ai_platform_network_create+0x80>)
 80160da:	a801      	add	r0, sp, #4
 80160dc:	9301      	str	r3, [sp, #4]
 80160de:	f000 fb53 	bl	8016788 <ai_check_custom_types>
 80160e2:	b110      	cbz	r0, 80160ea <ai_platform_network_create+0x7a>
 80160e4:	2400      	movs	r4, #0
 80160e6:	4625      	mov	r5, r4
 80160e8:	e7d5      	b.n	8016096 <ai_platform_network_create+0x26>
 80160ea:	2502      	movs	r5, #2
 80160ec:	e7d0      	b.n	8016090 <ai_platform_network_create+0x20>
 80160ee:	bf00      	nop
 80160f0:	84048403 	.word	0x84048403

080160f4 <ai_platform_network_init>:
 80160f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160f8:	4a5c      	ldr	r2, [pc, #368]	@ (801626c <ai_platform_network_init+0x178>)
 80160fa:	460c      	mov	r4, r1
 80160fc:	6801      	ldr	r1, [r0, #0]
 80160fe:	438a      	bics	r2, r1
 8016100:	d133      	bne.n	801616a <ai_platform_network_init+0x76>
 8016102:	4605      	mov	r5, r0
 8016104:	2c00      	cmp	r4, #0
 8016106:	f000 8093 	beq.w	8016230 <ai_platform_network_init+0x13c>
 801610a:	f8d4 b000 	ldr.w	fp, [r4]
 801610e:	4a58      	ldr	r2, [pc, #352]	@ (8016270 <ai_platform_network_init+0x17c>)
 8016110:	4593      	cmp	fp, r2
 8016112:	d10f      	bne.n	8016134 <ai_platform_network_init+0x40>
 8016114:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8016118:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801611c:	4b53      	ldr	r3, [pc, #332]	@ (801626c <ai_platform_network_init+0x178>)
 801611e:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8016122:	0c32      	lsrs	r2, r6, #16
 8016124:	4299      	cmp	r1, r3
 8016126:	d02c      	beq.n	8016182 <ai_platform_network_init+0x8e>
 8016128:	2303      	movs	r3, #3
 801612a:	462c      	mov	r4, r5
 801612c:	612b      	str	r3, [r5, #16]
 801612e:	4620      	mov	r0, r4
 8016130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016134:	4627      	mov	r7, r4
 8016136:	2101      	movs	r1, #1
 8016138:	6864      	ldr	r4, [r4, #4]
 801613a:	4638      	mov	r0, r7
 801613c:	f107 081c 	add.w	r8, r7, #28
 8016140:	f7ff fd7e 	bl	8015c40 <ai_buffer_get_size>
 8016144:	4606      	mov	r6, r0
 8016146:	2101      	movs	r1, #1
 8016148:	4640      	mov	r0, r8
 801614a:	f8d7 9020 	ldr.w	r9, [r7, #32]
 801614e:	f7ff fd77 	bl	8015c40 <ai_buffer_get_size>
 8016152:	b976      	cbnz	r6, 8016172 <ai_platform_network_init+0x7e>
 8016154:	2800      	cmp	r0, #0
 8016156:	d150      	bne.n	80161fa <ai_platform_network_init+0x106>
 8016158:	4680      	mov	r8, r0
 801615a:	4686      	mov	lr, r0
 801615c:	4606      	mov	r6, r0
 801615e:	4607      	mov	r7, r0
 8016160:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8016164:	6829      	ldr	r1, [r5, #0]
 8016166:	0436      	lsls	r6, r6, #16
 8016168:	e7d8      	b.n	801611c <ai_platform_network_init+0x28>
 801616a:	2400      	movs	r4, #0
 801616c:	4620      	mov	r0, r4
 801616e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016172:	2800      	cmp	r0, #0
 8016174:	d13b      	bne.n	80161ee <ai_platform_network_init+0xfa>
 8016176:	4680      	mov	r8, r0
 8016178:	4686      	mov	lr, r0
 801617a:	2c00      	cmp	r4, #0
 801617c:	d05e      	beq.n	801623c <ai_platform_network_init+0x148>
 801617e:	2601      	movs	r6, #1
 8016180:	e7ee      	b.n	8016160 <ai_platform_network_init+0x6c>
 8016182:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8016184:	4293      	cmp	r3, r2
 8016186:	4b3a      	ldr	r3, [pc, #232]	@ (8016270 <ai_platform_network_init+0x17c>)
 8016188:	d33e      	bcc.n	8016208 <ai_platform_network_init+0x114>
 801618a:	459b      	cmp	fp, r3
 801618c:	d03e      	beq.n	801620c <ai_platform_network_init+0x118>
 801618e:	b1a2      	cbz	r2, 80161ba <ai_platform_network_init+0xc6>
 8016190:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8016194:	f04f 0c00 	mov.w	ip, #0
 8016198:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801619c:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801619e:	eb07 0b0c 	add.w	fp, r7, ip
 80161a2:	4464      	add	r4, ip
 80161a4:	f10c 0c1c 	add.w	ip, ip, #28
 80161a8:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80161ac:	45cc      	cmp	ip, r9
 80161ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80161b0:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80161b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80161b8:	d1f0      	bne.n	801619c <ai_platform_network_init+0xa8>
 80161ba:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 80161bc:	622e      	str	r6, [r5, #32]
 80161be:	4553      	cmp	r3, sl
 80161c0:	d34b      	bcc.n	801625a <ai_platform_network_init+0x166>
 80161c2:	f1ba 0f00 	cmp.w	sl, #0
 80161c6:	d025      	beq.n	8016214 <ai_platform_network_init+0x120>
 80161c8:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 80161cc:	2700      	movs	r7, #0
 80161ce:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80161d2:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 80161d4:	eb08 0607 	add.w	r6, r8, r7
 80161d8:	443c      	add	r4, r7
 80161da:	371c      	adds	r7, #28
 80161dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80161de:	4557      	cmp	r7, sl
 80161e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80161e2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80161e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80161ea:	d1f2      	bne.n	80161d2 <ai_platform_network_init+0xde>
 80161ec:	e012      	b.n	8016214 <ai_platform_network_init+0x120>
 80161ee:	f1b9 0f00 	cmp.w	r9, #0
 80161f2:	d015      	beq.n	8016220 <ai_platform_network_init+0x12c>
 80161f4:	f04f 0e01 	mov.w	lr, #1
 80161f8:	e7bf      	b.n	801617a <ai_platform_network_init+0x86>
 80161fa:	f1b9 0f00 	cmp.w	r9, #0
 80161fe:	d00f      	beq.n	8016220 <ai_platform_network_init+0x12c>
 8016200:	f04f 0e01 	mov.w	lr, #1
 8016204:	4637      	mov	r7, r6
 8016206:	e7ab      	b.n	8016160 <ai_platform_network_init+0x6c>
 8016208:	459b      	cmp	fp, r3
 801620a:	d11e      	bne.n	801624a <ai_platform_network_init+0x156>
 801620c:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 8016210:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8016214:	4628      	mov	r0, r5
 8016216:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 801621a:	f000 fadd 	bl	80167d8 <ai_layers_init_all>
 801621e:	e783      	b.n	8016128 <ai_platform_network_init+0x34>
 8016220:	2213      	movs	r2, #19
 8016222:	2110      	movs	r1, #16
 8016224:	f105 000c 	add.w	r0, r5, #12
 8016228:	2400      	movs	r4, #0
 801622a:	f000 faa1 	bl	8016770 <core_set_error>
 801622e:	e77e      	b.n	801612e <ai_platform_network_init+0x3a>
 8016230:	2211      	movs	r2, #17
 8016232:	2110      	movs	r1, #16
 8016234:	300c      	adds	r0, #12
 8016236:	f000 fa9b 	bl	8016770 <core_set_error>
 801623a:	e778      	b.n	801612e <ai_platform_network_init+0x3a>
 801623c:	2212      	movs	r2, #18
 801623e:	2110      	movs	r1, #16
 8016240:	f105 000c 	add.w	r0, r5, #12
 8016244:	f000 fa94 	bl	8016770 <core_set_error>
 8016248:	e771      	b.n	801612e <ai_platform_network_init+0x3a>
 801624a:	2212      	movs	r2, #18
 801624c:	2116      	movs	r1, #22
 801624e:	f105 000c 	add.w	r0, r5, #12
 8016252:	2400      	movs	r4, #0
 8016254:	f000 fa8c 	bl	8016770 <core_set_error>
 8016258:	e769      	b.n	801612e <ai_platform_network_init+0x3a>
 801625a:	2213      	movs	r2, #19
 801625c:	2116      	movs	r1, #22
 801625e:	f105 000c 	add.w	r0, r5, #12
 8016262:	2400      	movs	r4, #0
 8016264:	f000 fa84 	bl	8016770 <core_set_error>
 8016268:	e761      	b.n	801612e <ai_platform_network_init+0x3a>
 801626a:	bf00      	nop
 801626c:	a1c00100 	.word	0xa1c00100
 8016270:	a1facade 	.word	0xa1facade

08016274 <ai_platform_network_post_init>:
 8016274:	b538      	push	{r3, r4, r5, lr}
 8016276:	4b16      	ldr	r3, [pc, #88]	@ (80162d0 <ai_platform_network_post_init+0x5c>)
 8016278:	6802      	ldr	r2, [r0, #0]
 801627a:	ea02 0103 	and.w	r1, r2, r3
 801627e:	4393      	bics	r3, r2
 8016280:	d108      	bne.n	8016294 <ai_platform_network_post_init+0x20>
 8016282:	6903      	ldr	r3, [r0, #16]
 8016284:	4604      	mov	r4, r0
 8016286:	f013 0502 	ands.w	r5, r3, #2
 801628a:	d005      	beq.n	8016298 <ai_platform_network_post_init+0x24>
 801628c:	428a      	cmp	r2, r1
 801628e:	d00a      	beq.n	80162a6 <ai_platform_network_post_init+0x32>
 8016290:	2001      	movs	r0, #1
 8016292:	bd38      	pop	{r3, r4, r5, pc}
 8016294:	2000      	movs	r0, #0
 8016296:	bd38      	pop	{r3, r4, r5, pc}
 8016298:	2210      	movs	r2, #16
 801629a:	2111      	movs	r1, #17
 801629c:	300c      	adds	r0, #12
 801629e:	f000 fa67 	bl	8016770 <core_set_error>
 80162a2:	4628      	mov	r0, r5
 80162a4:	bd38      	pop	{r3, r4, r5, pc}
 80162a6:	f000 faa5 	bl	80167f4 <ai_layers_post_init_all>
 80162aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d0ef      	beq.n	8016290 <ai_platform_network_post_init+0x1c>
 80162b0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80162b2:	e008      	b.n	80162c6 <ai_platform_network_post_init+0x52>
 80162b4:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 80162b8:	4798      	blx	r3
 80162ba:	692b      	ldr	r3, [r5, #16]
 80162bc:	42ab      	cmp	r3, r5
 80162be:	461d      	mov	r5, r3
 80162c0:	d0e6      	beq.n	8016290 <ai_platform_network_post_init+0x1c>
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d0e4      	beq.n	8016290 <ai_platform_network_post_init+0x1c>
 80162c6:	4629      	mov	r1, r5
 80162c8:	2000      	movs	r0, #0
 80162ca:	2d00      	cmp	r5, #0
 80162cc:	d1f2      	bne.n	80162b4 <ai_platform_network_post_init+0x40>
 80162ce:	e7df      	b.n	8016290 <ai_platform_network_post_init+0x1c>
 80162d0:	a1c00100 	.word	0xa1c00100

080162d4 <ai_platform_network_process>:
 80162d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162d8:	b085      	sub	sp, #20
 80162da:	4bb7      	ldr	r3, [pc, #732]	@ (80165b8 <ai_platform_network_process+0x2e4>)
 80162dc:	9202      	str	r2, [sp, #8]
 80162de:	6802      	ldr	r2, [r0, #0]
 80162e0:	4393      	bics	r3, r2
 80162e2:	f040 8142 	bne.w	801656a <ai_platform_network_process+0x296>
 80162e6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80162e8:	4605      	mov	r5, r0
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	f000 8126 	beq.w	801653c <ai_platform_network_process+0x268>
 80162f0:	6903      	ldr	r3, [r0, #16]
 80162f2:	2200      	movs	r2, #0
 80162f4:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 80162f8:	f003 0303 	and.w	r3, r3, #3
 80162fc:	6182      	str	r2, [r0, #24]
 80162fe:	2b03      	cmp	r3, #3
 8016300:	f040 8122 	bne.w	8016548 <ai_platform_network_process+0x274>
 8016304:	2900      	cmp	r1, #0
 8016306:	f000 8136 	beq.w	8016576 <ai_platform_network_process+0x2a2>
 801630a:	fab8 f788 	clz	r7, r8
 801630e:	097f      	lsrs	r7, r7, #5
 8016310:	f1b8 0f00 	cmp.w	r8, #0
 8016314:	f000 812f 	beq.w	8016576 <ai_platform_network_process+0x2a2>
 8016318:	f8b8 3000 	ldrh.w	r3, [r8]
 801631c:	2b00      	cmp	r3, #0
 801631e:	f000 812a 	beq.w	8016576 <ai_platform_network_process+0x2a2>
 8016322:	698b      	ldr	r3, [r1, #24]
 8016324:	460e      	mov	r6, r1
 8016326:	9003      	str	r0, [sp, #12]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	9301      	str	r3, [sp, #4]
 801632c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d072      	beq.n	801641a <ai_platform_network_process+0x146>
 8016334:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8016338:	2c00      	cmp	r4, #0
 801633a:	d06e      	beq.n	801641a <ai_platform_network_process+0x146>
 801633c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016340:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8016344:	f8d3 a000 	ldr.w	sl, [r3]
 8016348:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 801634c:	f000 8112 	beq.w	8016574 <ai_platform_network_process+0x2a0>
 8016350:	69a3      	ldr	r3, [r4, #24]
 8016352:	2101      	movs	r1, #1
 8016354:	4630      	mov	r0, r6
 8016356:	685d      	ldr	r5, [r3, #4]
 8016358:	f7ff fc72 	bl	8015c40 <ai_buffer_get_size>
 801635c:	4285      	cmp	r5, r0
 801635e:	f0c0 8115 	bcc.w	801658c <ai_platform_network_process+0x2b8>
 8016362:	68e0      	ldr	r0, [r4, #12]
 8016364:	69b1      	ldr	r1, [r6, #24]
 8016366:	68c2      	ldr	r2, [r0, #12]
 8016368:	68cb      	ldr	r3, [r1, #12]
 801636a:	429a      	cmp	r2, r3
 801636c:	f040 810e 	bne.w	801658c <ai_platform_network_process+0x2b8>
 8016370:	6882      	ldr	r2, [r0, #8]
 8016372:	688b      	ldr	r3, [r1, #8]
 8016374:	429a      	cmp	r2, r3
 8016376:	f040 8109 	bne.w	801658c <ai_platform_network_process+0x2b8>
 801637a:	6842      	ldr	r2, [r0, #4]
 801637c:	684b      	ldr	r3, [r1, #4]
 801637e:	429a      	cmp	r2, r3
 8016380:	f040 8104 	bne.w	801658c <ai_platform_network_process+0x2b8>
 8016384:	69a3      	ldr	r3, [r4, #24]
 8016386:	e9d3 0100 	ldrd	r0, r1, [r3]
 801638a:	f00a fe29 	bl	8020fe0 <ai_array_get_data_byte_size>
 801638e:	4605      	mov	r5, r0
 8016390:	4620      	mov	r0, r4
 8016392:	f00a fe3d 	bl	8021010 <get_tensor_byte_size>
 8016396:	4285      	cmp	r5, r0
 8016398:	f0c0 80f8 	bcc.w	801658c <ai_platform_network_process+0x2b8>
 801639c:	69a3      	ldr	r3, [r4, #24]
 801639e:	6818      	ldr	r0, [r3, #0]
 80163a0:	f00a fd86 	bl	8020eb0 <ai_array_to_buffer_fmt>
 80163a4:	6833      	ldr	r3, [r6, #0]
 80163a6:	4058      	eors	r0, r3
 80163a8:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80163ac:	f040 81a4 	bne.w	80166f8 <ai_platform_network_process+0x424>
 80163b0:	6873      	ldr	r3, [r6, #4]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	f000 80de 	beq.w	8016574 <ai_platform_network_process+0x2a0>
 80163b8:	69b3      	ldr	r3, [r6, #24]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	f000 81a4 	beq.w	801670a <ai_platform_network_process+0x436>
 80163c2:	9a01      	ldr	r2, [sp, #4]
 80163c4:	4620      	mov	r0, r4
 80163c6:	3701      	adds	r7, #1
 80163c8:	361c      	adds	r6, #28
 80163ca:	429a      	cmp	r2, r3
 80163cc:	bf38      	it	cc
 80163ce:	461a      	movcc	r2, r3
 80163d0:	9201      	str	r2, [sp, #4]
 80163d2:	f00a fe1d 	bl	8021010 <get_tensor_byte_size>
 80163d6:	f8c9 0008 	str.w	r0, [r9, #8]
 80163da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	fb00 f303 	mul.w	r3, r0, r3
 80163e4:	f8c9 300c 	str.w	r3, [r9, #12]
 80163e8:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80163ec:	440b      	add	r3, r1
 80163ee:	f8c9 1004 	str.w	r1, [r9, #4]
 80163f2:	f84a 300b 	str.w	r3, [sl, fp]
 80163f6:	69a0      	ldr	r0, [r4, #24]
 80163f8:	6803      	ldr	r3, [r0, #0]
 80163fa:	009a      	lsls	r2, r3, #2
 80163fc:	f100 80af 	bmi.w	801655e <ai_platform_network_process+0x28a>
 8016400:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8016404:	1a9b      	subs	r3, r3, r2
 8016406:	4419      	add	r1, r3
 8016408:	6081      	str	r1, [r0, #8]
 801640a:	69a3      	ldr	r3, [r4, #24]
 801640c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8016410:	60da      	str	r2, [r3, #12]
 8016412:	f8b8 3000 	ldrh.w	r3, [r8]
 8016416:	42bb      	cmp	r3, r7
 8016418:	d888      	bhi.n	801632c <ai_platform_network_process+0x58>
 801641a:	9d03      	ldr	r5, [sp, #12]
 801641c:	9b02      	ldr	r3, [sp, #8]
 801641e:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8016420:	2b00      	cmp	r3, #0
 8016422:	f000 817b 	beq.w	801671c <ai_platform_network_process+0x448>
 8016426:	2a01      	cmp	r2, #1
 8016428:	f240 80bd 	bls.w	80165a6 <ai_platform_network_process+0x2d2>
 801642c:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 8016430:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8016434:	2b00      	cmp	r3, #0
 8016436:	f000 80b6 	beq.w	80165a6 <ai_platform_network_process+0x2d2>
 801643a:	2700      	movs	r7, #0
 801643c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8016440:	9502      	str	r5, [sp, #8]
 8016442:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016446:	2b00      	cmp	r3, #0
 8016448:	f000 80bd 	beq.w	80165c6 <ai_platform_network_process+0x2f2>
 801644c:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8016450:	2e00      	cmp	r6, #0
 8016452:	f000 80b8 	beq.w	80165c6 <ai_platform_network_process+0x2f2>
 8016456:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801645a:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801645e:	681c      	ldr	r4, [r3, #0]
 8016460:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 8016464:	f000 8170 	beq.w	8016748 <ai_platform_network_process+0x474>
 8016468:	69b3      	ldr	r3, [r6, #24]
 801646a:	2101      	movs	r1, #1
 801646c:	4658      	mov	r0, fp
 801646e:	685d      	ldr	r5, [r3, #4]
 8016470:	f7ff fbe6 	bl	8015c40 <ai_buffer_get_size>
 8016474:	4285      	cmp	r5, r0
 8016476:	f0c0 8095 	bcc.w	80165a4 <ai_platform_network_process+0x2d0>
 801647a:	68f0      	ldr	r0, [r6, #12]
 801647c:	f8db 1018 	ldr.w	r1, [fp, #24]
 8016480:	68c2      	ldr	r2, [r0, #12]
 8016482:	68cb      	ldr	r3, [r1, #12]
 8016484:	429a      	cmp	r2, r3
 8016486:	f040 808d 	bne.w	80165a4 <ai_platform_network_process+0x2d0>
 801648a:	6882      	ldr	r2, [r0, #8]
 801648c:	688b      	ldr	r3, [r1, #8]
 801648e:	429a      	cmp	r2, r3
 8016490:	f040 8088 	bne.w	80165a4 <ai_platform_network_process+0x2d0>
 8016494:	6842      	ldr	r2, [r0, #4]
 8016496:	684b      	ldr	r3, [r1, #4]
 8016498:	429a      	cmp	r2, r3
 801649a:	f040 8083 	bne.w	80165a4 <ai_platform_network_process+0x2d0>
 801649e:	69b3      	ldr	r3, [r6, #24]
 80164a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80164a4:	f00a fd9c 	bl	8020fe0 <ai_array_get_data_byte_size>
 80164a8:	9003      	str	r0, [sp, #12]
 80164aa:	4630      	mov	r0, r6
 80164ac:	f00a fdb0 	bl	8021010 <get_tensor_byte_size>
 80164b0:	9b03      	ldr	r3, [sp, #12]
 80164b2:	4283      	cmp	r3, r0
 80164b4:	d376      	bcc.n	80165a4 <ai_platform_network_process+0x2d0>
 80164b6:	69b3      	ldr	r3, [r6, #24]
 80164b8:	6818      	ldr	r0, [r3, #0]
 80164ba:	f00a fcf9 	bl	8020eb0 <ai_array_to_buffer_fmt>
 80164be:	f8db 3000 	ldr.w	r3, [fp]
 80164c2:	4058      	eors	r0, r3
 80164c4:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80164c8:	f040 812c 	bne.w	8016724 <ai_platform_network_process+0x450>
 80164cc:	f8db 3004 	ldr.w	r3, [fp, #4]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	f000 8139 	beq.w	8016748 <ai_platform_network_process+0x474>
 80164d6:	f8db 3018 	ldr.w	r3, [fp, #24]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	f000 812a 	beq.w	8016736 <ai_platform_network_process+0x462>
 80164e2:	9a01      	ldr	r2, [sp, #4]
 80164e4:	4630      	mov	r0, r6
 80164e6:	3701      	adds	r7, #1
 80164e8:	f10b 0b1c 	add.w	fp, fp, #28
 80164ec:	429a      	cmp	r2, r3
 80164ee:	bf38      	it	cc
 80164f0:	461a      	movcc	r2, r3
 80164f2:	9201      	str	r2, [sp, #4]
 80164f4:	f00a fd8c 	bl	8021010 <get_tensor_byte_size>
 80164f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80164fc:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	fb00 f303 	mul.w	r3, r0, r3
 8016506:	f8c8 300c 	str.w	r3, [r8, #12]
 801650a:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 801650e:	440b      	add	r3, r1
 8016510:	f8c8 1004 	str.w	r1, [r8, #4]
 8016514:	f844 300a 	str.w	r3, [r4, sl]
 8016518:	69b0      	ldr	r0, [r6, #24]
 801651a:	6803      	ldr	r3, [r0, #0]
 801651c:	009b      	lsls	r3, r3, #2
 801651e:	d44d      	bmi.n	80165bc <ai_platform_network_process+0x2e8>
 8016520:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8016524:	1a9b      	subs	r3, r3, r2
 8016526:	4419      	add	r1, r3
 8016528:	6081      	str	r1, [r0, #8]
 801652a:	69b3      	ldr	r3, [r6, #24]
 801652c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8016530:	60da      	str	r2, [r3, #12]
 8016532:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8016536:	42bb      	cmp	r3, r7
 8016538:	d883      	bhi.n	8016442 <ai_platform_network_process+0x16e>
 801653a:	e044      	b.n	80165c6 <ai_platform_network_process+0x2f2>
 801653c:	6902      	ldr	r2, [r0, #16]
 801653e:	6183      	str	r3, [r0, #24]
 8016540:	f002 0203 	and.w	r2, r2, #3
 8016544:	2a03      	cmp	r2, #3
 8016546:	d016      	beq.n	8016576 <ai_platform_network_process+0x2a2>
 8016548:	2230      	movs	r2, #48	@ 0x30
 801654a:	2111      	movs	r1, #17
 801654c:	f105 000c 	add.w	r0, r5, #12
 8016550:	2400      	movs	r4, #0
 8016552:	f000 f90d 	bl	8016770 <core_set_error>
 8016556:	4620      	mov	r0, r4
 8016558:	b005      	add	sp, #20
 801655a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801655e:	f8b8 3000 	ldrh.w	r3, [r8]
 8016562:	429f      	cmp	r7, r3
 8016564:	f4ff aee2 	bcc.w	801632c <ai_platform_network_process+0x58>
 8016568:	e757      	b.n	801641a <ai_platform_network_process+0x146>
 801656a:	2400      	movs	r4, #0
 801656c:	4620      	mov	r0, r4
 801656e:	b005      	add	sp, #20
 8016570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016574:	9d03      	ldr	r5, [sp, #12]
 8016576:	2400      	movs	r4, #0
 8016578:	2217      	movs	r2, #23
 801657a:	2112      	movs	r1, #18
 801657c:	f105 000c 	add.w	r0, r5, #12
 8016580:	f000 f8f6 	bl	8016770 <core_set_error>
 8016584:	4620      	mov	r0, r4
 8016586:	b005      	add	sp, #20
 8016588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801658c:	9d03      	ldr	r5, [sp, #12]
 801658e:	2400      	movs	r4, #0
 8016590:	2218      	movs	r2, #24
 8016592:	2112      	movs	r1, #18
 8016594:	f105 000c 	add.w	r0, r5, #12
 8016598:	f000 f8ea 	bl	8016770 <core_set_error>
 801659c:	4620      	mov	r0, r4
 801659e:	b005      	add	sp, #20
 80165a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165a4:	9d02      	ldr	r5, [sp, #8]
 80165a6:	2218      	movs	r2, #24
 80165a8:	2113      	movs	r1, #19
 80165aa:	f105 000c 	add.w	r0, r5, #12
 80165ae:	2400      	movs	r4, #0
 80165b0:	f000 f8de 	bl	8016770 <core_set_error>
 80165b4:	e7cf      	b.n	8016556 <ai_platform_network_process+0x282>
 80165b6:	bf00      	nop
 80165b8:	a1c00100 	.word	0xa1c00100
 80165bc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80165c0:	429f      	cmp	r7, r3
 80165c2:	f4ff af3e 	bcc.w	8016442 <ai_platform_network_process+0x16e>
 80165c6:	9d02      	ldr	r5, [sp, #8]
 80165c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80165cc:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80165ce:	832b      	strh	r3, [r5, #24]
 80165d0:	2a00      	cmp	r2, #0
 80165d2:	f040 808b 	bne.w	80166ec <ai_platform_network_process+0x418>
 80165d6:	4616      	mov	r6, r2
 80165d8:	4617      	mov	r7, r2
 80165da:	8b6c      	ldrh	r4, [r5, #26]
 80165dc:	429c      	cmp	r4, r3
 80165de:	d2ba      	bcs.n	8016556 <ai_platform_network_process+0x282>
 80165e0:	46ab      	mov	fp, r5
 80165e2:	2e00      	cmp	r6, #0
 80165e4:	d030      	beq.n	8016648 <ai_platform_network_process+0x374>
 80165e6:	f04f 0800 	mov.w	r8, #0
 80165ea:	e014      	b.n	8016616 <ai_platform_network_process+0x342>
 80165ec:	6882      	ldr	r2, [r0, #8]
 80165ee:	68c5      	ldr	r5, [r0, #12]
 80165f0:	6863      	ldr	r3, [r4, #4]
 80165f2:	1b52      	subs	r2, r2, r5
 80165f4:	4413      	add	r3, r2
 80165f6:	6083      	str	r3, [r0, #8]
 80165f8:	698b      	ldr	r3, [r1, #24]
 80165fa:	6862      	ldr	r2, [r4, #4]
 80165fc:	60da      	str	r2, [r3, #12]
 80165fe:	f859 200a 	ldr.w	r2, [r9, sl]
 8016602:	f108 0801 	add.w	r8, r8, #1
 8016606:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801660a:	440b      	add	r3, r1
 801660c:	4293      	cmp	r3, r2
 801660e:	d301      	bcc.n	8016614 <ai_platform_network_process+0x340>
 8016610:	68e3      	ldr	r3, [r4, #12]
 8016612:	1ad3      	subs	r3, r2, r3
 8016614:	6063      	str	r3, [r4, #4]
 8016616:	8833      	ldrh	r3, [r6, #0]
 8016618:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801661c:	4543      	cmp	r3, r8
 801661e:	d913      	bls.n	8016648 <ai_platform_network_process+0x374>
 8016620:	6873      	ldr	r3, [r6, #4]
 8016622:	b18b      	cbz	r3, 8016648 <ai_platform_network_process+0x374>
 8016624:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8016628:	b171      	cbz	r1, 8016648 <ai_platform_network_process+0x374>
 801662a:	6988      	ldr	r0, [r1, #24]
 801662c:	68b2      	ldr	r2, [r6, #8]
 801662e:	6803      	ldr	r3, [r0, #0]
 8016630:	f8d2 9000 	ldr.w	r9, [r2]
 8016634:	009d      	lsls	r5, r3, #2
 8016636:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801663a:	d5d7      	bpl.n	80165ec <ai_platform_network_process+0x318>
 801663c:	6881      	ldr	r1, [r0, #8]
 801663e:	68a2      	ldr	r2, [r4, #8]
 8016640:	6860      	ldr	r0, [r4, #4]
 8016642:	f002 fed1 	bl	80193e8 <st_int8_copy>
 8016646:	e7da      	b.n	80165fe <ai_platform_network_process+0x32a>
 8016648:	4658      	mov	r0, fp
 801664a:	f000 f8e7 	bl	801681c <ai_layers_forward_all>
 801664e:	2f00      	cmp	r7, #0
 8016650:	d03d      	beq.n	80166ce <ai_platform_network_process+0x3fa>
 8016652:	2400      	movs	r4, #0
 8016654:	e016      	b.n	8016684 <ai_platform_network_process+0x3b0>
 8016656:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 801665a:	f859 100a 	ldr.w	r1, [r9, sl]
 801665e:	4413      	add	r3, r2
 8016660:	428b      	cmp	r3, r1
 8016662:	d302      	bcc.n	801666a <ai_platform_network_process+0x396>
 8016664:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016668:	1acb      	subs	r3, r1, r3
 801666a:	f8c8 3004 	str.w	r3, [r8, #4]
 801666e:	6981      	ldr	r1, [r0, #24]
 8016670:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8016674:	1b52      	subs	r2, r2, r5
 8016676:	4413      	add	r3, r2
 8016678:	608b      	str	r3, [r1, #8]
 801667a:	6983      	ldr	r3, [r0, #24]
 801667c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8016680:	60da      	str	r2, [r3, #12]
 8016682:	3401      	adds	r4, #1
 8016684:	883b      	ldrh	r3, [r7, #0]
 8016686:	42a3      	cmp	r3, r4
 8016688:	d921      	bls.n	80166ce <ai_platform_network_process+0x3fa>
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	b1fb      	cbz	r3, 80166ce <ai_platform_network_process+0x3fa>
 801668e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016692:	b1e0      	cbz	r0, 80166ce <ai_platform_network_process+0x3fa>
 8016694:	68ba      	ldr	r2, [r7, #8]
 8016696:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 801669a:	6983      	ldr	r3, [r0, #24]
 801669c:	f8d2 9000 	ldr.w	r9, [r2]
 80166a0:	681a      	ldr	r2, [r3, #0]
 80166a2:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80166a6:	0092      	lsls	r2, r2, #2
 80166a8:	d5d5      	bpl.n	8016656 <ai_platform_network_process+0x382>
 80166aa:	6898      	ldr	r0, [r3, #8]
 80166ac:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80166b0:	f002 fe9a 	bl	80193e8 <st_int8_copy>
 80166b4:	f859 200a 	ldr.w	r2, [r9, sl]
 80166b8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80166bc:	440b      	add	r3, r1
 80166be:	4293      	cmp	r3, r2
 80166c0:	d302      	bcc.n	80166c8 <ai_platform_network_process+0x3f4>
 80166c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80166c6:	1ad3      	subs	r3, r2, r3
 80166c8:	f8c8 3004 	str.w	r3, [r8, #4]
 80166cc:	e7d9      	b.n	8016682 <ai_platform_network_process+0x3ae>
 80166ce:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80166d2:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80166d6:	3401      	adds	r4, #1
 80166d8:	b2a4      	uxth	r4, r4
 80166da:	42a3      	cmp	r3, r4
 80166dc:	f8ab 401a 	strh.w	r4, [fp, #26]
 80166e0:	f63f af7f 	bhi.w	80165e2 <ai_platform_network_process+0x30e>
 80166e4:	4620      	mov	r0, r4
 80166e6:	b005      	add	sp, #20
 80166e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ec:	2a01      	cmp	r2, #1
 80166ee:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 80166f0:	d033      	beq.n	801675a <ai_platform_network_process+0x486>
 80166f2:	f106 070c 	add.w	r7, r6, #12
 80166f6:	e770      	b.n	80165da <ai_platform_network_process+0x306>
 80166f8:	9d03      	ldr	r5, [sp, #12]
 80166fa:	2219      	movs	r2, #25
 80166fc:	2112      	movs	r1, #18
 80166fe:	2400      	movs	r4, #0
 8016700:	f105 000c 	add.w	r0, r5, #12
 8016704:	f000 f834 	bl	8016770 <core_set_error>
 8016708:	e725      	b.n	8016556 <ai_platform_network_process+0x282>
 801670a:	9d03      	ldr	r5, [sp, #12]
 801670c:	4604      	mov	r4, r0
 801670e:	2221      	movs	r2, #33	@ 0x21
 8016710:	2112      	movs	r1, #18
 8016712:	f105 000c 	add.w	r0, r5, #12
 8016716:	f000 f82b 	bl	8016770 <core_set_error>
 801671a:	e71c      	b.n	8016556 <ai_platform_network_process+0x282>
 801671c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016720:	832b      	strh	r3, [r5, #24]
 8016722:	e755      	b.n	80165d0 <ai_platform_network_process+0x2fc>
 8016724:	9d02      	ldr	r5, [sp, #8]
 8016726:	2219      	movs	r2, #25
 8016728:	2113      	movs	r1, #19
 801672a:	2400      	movs	r4, #0
 801672c:	f105 000c 	add.w	r0, r5, #12
 8016730:	f000 f81e 	bl	8016770 <core_set_error>
 8016734:	e70f      	b.n	8016556 <ai_platform_network_process+0x282>
 8016736:	9d02      	ldr	r5, [sp, #8]
 8016738:	4604      	mov	r4, r0
 801673a:	2221      	movs	r2, #33	@ 0x21
 801673c:	2113      	movs	r1, #19
 801673e:	f105 000c 	add.w	r0, r5, #12
 8016742:	f000 f815 	bl	8016770 <core_set_error>
 8016746:	e706      	b.n	8016556 <ai_platform_network_process+0x282>
 8016748:	9d02      	ldr	r5, [sp, #8]
 801674a:	2217      	movs	r2, #23
 801674c:	2113      	movs	r1, #19
 801674e:	2400      	movs	r4, #0
 8016750:	f105 000c 	add.w	r0, r5, #12
 8016754:	f000 f80c 	bl	8016770 <core_set_error>
 8016758:	e6fd      	b.n	8016556 <ai_platform_network_process+0x282>
 801675a:	2700      	movs	r7, #0
 801675c:	e73d      	b.n	80165da <ai_platform_network_process+0x306>
 801675e:	bf00      	nop

08016760 <core_init>:
 8016760:	2001      	movs	r0, #1
 8016762:	4770      	bx	lr

08016764 <core_get_error>:
 8016764:	4603      	mov	r3, r0
 8016766:	2200      	movs	r2, #0
 8016768:	6800      	ldr	r0, [r0, #0]
 801676a:	601a      	str	r2, [r3, #0]
 801676c:	4770      	bx	lr
 801676e:	bf00      	nop

08016770 <core_set_error>:
 8016770:	4603      	mov	r3, r0
 8016772:	7800      	ldrb	r0, [r0, #0]
 8016774:	b108      	cbz	r0, 801677a <core_set_error+0xa>
 8016776:	2000      	movs	r0, #0
 8016778:	4770      	bx	lr
 801677a:	7019      	strb	r1, [r3, #0]
 801677c:	2001      	movs	r0, #1
 801677e:	6819      	ldr	r1, [r3, #0]
 8016780:	f362 211f 	bfi	r1, r2, #8, #24
 8016784:	6019      	str	r1, [r3, #0]
 8016786:	4770      	bx	lr

08016788 <ai_check_custom_types>:
 8016788:	b082      	sub	sp, #8
 801678a:	4b12      	ldr	r3, [pc, #72]	@ (80167d4 <ai_check_custom_types+0x4c>)
 801678c:	9301      	str	r3, [sp, #4]
 801678e:	b118      	cbz	r0, 8016798 <ai_check_custom_types+0x10>
 8016790:	7803      	ldrb	r3, [r0, #0]
 8016792:	2b03      	cmp	r3, #3
 8016794:	d002      	beq.n	801679c <ai_check_custom_types+0x14>
 8016796:	2000      	movs	r0, #0
 8016798:	b002      	add	sp, #8
 801679a:	4770      	bx	lr
 801679c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80167a0:	4293      	cmp	r3, r2
 80167a2:	d004      	beq.n	80167ae <ai_check_custom_types+0x26>
 80167a4:	2001      	movs	r0, #1
 80167a6:	f080 0001 	eor.w	r0, r0, #1
 80167aa:	b002      	add	sp, #8
 80167ac:	4770      	bx	lr
 80167ae:	7842      	ldrb	r2, [r0, #1]
 80167b0:	3001      	adds	r0, #1
 80167b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80167b6:	429a      	cmp	r2, r3
 80167b8:	d1f4      	bne.n	80167a4 <ai_check_custom_types+0x1c>
 80167ba:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80167be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80167c2:	429a      	cmp	r2, r3
 80167c4:	d1ee      	bne.n	80167a4 <ai_check_custom_types+0x1c>
 80167c6:	7842      	ldrb	r2, [r0, #1]
 80167c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80167cc:	429a      	cmp	r2, r3
 80167ce:	d1e9      	bne.n	80167a4 <ai_check_custom_types+0x1c>
 80167d0:	2000      	movs	r0, #0
 80167d2:	e7e8      	b.n	80167a6 <ai_check_custom_types+0x1e>
 80167d4:	84048403 	.word	0x84048403

080167d8 <ai_layers_init_all>:
 80167d8:	2100      	movs	r1, #0
 80167da:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80167dc:	b13b      	cbz	r3, 80167ee <ai_layers_init_all+0x16>
 80167de:	691a      	ldr	r2, [r3, #16]
 80167e0:	3101      	adds	r1, #1
 80167e2:	60d8      	str	r0, [r3, #12]
 80167e4:	429a      	cmp	r2, r3
 80167e6:	4613      	mov	r3, r2
 80167e8:	d001      	beq.n	80167ee <ai_layers_init_all+0x16>
 80167ea:	2a00      	cmp	r2, #0
 80167ec:	d1f6      	bne.n	80167dc <ai_layers_init_all+0x4>
 80167ee:	4608      	mov	r0, r1
 80167f0:	4770      	bx	lr
 80167f2:	bf00      	nop

080167f4 <ai_layers_post_init_all>:
 80167f4:	b538      	push	{r3, r4, r5, lr}
 80167f6:	2500      	movs	r5, #0
 80167f8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80167fa:	b16c      	cbz	r4, 8016818 <ai_layers_post_init_all+0x24>
 80167fc:	6863      	ldr	r3, [r4, #4]
 80167fe:	07db      	lsls	r3, r3, #31
 8016800:	d504      	bpl.n	801680c <ai_layers_post_init_all+0x18>
 8016802:	6a23      	ldr	r3, [r4, #32]
 8016804:	4620      	mov	r0, r4
 8016806:	b10b      	cbz	r3, 801680c <ai_layers_post_init_all+0x18>
 8016808:	3501      	adds	r5, #1
 801680a:	4798      	blx	r3
 801680c:	6923      	ldr	r3, [r4, #16]
 801680e:	42a3      	cmp	r3, r4
 8016810:	461c      	mov	r4, r3
 8016812:	d001      	beq.n	8016818 <ai_layers_post_init_all+0x24>
 8016814:	2b00      	cmp	r3, #0
 8016816:	d1f0      	bne.n	80167fa <ai_layers_post_init_all+0x6>
 8016818:	4628      	mov	r0, r5
 801681a:	bd38      	pop	{r3, r4, r5, pc}

0801681c <ai_layers_forward_all>:
 801681c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016820:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8016824:	4604      	mov	r4, r0
 8016826:	f1b8 0f00 	cmp.w	r8, #0
 801682a:	d02a      	beq.n	8016882 <ai_layers_forward_all+0x66>
 801682c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801682e:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8016830:	b319      	cbz	r1, 801687a <ai_layers_forward_all+0x5e>
 8016832:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8016834:	2001      	movs	r0, #1
 8016836:	47c0      	blx	r8
 8016838:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 801683a:	b1f6      	cbz	r6, 801687a <ai_layers_forward_all+0x5e>
 801683c:	2700      	movs	r7, #0
 801683e:	4631      	mov	r1, r6
 8016840:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8016842:	2002      	movs	r0, #2
 8016844:	47c0      	blx	r8
 8016846:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8016848:	4628      	mov	r0, r5
 801684a:	696b      	ldr	r3, [r5, #20]
 801684c:	4798      	blx	r3
 801684e:	692e      	ldr	r6, [r5, #16]
 8016850:	2003      	movs	r0, #3
 8016852:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8016854:	42b5      	cmp	r5, r6
 8016856:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8016858:	d007      	beq.n	801686a <ai_layers_forward_all+0x4e>
 801685a:	47c0      	blx	r8
 801685c:	3701      	adds	r7, #1
 801685e:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8016860:	2e00      	cmp	r6, #0
 8016862:	d1ec      	bne.n	801683e <ai_layers_forward_all+0x22>
 8016864:	4638      	mov	r0, r7
 8016866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801686a:	2003      	movs	r0, #3
 801686c:	3701      	adds	r7, #1
 801686e:	47c0      	blx	r8
 8016870:	2300      	movs	r3, #0
 8016872:	4638      	mov	r0, r7
 8016874:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8016876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801687a:	2700      	movs	r7, #0
 801687c:	4638      	mov	r0, r7
 801687e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016882:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8016884:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8016886:	2d00      	cmp	r5, #0
 8016888:	d0f7      	beq.n	801687a <ai_layers_forward_all+0x5e>
 801688a:	4647      	mov	r7, r8
 801688c:	696b      	ldr	r3, [r5, #20]
 801688e:	4628      	mov	r0, r5
 8016890:	4798      	blx	r3
 8016892:	462b      	mov	r3, r5
 8016894:	692d      	ldr	r5, [r5, #16]
 8016896:	429d      	cmp	r5, r3
 8016898:	d004      	beq.n	80168a4 <ai_layers_forward_all+0x88>
 801689a:	3701      	adds	r7, #1
 801689c:	63e5      	str	r5, [r4, #60]	@ 0x3c
 801689e:	2d00      	cmp	r5, #0
 80168a0:	d1f4      	bne.n	801688c <ai_layers_forward_all+0x70>
 80168a2:	e7df      	b.n	8016864 <ai_layers_forward_all+0x48>
 80168a4:	2300      	movs	r3, #0
 80168a6:	3701      	adds	r7, #1
 80168a8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80168aa:	e7db      	b.n	8016864 <ai_layers_forward_all+0x48>

080168ac <func_dummy>:
 80168ac:	4770      	bx	lr
 80168ae:	bf00      	nop

080168b0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool>:
 80168b0:	6982      	ldr	r2, [r0, #24]
 80168b2:	8813      	ldrh	r3, [r2, #0]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	f000 81fc 	beq.w	8016cb2 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x402>
 80168ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168be:	ed2d 8b06 	vpush	{d8-d10}
 80168c2:	6852      	ldr	r2, [r2, #4]
 80168c4:	b0c5      	sub	sp, #276	@ 0x114
 80168c6:	4682      	mov	sl, r0
 80168c8:	f8d2 b004 	ldr.w	fp, [r2, #4]
 80168cc:	f1bb 0f00 	cmp.w	fp, #0
 80168d0:	d001      	beq.n	80168d6 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x26>
 80168d2:	f8db b000 	ldr.w	fp, [fp]
 80168d6:	2b01      	cmp	r3, #1
 80168d8:	f000 8237 	beq.w	8016d4a <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x49a>
 80168dc:	6911      	ldr	r1, [r2, #16]
 80168de:	9115      	str	r1, [sp, #84]	@ 0x54
 80168e0:	b109      	cbz	r1, 80168e6 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x36>
 80168e2:	6809      	ldr	r1, [r1, #0]
 80168e4:	9115      	str	r1, [sp, #84]	@ 0x54
 80168e6:	2b02      	cmp	r3, #2
 80168e8:	f000 81e0 	beq.w	8016cac <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x3fc>
 80168ec:	69d0      	ldr	r0, [r2, #28]
 80168ee:	2800      	cmp	r0, #0
 80168f0:	f000 8226 	beq.w	8016d40 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x490>
 80168f4:	8b11      	ldrh	r1, [r2, #24]
 80168f6:	f8d0 8000 	ldr.w	r8, [r0]
 80168fa:	2901      	cmp	r1, #1
 80168fc:	f200 81db 	bhi.w	8016cb6 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x406>
 8016900:	2100      	movs	r1, #0
 8016902:	9112      	str	r1, [sp, #72]	@ 0x48
 8016904:	2b03      	cmp	r3, #3
 8016906:	f000 8223 	beq.w	8016d50 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4a0>
 801690a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801690c:	2b00      	cmp	r3, #0
 801690e:	f000 821a 	beq.w	8016d46 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x496>
 8016912:	6819      	ldr	r1, [r3, #0]
 8016914:	f8da 2024 	ldr.w	r2, [sl, #36]	@ 0x24
 8016918:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801691c:	9121      	str	r1, [sp, #132]	@ 0x84
 801691e:	2a00      	cmp	r2, #0
 8016920:	f000 8207 	beq.w	8016d32 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x482>
 8016924:	689b      	ldr	r3, [r3, #8]
 8016926:	922e      	str	r2, [sp, #184]	@ 0xb8
 8016928:	9310      	str	r3, [sp, #64]	@ 0x40
 801692a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801692e:	f8db 400c 	ldr.w	r4, [fp, #12]
 8016932:	685f      	ldr	r7, [r3, #4]
 8016934:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016936:	f8da 103c 	ldr.w	r1, [sl, #60]	@ 0x3c
 801693a:	68dd      	ldr	r5, [r3, #12]
 801693c:	6863      	ldr	r3, [r4, #4]
 801693e:	680a      	ldr	r2, [r1, #0]
 8016940:	9311      	str	r3, [sp, #68]	@ 0x44
 8016942:	688b      	ldr	r3, [r1, #8]
 8016944:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8016948:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 801694c:	6889      	ldr	r1, [r1, #8]
 801694e:	9714      	str	r7, [sp, #80]	@ 0x50
 8016950:	911a      	str	r1, [sp, #104]	@ 0x68
 8016952:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8016956:	ee0a 1a10 	vmov	s20, r1
 801695a:	b2b9      	uxth	r1, r7
 801695c:	ee09 1a10 	vmov	s18, r1
 8016960:	68e9      	ldr	r1, [r5, #12]
 8016962:	9117      	str	r1, [sp, #92]	@ 0x5c
 8016964:	68a9      	ldr	r1, [r5, #8]
 8016966:	9124      	str	r1, [sp, #144]	@ 0x90
 8016968:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 801696c:	b294      	uxth	r4, r2
 801696e:	9116      	str	r1, [sp, #88]	@ 0x58
 8016970:	941e      	str	r4, [sp, #120]	@ 0x78
 8016972:	f8da 4044 	ldr.w	r4, [sl, #68]	@ 0x44
 8016976:	f8da 102c 	ldr.w	r1, [sl, #44]	@ 0x2c
 801697a:	9425      	str	r4, [sp, #148]	@ 0x94
 801697c:	f8da 404c 	ldr.w	r4, [sl, #76]	@ 0x4c
 8016980:	9426      	str	r4, [sp, #152]	@ 0x98
 8016982:	f8da 4050 	ldr.w	r4, [sl, #80]	@ 0x50
 8016986:	9413      	str	r4, [sp, #76]	@ 0x4c
 8016988:	e9d6 4600 	ldrd	r4, r6, [r6]
 801698c:	9627      	str	r6, [sp, #156]	@ 0x9c
 801698e:	2800      	cmp	r0, #0
 8016990:	f000 81c4 	beq.w	8016d1c <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x46c>
 8016994:	6880      	ldr	r0, [r0, #8]
 8016996:	2800      	cmp	r0, #0
 8016998:	f000 81c0 	beq.w	8016d1c <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x46c>
 801699c:	6986      	ldr	r6, [r0, #24]
 801699e:	2e00      	cmp	r6, #0
 80169a0:	bf08      	it	eq
 80169a2:	4630      	moveq	r0, r6
 80169a4:	9023      	str	r0, [sp, #140]	@ 0x8c
 80169a6:	b292      	uxth	r2, r2
 80169a8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80169aa:	b289      	uxth	r1, r1
 80169ac:	f10d 0cc4 	add.w	ip, sp, #196	@ 0xc4
 80169b0:	fa12 f383 	uxtah	r3, r2, r3
 80169b4:	442a      	add	r2, r5
 80169b6:	6986      	ldr	r6, [r0, #24]
 80169b8:	b224      	sxth	r4, r4
 80169ba:	442b      	add	r3, r5
 80169bc:	921c      	str	r2, [sp, #112]	@ 0x70
 80169be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80169c0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80169c4:	1a9f      	subs	r7, r3, r2
 80169c6:	aa35      	add	r2, sp, #212	@ 0xd4
 80169c8:	f8cd c100 	str.w	ip, [sp, #256]	@ 0x100
 80169cc:	9242      	str	r2, [sp, #264]	@ 0x108
 80169ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80169d2:	fbb7 f3f1 	udiv	r3, r7, r1
 80169d6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80169d8:	f240 4101 	movw	r1, #1025	@ 0x401
 80169dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80169de:	2300      	movs	r3, #0
 80169e0:	69bf      	ldr	r7, [r7, #24]
 80169e2:	933d      	str	r3, [sp, #244]	@ 0xf4
 80169e4:	9331      	str	r3, [sp, #196]	@ 0xc4
 80169e6:	9335      	str	r3, [sp, #212]	@ 0xd4
 80169e8:	9334      	str	r3, [sp, #208]	@ 0xd0
 80169ea:	9338      	str	r3, [sp, #224]	@ 0xe0
 80169ec:	9343      	str	r3, [sp, #268]	@ 0x10c
 80169ee:	9720      	str	r7, [sp, #128]	@ 0x80
 80169f0:	e9cd 3332 	strd	r3, r3, [sp, #200]	@ 0xc8
 80169f4:	e9cd 3336 	strd	r3, r3, [sp, #216]	@ 0xd8
 80169f8:	f8da 3048 	ldr.w	r3, [sl, #72]	@ 0x48
 80169fc:	e9cd 213e 	strd	r2, r1, [sp, #248]	@ 0xf8
 8016a00:	f240 4102 	movw	r1, #1026	@ 0x402
 8016a04:	9318      	str	r3, [sp, #96]	@ 0x60
 8016a06:	f8da 305c 	ldr.w	r3, [sl, #92]	@ 0x5c
 8016a0a:	9141      	str	r1, [sp, #260]	@ 0x104
 8016a0c:	4601      	mov	r1, r0
 8016a0e:	a83d      	add	r0, sp, #244	@ 0xf4
 8016a10:	9322      	str	r3, [sp, #136]	@ 0x88
 8016a12:	f00a fb13 	bl	802103c <core_tensor_clone>
 8016a16:	4631      	mov	r1, r6
 8016a18:	a839      	add	r0, sp, #228	@ 0xe4
 8016a1a:	f00a fb41 	bl	80210a0 <core_array_clone>
 8016a1e:	ab39      	add	r3, sp, #228	@ 0xe4
 8016a20:	9343      	str	r3, [sp, #268]	@ 0x10c
 8016a22:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8016a26:	f8d8 1000 	ldr.w	r1, [r8]
 8016a2a:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8016a2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016a30:	f8db 2000 	ldr.w	r2, [fp]
 8016a34:	699b      	ldr	r3, [r3, #24]
 8016a36:	911f      	str	r1, [sp, #124]	@ 0x7c
 8016a38:	689b      	ldr	r3, [r3, #8]
 8016a3a:	932a      	str	r3, [sp, #168]	@ 0xa8
 8016a3c:	f8d9 3000 	ldr.w	r3, [r9]
 8016a40:	2a00      	cmp	r2, #0
 8016a42:	f000 8152 	beq.w	8016cea <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x43a>
 8016a46:	6851      	ldr	r1, [r2, #4]
 8016a48:	2900      	cmp	r1, #0
 8016a4a:	f000 814e 	beq.w	8016cea <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x43a>
 8016a4e:	8850      	ldrh	r0, [r2, #2]
 8016a50:	2800      	cmp	r0, #0
 8016a52:	f000 814a 	beq.w	8016cea <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x43a>
 8016a56:	6809      	ldr	r1, [r1, #0]
 8016a58:	ed91 8a00 	vldr	s16, [r1]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	f000 8141 	beq.w	8016ce4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x434>
 8016a62:	6859      	ldr	r1, [r3, #4]
 8016a64:	2900      	cmp	r1, #0
 8016a66:	f000 813d 	beq.w	8016ce4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x434>
 8016a6a:	8858      	ldrh	r0, [r3, #2]
 8016a6c:	2800      	cmp	r0, #0
 8016a6e:	f000 8139 	beq.w	8016ce4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x434>
 8016a72:	6809      	ldr	r1, [r1, #0]
 8016a74:	edd1 8a00 	vldr	s17, [r1]
 8016a78:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016a7a:	f8db 0018 	ldr.w	r0, [fp, #24]
 8016a7e:	6989      	ldr	r1, [r1, #24]
 8016a80:	6880      	ldr	r0, [r0, #8]
 8016a82:	6889      	ldr	r1, [r1, #8]
 8016a84:	f8d8 e018 	ldr.w	lr, [r8, #24]
 8016a88:	912d      	str	r1, [sp, #180]	@ 0xb4
 8016a8a:	f89a 1041 	ldrb.w	r1, [sl, #65]	@ 0x41
 8016a8e:	901b      	str	r0, [sp, #108]	@ 0x6c
 8016a90:	912b      	str	r1, [sp, #172]	@ 0xac
 8016a92:	f8de 0008 	ldr.w	r0, [lr, #8]
 8016a96:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8016a98:	902c      	str	r0, [sp, #176]	@ 0xb0
 8016a9a:	b121      	cbz	r1, 8016aa6 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x1f6>
 8016a9c:	6849      	ldr	r1, [r1, #4]
 8016a9e:	911f      	str	r1, [sp, #124]	@ 0x7c
 8016aa0:	b109      	cbz	r1, 8016aa6 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x1f6>
 8016aa2:	6809      	ldr	r1, [r1, #0]
 8016aa4:	911f      	str	r1, [sp, #124]	@ 0x7c
 8016aa6:	2a00      	cmp	r2, #0
 8016aa8:	f000 8136 	beq.w	8016d18 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x468>
 8016aac:	6851      	ldr	r1, [r2, #4]
 8016aae:	2900      	cmp	r1, #0
 8016ab0:	f000 813d 	beq.w	8016d2e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x47e>
 8016ab4:	8852      	ldrh	r2, [r2, #2]
 8016ab6:	2a00      	cmp	r2, #0
 8016ab8:	f000 812e 	beq.w	8016d18 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x468>
 8016abc:	684a      	ldr	r2, [r1, #4]
 8016abe:	f992 2000 	ldrsb.w	r2, [r2]
 8016ac2:	9228      	str	r2, [sp, #160]	@ 0xa0
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	f000 8125 	beq.w	8016d14 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x464>
 8016aca:	685a      	ldr	r2, [r3, #4]
 8016acc:	2a00      	cmp	r2, #0
 8016ace:	f000 8135 	beq.w	8016d3c <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x48c>
 8016ad2:	885b      	ldrh	r3, [r3, #2]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	f000 811d 	beq.w	8016d14 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x464>
 8016ada:	6853      	ldr	r3, [r2, #4]
 8016adc:	f993 3000 	ldrsb.w	r3, [r3]
 8016ae0:	9329      	str	r3, [sp, #164]	@ 0xa4
 8016ae2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	f000 80f1 	beq.w	8016ccc <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x41c>
 8016aea:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8016aee:	f04f 0b00 	mov.w	fp, #0
 8016af2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8016af6:	fb0c f202 	mul.w	r2, ip, r2
 8016afa:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8016afe:	9412      	str	r4, [sp, #72]	@ 0x48
 8016b00:	921d      	str	r2, [sp, #116]	@ 0x74
 8016b02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016b04:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
 8016b08:	fb02 f303 	mul.w	r3, r2, r3
 8016b0c:	932f      	str	r3, [sp, #188]	@ 0xbc
 8016b0e:	b293      	uxth	r3, r2
 8016b10:	ee09 3a90 	vmov	s19, r3
 8016b14:	fa1f f38c 	uxth.w	r3, ip
 8016b18:	9319      	str	r3, [sp, #100]	@ 0x64
 8016b1a:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	@ 0x60
 8016b1e:	9316      	str	r3, [sp, #88]	@ 0x58
 8016b20:	e07a      	b.n	8016c18 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x368>
 8016b22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	da18      	bge.n	8016b5a <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2aa>
 8016b28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016b2a:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 8016b2e:	fb03 1314 	mls	r3, r3, r4, r1
 8016b32:	429a      	cmp	r2, r3
 8016b34:	d901      	bls.n	8016b3a <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x28a>
 8016b36:	6870      	ldr	r0, [r6, #4]
 8016b38:	4403      	add	r3, r0
 8016b3a:	429a      	cmp	r2, r3
 8016b3c:	d203      	bcs.n	8016b46 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x296>
 8016b3e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8016b40:	42a0      	cmp	r0, r4
 8016b42:	f040 80d5 	bne.w	8016cf0 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x440>
 8016b46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016b48:	b2a4      	uxth	r4, r4
 8016b4a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016b4c:	4413      	add	r3, r2
 8016b4e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016b50:	1b1b      	subs	r3, r3, r4
 8016b52:	4414      	add	r4, r2
 8016b54:	b21b      	sxth	r3, r3
 8016b56:	b224      	sxth	r4, r4
 8016b58:	9314      	str	r3, [sp, #80]	@ 0x50
 8016b5a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016b5c:	42a3      	cmp	r3, r4
 8016b5e:	dc33      	bgt.n	8016bc8 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x318>
 8016b60:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016b62:	2201      	movs	r2, #1
 8016b64:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8016b66:	a83d      	add	r0, sp, #244	@ 0xf4
 8016b68:	9308      	str	r3, [sp, #32]
 8016b6a:	4493      	add	fp, r2
 8016b6c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8016b70:	9207      	str	r2, [sp, #28]
 8016b72:	1ae4      	subs	r4, r4, r3
 8016b74:	9305      	str	r3, [sp, #20]
 8016b76:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8016b7a:	f8bd 2060 	ldrh.w	r2, [sp, #96]	@ 0x60
 8016b7e:	b224      	sxth	r4, r4
 8016b80:	9303      	str	r3, [sp, #12]
 8016b82:	f8bd 3090 	ldrh.w	r3, [sp, #144]	@ 0x90
 8016b86:	9201      	str	r2, [sp, #4]
 8016b88:	1a52      	subs	r2, r2, r1
 8016b8a:	9306      	str	r3, [sp, #24]
 8016b8c:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 8016b90:	b292      	uxth	r2, r2
 8016b92:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8016b94:	9304      	str	r3, [sp, #16]
 8016b96:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 8016b9a:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8016b9c:	9302      	str	r3, [sp, #8]
 8016b9e:	f8bd 3094 	ldrh.w	r3, [sp, #148]	@ 0x94
 8016ba2:	9300      	str	r3, [sp, #0]
 8016ba4:	ee19 3a10 	vmov	r3, s18
 8016ba8:	47b8      	blx	r7
 8016baa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016bac:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	@ 0x4c
 8016bb0:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8016bb2:	1ad3      	subs	r3, r2, r3
 8016bb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016bb8:	b21a      	sxth	r2, r3
 8016bba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016bbc:	695b      	ldr	r3, [r3, #20]
 8016bbe:	9212      	str	r2, [sp, #72]	@ 0x48
 8016bc0:	68da      	ldr	r2, [r3, #12]
 8016bc2:	688b      	ldr	r3, [r1, #8]
 8016bc4:	4413      	add	r3, r2
 8016bc6:	608b      	str	r3, [r1, #8]
 8016bc8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016bcc:	68da      	ldr	r2, [r3, #12]
 8016bce:	68ab      	ldr	r3, [r5, #8]
 8016bd0:	4413      	add	r3, r2
 8016bd2:	60ab      	str	r3, [r5, #8]
 8016bd4:	f8da 2024 	ldr.w	r2, [sl, #36]	@ 0x24
 8016bd8:	b132      	cbz	r2, 8016be8 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x338>
 8016bda:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8016bde:	68da      	ldr	r2, [r3, #12]
 8016be0:	68b3      	ldr	r3, [r6, #8]
 8016be2:	4413      	add	r3, r2
 8016be4:	60b3      	str	r3, [r6, #8]
 8016be6:	68ab      	ldr	r3, [r5, #8]
 8016be8:	68ea      	ldr	r2, [r5, #12]
 8016bea:	4648      	mov	r0, r9
 8016bec:	9311      	str	r3, [sp, #68]	@ 0x44
 8016bee:	9210      	str	r2, [sp, #64]	@ 0x40
 8016bf0:	f00a fa0e 	bl	8021010 <get_tensor_byte_size>
 8016bf4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016bf6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016bf8:	4410      	add	r0, r2
 8016bfa:	4283      	cmp	r3, r0
 8016bfc:	d306      	bcc.n	8016c0c <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x35c>
 8016bfe:	68eb      	ldr	r3, [r5, #12]
 8016c00:	60ab      	str	r3, [r5, #8]
 8016c02:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8016c06:	b10b      	cbz	r3, 8016c0c <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x35c>
 8016c08:	68f3      	ldr	r3, [r6, #12]
 8016c0a:	60b3      	str	r3, [r6, #8]
 8016c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c0e:	3b01      	subs	r3, #1
 8016c10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016c12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016c14:	459b      	cmp	fp, r3
 8016c16:	d259      	bcs.n	8016ccc <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x41c>
 8016c18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c1a:	3301      	adds	r3, #1
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	dd80      	ble.n	8016b22 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x272>
 8016c20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016c22:	68aa      	ldr	r2, [r5, #8]
 8016c24:	699b      	ldr	r3, [r3, #24]
 8016c26:	9210      	str	r2, [sp, #64]	@ 0x40
 8016c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016c2c:	f00a f9b0 	bl	8020f90 <ai_array_get_byte_size>
 8016c30:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8016c32:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016c34:	eef0 0a68 	vmov.f32	s1, s17
 8016c38:	930c      	str	r3, [sp, #48]	@ 0x30
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016c3e:	eeb0 0a48 	vmov.f32	s0, s16
 8016c42:	9207      	str	r2, [sp, #28]
 8016c44:	ee19 1a90 	vmov	r1, s19
 8016c48:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016c4a:	b2ba      	uxth	r2, r7
 8016c4c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8016c4e:	ed8d 9a01 	vstr	s18, [sp, #4]
 8016c52:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 8016c56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016c58:	9308      	str	r3, [sp, #32]
 8016c5a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8016c5c:	9306      	str	r3, [sp, #24]
 8016c5e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8016c60:	9305      	str	r3, [sp, #20]
 8016c62:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8016c64:	9304      	str	r3, [sp, #16]
 8016c66:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8016c68:	9303      	str	r3, [sp, #12]
 8016c6a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8016c6c:	9302      	str	r3, [sp, #8]
 8016c6e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8016c70:	9300      	str	r3, [sp, #0]
 8016c72:	ee1a 3a10 	vmov	r3, s20
 8016c76:	f000 fe85 	bl	8017984 <forward_lite_conv2d_deep_3x3_sssa8_ch>
 8016c7a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8016c7c:	2b01      	cmp	r3, #1
 8016c7e:	d021      	beq.n	8016cc4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x414>
 8016c80:	3b01      	subs	r3, #1
 8016c82:	463a      	mov	r2, r7
 8016c84:	429f      	cmp	r7, r3
 8016c86:	931c      	str	r3, [sp, #112]	@ 0x70
 8016c88:	bf28      	it	cs
 8016c8a:	461a      	movcs	r2, r3
 8016c8c:	921a      	str	r2, [sp, #104]	@ 0x68
 8016c8e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016c90:	b9a3      	cbnz	r3, 8016cbc <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x40c>
 8016c92:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016c94:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8016c96:	4413      	add	r3, r2
 8016c98:	931b      	str	r3, [sp, #108]	@ 0x6c
 8016c9a:	3401      	adds	r4, #1
 8016c9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016c9e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016ca0:	4649      	mov	r1, r9
 8016ca2:	4640      	mov	r0, r8
 8016ca4:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8016ca6:	b224      	sxth	r4, r4
 8016ca8:	47b8      	blx	r7
 8016caa:	e756      	b.n	8016b5a <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x2aa>
 8016cac:	2300      	movs	r3, #0
 8016cae:	685b      	ldr	r3, [r3, #4]
 8016cb0:	deff      	udf	#255	@ 0xff
 8016cb2:	685b      	ldr	r3, [r3, #4]
 8016cb4:	deff      	udf	#255	@ 0xff
 8016cb6:	6841      	ldr	r1, [r0, #4]
 8016cb8:	9112      	str	r1, [sp, #72]	@ 0x48
 8016cba:	e623      	b.n	8016904 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x54>
 8016cbc:	3b01      	subs	r3, #1
 8016cbe:	b29b      	uxth	r3, r3
 8016cc0:	931e      	str	r3, [sp, #120]	@ 0x78
 8016cc2:	e7ea      	b.n	8016c9a <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x3ea>
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8016cc8:	931c      	str	r3, [sp, #112]	@ 0x70
 8016cca:	e7e0      	b.n	8016c8e <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x3de>
 8016ccc:	68eb      	ldr	r3, [r5, #12]
 8016cce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016cd0:	60ab      	str	r3, [r5, #8]
 8016cd2:	68f3      	ldr	r3, [r6, #12]
 8016cd4:	60b3      	str	r3, [r6, #8]
 8016cd6:	68d3      	ldr	r3, [r2, #12]
 8016cd8:	6093      	str	r3, [r2, #8]
 8016cda:	b045      	add	sp, #276	@ 0x114
 8016cdc:	ecbd 8b06 	vpop	{d8-d10}
 8016ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ce4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8016ce8:	e6c6      	b.n	8016a78 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x1c8>
 8016cea:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8016cee:	e6b5      	b.n	8016a5c <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x1ac>
 8016cf0:	6870      	ldr	r0, [r6, #4]
 8016cf2:	4402      	add	r2, r0
 8016cf4:	4293      	cmp	r3, r2
 8016cf6:	f4bf af26 	bcs.w	8016b46 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x296>
 8016cfa:	3901      	subs	r1, #1
 8016cfc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8016cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d02:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016d06:	68f2      	ldr	r2, [r6, #12]
 8016d08:	6870      	ldr	r0, [r6, #4]
 8016d0a:	4402      	add	r2, r0
 8016d0c:	4293      	cmp	r3, r2
 8016d0e:	d3f6      	bcc.n	8016cfe <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x44e>
 8016d10:	970f      	str	r7, [sp, #60]	@ 0x3c
 8016d12:	e718      	b.n	8016b46 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x296>
 8016d14:	9329      	str	r3, [sp, #164]	@ 0xa4
 8016d16:	e6e4      	b.n	8016ae2 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x232>
 8016d18:	9228      	str	r2, [sp, #160]	@ 0xa0
 8016d1a:	e6d3      	b.n	8016ac4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x214>
 8016d1c:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016d20:	9023      	str	r0, [sp, #140]	@ 0x8c
 8016d22:	2800      	cmp	r0, #0
 8016d24:	f43f ae3f 	beq.w	80169a6 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0xf6>
 8016d28:	6880      	ldr	r0, [r0, #8]
 8016d2a:	9023      	str	r0, [sp, #140]	@ 0x8c
 8016d2c:	e63b      	b.n	80169a6 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0xf6>
 8016d2e:	9128      	str	r1, [sp, #160]	@ 0xa0
 8016d30:	e6c8      	b.n	8016ac4 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x214>
 8016d32:	4b09      	ldr	r3, [pc, #36]	@ (8016d58 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x4a8>)
 8016d34:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8016d38:	932e      	str	r3, [sp, #184]	@ 0xb8
 8016d3a:	e5f6      	b.n	801692a <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x7a>
 8016d3c:	9229      	str	r2, [sp, #164]	@ 0xa4
 8016d3e:	e6d0      	b.n	8016ae2 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x232>
 8016d40:	4680      	mov	r8, r0
 8016d42:	9012      	str	r0, [sp, #72]	@ 0x48
 8016d44:	e5de      	b.n	8016904 <forward_conv2d_deep_3x3_sssa8_ch_nl_pool+0x54>
 8016d46:	68db      	ldr	r3, [r3, #12]
 8016d48:	deff      	udf	#255	@ 0xff
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	685b      	ldr	r3, [r3, #4]
 8016d4e:	deff      	udf	#255	@ 0xff
 8016d50:	2300      	movs	r3, #0
 8016d52:	685b      	ldr	r3, [r3, #4]
 8016d54:	deff      	udf	#255	@ 0xff
 8016d56:	bf00      	nop
 8016d58:	080168ad 	.word	0x080168ad

08016d5c <forward_conv2d_sssa8_ch_nl_pool>:
 8016d5c:	6982      	ldr	r2, [r0, #24]
 8016d5e:	8813      	ldrh	r3, [r2, #0]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	f000 8230 	beq.w	80171c6 <forward_conv2d_sssa8_ch_nl_pool+0x46a>
 8016d66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d6a:	ed2d 8b06 	vpush	{d8-d10}
 8016d6e:	6852      	ldr	r2, [r2, #4]
 8016d70:	b0d1      	sub	sp, #324	@ 0x144
 8016d72:	4681      	mov	r9, r0
 8016d74:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8016d78:	f1ba 0f00 	cmp.w	sl, #0
 8016d7c:	d001      	beq.n	8016d82 <forward_conv2d_sssa8_ch_nl_pool+0x26>
 8016d7e:	f8da a000 	ldr.w	sl, [sl]
 8016d82:	2b01      	cmp	r3, #1
 8016d84:	f000 8276 	beq.w	8017274 <forward_conv2d_sssa8_ch_nl_pool+0x518>
 8016d88:	6911      	ldr	r1, [r2, #16]
 8016d8a:	911c      	str	r1, [sp, #112]	@ 0x70
 8016d8c:	b109      	cbz	r1, 8016d92 <forward_conv2d_sssa8_ch_nl_pool+0x36>
 8016d8e:	6809      	ldr	r1, [r1, #0]
 8016d90:	911c      	str	r1, [sp, #112]	@ 0x70
 8016d92:	2b02      	cmp	r3, #2
 8016d94:	f000 8214 	beq.w	80171c0 <forward_conv2d_sssa8_ch_nl_pool+0x464>
 8016d98:	69d1      	ldr	r1, [r2, #28]
 8016d9a:	2900      	cmp	r1, #0
 8016d9c:	f000 8265 	beq.w	801726a <forward_conv2d_sssa8_ch_nl_pool+0x50e>
 8016da0:	8b10      	ldrh	r0, [r2, #24]
 8016da2:	680c      	ldr	r4, [r1, #0]
 8016da4:	2801      	cmp	r0, #1
 8016da6:	9415      	str	r4, [sp, #84]	@ 0x54
 8016da8:	f200 820f 	bhi.w	80171ca <forward_conv2d_sssa8_ch_nl_pool+0x46e>
 8016dac:	2000      	movs	r0, #0
 8016dae:	9018      	str	r0, [sp, #96]	@ 0x60
 8016db0:	2b03      	cmp	r3, #3
 8016db2:	f000 8262 	beq.w	801727a <forward_conv2d_sssa8_ch_nl_pool+0x51e>
 8016db6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	f000 8259 	beq.w	8017270 <forward_conv2d_sssa8_ch_nl_pool+0x514>
 8016dbe:	6818      	ldr	r0, [r3, #0]
 8016dc0:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 8016dc4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8016dc8:	9027      	str	r0, [sp, #156]	@ 0x9c
 8016dca:	2a00      	cmp	r2, #0
 8016dcc:	f000 8247 	beq.w	801725e <forward_conv2d_sssa8_ch_nl_pool+0x502>
 8016dd0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8016dd4:	9230      	str	r2, [sp, #192]	@ 0xc0
 8016dd6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8016dda:	f8da 500c 	ldr.w	r5, [sl, #12]
 8016dde:	6852      	ldr	r2, [r2, #4]
 8016de0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8016de2:	4616      	mov	r6, r2
 8016de4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8016de6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8016dea:	b2b6      	uxth	r6, r6
 8016dec:	686c      	ldr	r4, [r5, #4]
 8016dee:	68c0      	ldr	r0, [r0, #12]
 8016df0:	9416      	str	r4, [sp, #88]	@ 0x58
 8016df2:	9622      	str	r6, [sp, #136]	@ 0x88
 8016df4:	f8bd 6058 	ldrh.w	r6, [sp, #88]	@ 0x58
 8016df8:	f8d9 303c 	ldr.w	r3, [r9, #60]	@ 0x3c
 8016dfc:	ee0a 6a90 	vmov	s21, r6
 8016e00:	68c6      	ldr	r6, [r0, #12]
 8016e02:	6880      	ldr	r0, [r0, #8]
 8016e04:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 8016e08:	9036      	str	r0, [sp, #216]	@ 0xd8
 8016e0a:	921b      	str	r2, [sp, #108]	@ 0x6c
 8016e0c:	681a      	ldr	r2, [r3, #0]
 8016e0e:	f8d9 7058 	ldr.w	r7, [r9, #88]	@ 0x58
 8016e12:	9621      	str	r6, [sp, #132]	@ 0x84
 8016e14:	e9d5 5002 	ldrd	r5, r0, [r5, #8]
 8016e18:	951d      	str	r5, [sp, #116]	@ 0x74
 8016e1a:	f8b9 5028 	ldrh.w	r5, [r9, #40]	@ 0x28
 8016e1e:	9531      	str	r5, [sp, #196]	@ 0xc4
 8016e20:	b2a5      	uxth	r5, r4
 8016e22:	9532      	str	r5, [sp, #200]	@ 0xc8
 8016e24:	b295      	uxth	r5, r2
 8016e26:	9517      	str	r5, [sp, #92]	@ 0x5c
 8016e28:	889d      	ldrh	r5, [r3, #4]
 8016e2a:	689b      	ldr	r3, [r3, #8]
 8016e2c:	9533      	str	r5, [sp, #204]	@ 0xcc
 8016e2e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8016e32:	9526      	str	r5, [sp, #152]	@ 0x98
 8016e34:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8016e38:	9534      	str	r5, [sp, #208]	@ 0xd0
 8016e3a:	f8d9 5044 	ldr.w	r5, [r9, #68]	@ 0x44
 8016e3e:	9537      	str	r5, [sp, #220]	@ 0xdc
 8016e40:	f8d9 504c 	ldr.w	r5, [r9, #76]	@ 0x4c
 8016e44:	9538      	str	r5, [sp, #224]	@ 0xe0
 8016e46:	f8d9 5050 	ldr.w	r5, [r9, #80]	@ 0x50
 8016e4a:	951a      	str	r5, [sp, #104]	@ 0x68
 8016e4c:	683d      	ldr	r5, [r7, #0]
 8016e4e:	9528      	str	r5, [sp, #160]	@ 0xa0
 8016e50:	687d      	ldr	r5, [r7, #4]
 8016e52:	9539      	str	r5, [sp, #228]	@ 0xe4
 8016e54:	2900      	cmp	r1, #0
 8016e56:	f000 81f5 	beq.w	8017244 <forward_conv2d_sssa8_ch_nl_pool+0x4e8>
 8016e5a:	6889      	ldr	r1, [r1, #8]
 8016e5c:	2900      	cmp	r1, #0
 8016e5e:	f000 81f1 	beq.w	8017244 <forward_conv2d_sssa8_ch_nl_pool+0x4e8>
 8016e62:	698d      	ldr	r5, [r1, #24]
 8016e64:	2d00      	cmp	r5, #0
 8016e66:	bf08      	it	eq
 8016e68:	4629      	moveq	r1, r5
 8016e6a:	ee09 1a90 	vmov	s19, r1
 8016e6e:	b292      	uxth	r2, r2
 8016e70:	f8db 6018 	ldr.w	r6, [fp, #24]
 8016e74:	b2a1      	uxth	r1, r4
 8016e76:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8016e7a:	fa12 f783 	uxtah	r7, r2, r3
 8016e7e:	1813      	adds	r3, r2, r0
 8016e80:	aa41      	add	r2, sp, #260	@ 0x104
 8016e82:	9124      	str	r1, [sp, #144]	@ 0x90
 8016e84:	4407      	add	r7, r0
 8016e86:	931e      	str	r3, [sp, #120]	@ 0x78
 8016e88:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8016e8a:	f10d 0cf4 	add.w	ip, sp, #244	@ 0xf4
 8016e8e:	924e      	str	r2, [sp, #312]	@ 0x138
 8016e90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016e94:	1aff      	subs	r7, r7, r3
 8016e96:	ac45      	add	r4, sp, #276	@ 0x114
 8016e98:	a849      	add	r0, sp, #292	@ 0x124
 8016e9a:	f8cd c130 	str.w	ip, [sp, #304]	@ 0x130
 8016e9e:	fbb7 f3f1 	udiv	r3, r7, r1
 8016ea2:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8016ea4:	f240 4101 	movw	r1, #1025	@ 0x401
 8016ea8:	9314      	str	r3, [sp, #80]	@ 0x50
 8016eaa:	2300      	movs	r3, #0
 8016eac:	69bf      	ldr	r7, [r7, #24]
 8016eae:	9349      	str	r3, [sp, #292]	@ 0x124
 8016eb0:	933d      	str	r3, [sp, #244]	@ 0xf4
 8016eb2:	9341      	str	r3, [sp, #260]	@ 0x104
 8016eb4:	9340      	str	r3, [sp, #256]	@ 0x100
 8016eb6:	9344      	str	r3, [sp, #272]	@ 0x110
 8016eb8:	934f      	str	r3, [sp, #316]	@ 0x13c
 8016eba:	9729      	str	r7, [sp, #164]	@ 0xa4
 8016ebc:	e9cd 333e 	strd	r3, r3, [sp, #248]	@ 0xf8
 8016ec0:	e9cd 3342 	strd	r3, r3, [sp, #264]	@ 0x108
 8016ec4:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8016ec8:	e9cd 214a 	strd	r2, r1, [sp, #296]	@ 0x128
 8016ecc:	f240 4102 	movw	r1, #1026	@ 0x402
 8016ed0:	9323      	str	r3, [sp, #140]	@ 0x8c
 8016ed2:	f8d9 305c 	ldr.w	r3, [r9, #92]	@ 0x5c
 8016ed6:	914d      	str	r1, [sp, #308]	@ 0x134
 8016ed8:	4659      	mov	r1, fp
 8016eda:	9335      	str	r3, [sp, #212]	@ 0xd4
 8016edc:	f00a f8ae 	bl	802103c <core_tensor_clone>
 8016ee0:	4631      	mov	r1, r6
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	f00a f8dc 	bl	80210a0 <core_array_clone>
 8016ee8:	944f      	str	r4, [sp, #316]	@ 0x13c
 8016eea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016eee:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8016ef0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8016ef4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8016ef6:	6809      	ldr	r1, [r1, #0]
 8016ef8:	699b      	ldr	r3, [r3, #24]
 8016efa:	f8da 2000 	ldr.w	r2, [sl]
 8016efe:	689b      	ldr	r3, [r3, #8]
 8016f00:	f9bd 40a0 	ldrsh.w	r4, [sp, #160]	@ 0xa0
 8016f04:	932c      	str	r3, [sp, #176]	@ 0xb0
 8016f06:	9125      	str	r1, [sp, #148]	@ 0x94
 8016f08:	f8d8 3000 	ldr.w	r3, [r8]
 8016f0c:	2a00      	cmp	r2, #0
 8016f0e:	f000 8181 	beq.w	8017214 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 8016f12:	6851      	ldr	r1, [r2, #4]
 8016f14:	2900      	cmp	r1, #0
 8016f16:	f000 817d 	beq.w	8017214 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 8016f1a:	8850      	ldrh	r0, [r2, #2]
 8016f1c:	2800      	cmp	r0, #0
 8016f1e:	f000 8179 	beq.w	8017214 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 8016f22:	6809      	ldr	r1, [r1, #0]
 8016f24:	ed91 8a00 	vldr	s16, [r1]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	f000 8170 	beq.w	801720e <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 8016f2e:	6859      	ldr	r1, [r3, #4]
 8016f30:	2900      	cmp	r1, #0
 8016f32:	f000 816c 	beq.w	801720e <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 8016f36:	8858      	ldrh	r0, [r3, #2]
 8016f38:	2800      	cmp	r0, #0
 8016f3a:	f000 8168 	beq.w	801720e <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 8016f3e:	6809      	ldr	r1, [r1, #0]
 8016f40:	edd1 8a00 	vldr	s17, [r1]
 8016f44:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8016f46:	f8da 0018 	ldr.w	r0, [sl, #24]
 8016f4a:	f8d1 e018 	ldr.w	lr, [r1, #24]
 8016f4e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016f50:	6880      	ldr	r0, [r0, #8]
 8016f52:	6989      	ldr	r1, [r1, #24]
 8016f54:	9019      	str	r0, [sp, #100]	@ 0x64
 8016f56:	6889      	ldr	r1, [r1, #8]
 8016f58:	f8de 0008 	ldr.w	r0, [lr, #8]
 8016f5c:	912f      	str	r1, [sp, #188]	@ 0xbc
 8016f5e:	f899 1041 	ldrb.w	r1, [r9, #65]	@ 0x41
 8016f62:	902e      	str	r0, [sp, #184]	@ 0xb8
 8016f64:	912d      	str	r1, [sp, #180]	@ 0xb4
 8016f66:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8016f68:	b121      	cbz	r1, 8016f74 <forward_conv2d_sssa8_ch_nl_pool+0x218>
 8016f6a:	6849      	ldr	r1, [r1, #4]
 8016f6c:	9125      	str	r1, [sp, #148]	@ 0x94
 8016f6e:	b109      	cbz	r1, 8016f74 <forward_conv2d_sssa8_ch_nl_pool+0x218>
 8016f70:	6809      	ldr	r1, [r1, #0]
 8016f72:	9125      	str	r1, [sp, #148]	@ 0x94
 8016f74:	2a00      	cmp	r2, #0
 8016f76:	f000 8163 	beq.w	8017240 <forward_conv2d_sssa8_ch_nl_pool+0x4e4>
 8016f7a:	6851      	ldr	r1, [r2, #4]
 8016f7c:	2900      	cmp	r1, #0
 8016f7e:	f000 816c 	beq.w	801725a <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 8016f82:	8852      	ldrh	r2, [r2, #2]
 8016f84:	2a00      	cmp	r2, #0
 8016f86:	f000 815b 	beq.w	8017240 <forward_conv2d_sssa8_ch_nl_pool+0x4e4>
 8016f8a:	684a      	ldr	r2, [r1, #4]
 8016f8c:	f992 2000 	ldrsb.w	r2, [r2]
 8016f90:	922a      	str	r2, [sp, #168]	@ 0xa8
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	f000 8152 	beq.w	801723c <forward_conv2d_sssa8_ch_nl_pool+0x4e0>
 8016f98:	685a      	ldr	r2, [r3, #4]
 8016f9a:	2a00      	cmp	r2, #0
 8016f9c:	f000 8163 	beq.w	8017266 <forward_conv2d_sssa8_ch_nl_pool+0x50a>
 8016fa0:	885b      	ldrh	r3, [r3, #2]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	f000 814a 	beq.w	801723c <forward_conv2d_sssa8_ch_nl_pool+0x4e0>
 8016fa8:	6853      	ldr	r3, [r2, #4]
 8016faa:	f993 3000 	ldrsb.w	r3, [r3]
 8016fae:	932b      	str	r3, [sp, #172]	@ 0xac
 8016fb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	f000 811f 	beq.w	80171f6 <forward_conv2d_sssa8_ch_nl_pool+0x49a>
 8016fb8:	f8bd 206c 	ldrh.w	r2, [sp, #108]	@ 0x6c
 8016fbc:	f04f 0a00 	mov.w	sl, #0
 8016fc0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8016fc2:	fb0c f202 	mul.w	r2, ip, r2
 8016fc6:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8016fca:	9418      	str	r4, [sp, #96]	@ 0x60
 8016fcc:	ee09 2a10 	vmov	s18, r2
 8016fd0:	fa1f f28c 	uxth.w	r2, ip
 8016fd4:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 8016fd8:	9220      	str	r2, [sp, #128]	@ 0x80
 8016fda:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016fdc:	fb01 f202 	mul.w	r2, r1, r2
 8016fe0:	fb03 f202 	mul.w	r2, r3, r2
 8016fe4:	fb01 f303 	mul.w	r3, r1, r3
 8016fe8:	923a      	str	r2, [sp, #232]	@ 0xe8
 8016fea:	933b      	str	r3, [sp, #236]	@ 0xec
 8016fec:	b28b      	uxth	r3, r1
 8016fee:	ee0a 3a10 	vmov	s20, r3
 8016ff2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8016ff6:	931d      	str	r3, [sp, #116]	@ 0x74
 8016ff8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8016ffa:	931f      	str	r3, [sp, #124]	@ 0x7c
 8016ffc:	e0be      	b.n	801717c <forward_conv2d_sssa8_ch_nl_pool+0x420>
 8016ffe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8017000:	68aa      	ldr	r2, [r5, #8]
 8017002:	699b      	ldr	r3, [r3, #24]
 8017004:	9215      	str	r2, [sp, #84]	@ 0x54
 8017006:	e9d3 0100 	ldrd	r0, r1, [r3]
 801700a:	f009 ffc1 	bl	8020f90 <ai_array_get_byte_size>
 801700e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8017010:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017012:	eef0 0a68 	vmov.f32	s1, s17
 8017016:	930c      	str	r3, [sp, #48]	@ 0x30
 8017018:	eeb0 0a48 	vmov.f32	s0, s16
 801701c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801701e:	ee1a 1a10 	vmov	r1, s20
 8017022:	920d      	str	r2, [sp, #52]	@ 0x34
 8017024:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017026:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8017028:	9011      	str	r0, [sp, #68]	@ 0x44
 801702a:	930a      	str	r3, [sp, #40]	@ 0x28
 801702c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801702e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017030:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8017032:	9308      	str	r3, [sp, #32]
 8017034:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017036:	9307      	str	r3, [sp, #28]
 8017038:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 801703a:	9306      	str	r3, [sp, #24]
 801703c:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 801703e:	9305      	str	r3, [sp, #20]
 8017040:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8017042:	9304      	str	r3, [sp, #16]
 8017044:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8017046:	9301      	str	r3, [sp, #4]
 8017048:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801704a:	9300      	str	r3, [sp, #0]
 801704c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801704e:	9312      	str	r3, [sp, #72]	@ 0x48
 8017050:	2301      	movs	r3, #1
 8017052:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017054:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8017056:	930e      	str	r3, [sp, #56]	@ 0x38
 8017058:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 801705c:	9303      	str	r3, [sp, #12]
 801705e:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	@ 0xd0
 8017062:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8017064:	9302      	str	r3, [sp, #8]
 8017066:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8017068:	b2ba      	uxth	r2, r7
 801706a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801706c:	429c      	cmp	r4, r3
 801706e:	bf08      	it	eq
 8017070:	f1ba 0f00 	cmpeq.w	sl, #0
 8017074:	bf0c      	ite	eq
 8017076:	2301      	moveq	r3, #1
 8017078:	2300      	movne	r3, #0
 801707a:	9310      	str	r3, [sp, #64]	@ 0x40
 801707c:	ee1a 3a90 	vmov	r3, s21
 8017080:	f000 fd28 	bl	8017ad4 <forward_lite_conv2d_sssa8_ch>
 8017084:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8017086:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8017088:	4293      	cmp	r3, r2
 801708a:	f000 80b0 	beq.w	80171ee <forward_conv2d_sssa8_ch_nl_pool+0x492>
 801708e:	1ad3      	subs	r3, r2, r3
 8017090:	463a      	mov	r2, r7
 8017092:	429f      	cmp	r7, r3
 8017094:	931e      	str	r3, [sp, #120]	@ 0x78
 8017096:	bf28      	it	cs
 8017098:	461a      	movcs	r2, r3
 801709a:	921f      	str	r2, [sp, #124]	@ 0x7c
 801709c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801709e:	2b00      	cmp	r3, #0
 80170a0:	f040 8096 	bne.w	80171d0 <forward_conv2d_sssa8_ch_nl_pool+0x474>
 80170a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80170a6:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 80170a8:	4413      	add	r3, r2
 80170aa:	9319      	str	r3, [sp, #100]	@ 0x64
 80170ac:	3401      	adds	r4, #1
 80170ae:	ee19 3a90 	vmov	r3, s19
 80170b2:	ee19 2a10 	vmov	r2, s18
 80170b6:	4641      	mov	r1, r8
 80170b8:	b224      	sxth	r4, r4
 80170ba:	4658      	mov	r0, fp
 80170bc:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
 80170be:	47b8      	blx	r7
 80170c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80170c2:	429c      	cmp	r4, r3
 80170c4:	db32      	blt.n	801712c <forward_conv2d_sssa8_ch_nl_pool+0x3d0>
 80170c6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80170c8:	2201      	movs	r2, #1
 80170ca:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80170cc:	a849      	add	r0, sp, #292	@ 0x124
 80170ce:	9308      	str	r3, [sp, #32]
 80170d0:	4492      	add	sl, r2
 80170d2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80170d6:	9207      	str	r2, [sp, #28]
 80170d8:	1ae4      	subs	r4, r4, r3
 80170da:	9305      	str	r3, [sp, #20]
 80170dc:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 80170e0:	f8bd 208c 	ldrh.w	r2, [sp, #140]	@ 0x8c
 80170e4:	b224      	sxth	r4, r4
 80170e6:	9303      	str	r3, [sp, #12]
 80170e8:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	@ 0xd8
 80170ec:	9201      	str	r2, [sp, #4]
 80170ee:	1a52      	subs	r2, r2, r1
 80170f0:	9306      	str	r3, [sp, #24]
 80170f2:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	@ 0xe0
 80170f6:	b292      	uxth	r2, r2
 80170f8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80170fa:	9304      	str	r3, [sp, #16]
 80170fc:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	@ 0xe4
 8017100:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 8017102:	9302      	str	r3, [sp, #8]
 8017104:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	@ 0xdc
 8017108:	9300      	str	r3, [sp, #0]
 801710a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801710c:	47b8      	blx	r7
 801710e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017110:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	@ 0x68
 8017114:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8017116:	1ad3      	subs	r3, r2, r3
 8017118:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801711c:	b21a      	sxth	r2, r3
 801711e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8017120:	695b      	ldr	r3, [r3, #20]
 8017122:	9218      	str	r2, [sp, #96]	@ 0x60
 8017124:	68da      	ldr	r2, [r3, #12]
 8017126:	688b      	ldr	r3, [r1, #8]
 8017128:	4413      	add	r3, r2
 801712a:	608b      	str	r3, [r1, #8]
 801712c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8017130:	68da      	ldr	r2, [r3, #12]
 8017132:	68ab      	ldr	r3, [r5, #8]
 8017134:	4413      	add	r3, r2
 8017136:	60ab      	str	r3, [r5, #8]
 8017138:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 801713c:	b132      	cbz	r2, 801714c <forward_conv2d_sssa8_ch_nl_pool+0x3f0>
 801713e:	f8db 3014 	ldr.w	r3, [fp, #20]
 8017142:	68da      	ldr	r2, [r3, #12]
 8017144:	68b3      	ldr	r3, [r6, #8]
 8017146:	4413      	add	r3, r2
 8017148:	60b3      	str	r3, [r6, #8]
 801714a:	68ab      	ldr	r3, [r5, #8]
 801714c:	68ea      	ldr	r2, [r5, #12]
 801714e:	4640      	mov	r0, r8
 8017150:	9316      	str	r3, [sp, #88]	@ 0x58
 8017152:	9215      	str	r2, [sp, #84]	@ 0x54
 8017154:	f009 ff5c 	bl	8021010 <get_tensor_byte_size>
 8017158:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801715a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801715c:	4410      	add	r0, r2
 801715e:	4283      	cmp	r3, r0
 8017160:	d306      	bcc.n	8017170 <forward_conv2d_sssa8_ch_nl_pool+0x414>
 8017162:	68eb      	ldr	r3, [r5, #12]
 8017164:	60ab      	str	r3, [r5, #8]
 8017166:	f8d9 3024 	ldr.w	r3, [r9, #36]	@ 0x24
 801716a:	b10b      	cbz	r3, 8017170 <forward_conv2d_sssa8_ch_nl_pool+0x414>
 801716c:	68f3      	ldr	r3, [r6, #12]
 801716e:	60b3      	str	r3, [r6, #8]
 8017170:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017172:	3b01      	subs	r3, #1
 8017174:	9314      	str	r3, [sp, #80]	@ 0x50
 8017176:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8017178:	459a      	cmp	sl, r3
 801717a:	d23c      	bcs.n	80171f6 <forward_conv2d_sssa8_ch_nl_pool+0x49a>
 801717c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801717e:	3301      	adds	r3, #1
 8017180:	2b00      	cmp	r3, #0
 8017182:	f73f af3c 	bgt.w	8016ffe <forward_conv2d_sssa8_ch_nl_pool+0x2a2>
 8017186:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017188:	2b00      	cmp	r3, #0
 801718a:	da99      	bge.n	80170c0 <forward_conv2d_sssa8_ch_nl_pool+0x364>
 801718c:	ee19 3a10 	vmov	r3, s18
 8017190:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 8017194:	fb03 1314 	mls	r3, r3, r4, r1
 8017198:	429a      	cmp	r2, r3
 801719a:	d901      	bls.n	80171a0 <forward_conv2d_sssa8_ch_nl_pool+0x444>
 801719c:	6870      	ldr	r0, [r6, #4]
 801719e:	4403      	add	r3, r0
 80171a0:	429a      	cmp	r2, r3
 80171a2:	d202      	bcs.n	80171aa <forward_conv2d_sssa8_ch_nl_pool+0x44e>
 80171a4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80171a6:	42a0      	cmp	r0, r4
 80171a8:	d137      	bne.n	801721a <forward_conv2d_sssa8_ch_nl_pool+0x4be>
 80171aa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80171ac:	b2a4      	uxth	r4, r4
 80171ae:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80171b0:	4413      	add	r3, r2
 80171b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80171b4:	1b1b      	subs	r3, r3, r4
 80171b6:	4414      	add	r4, r2
 80171b8:	b21b      	sxth	r3, r3
 80171ba:	b224      	sxth	r4, r4
 80171bc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80171be:	e77f      	b.n	80170c0 <forward_conv2d_sssa8_ch_nl_pool+0x364>
 80171c0:	2300      	movs	r3, #0
 80171c2:	685b      	ldr	r3, [r3, #4]
 80171c4:	deff      	udf	#255	@ 0xff
 80171c6:	685b      	ldr	r3, [r3, #4]
 80171c8:	deff      	udf	#255	@ 0xff
 80171ca:	6848      	ldr	r0, [r1, #4]
 80171cc:	9018      	str	r0, [sp, #96]	@ 0x60
 80171ce:	e5ef      	b.n	8016db0 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 80171d0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80171d2:	461a      	mov	r2, r3
 80171d4:	1a5b      	subs	r3, r3, r1
 80171d6:	d505      	bpl.n	80171e4 <forward_conv2d_sssa8_ch_nl_pool+0x488>
 80171d8:	1a8a      	subs	r2, r1, r2
 80171da:	983b      	ldr	r0, [sp, #236]	@ 0xec
 80171dc:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80171de:	fb00 1202 	mla	r2, r0, r2, r1
 80171e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80171e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80171e8:	b29b      	uxth	r3, r3
 80171ea:	9317      	str	r3, [sp, #92]	@ 0x5c
 80171ec:	e75e      	b.n	80170ac <forward_conv2d_sssa8_ch_nl_pool+0x350>
 80171ee:	2300      	movs	r3, #0
 80171f0:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
 80171f4:	e752      	b.n	801709c <forward_conv2d_sssa8_ch_nl_pool+0x340>
 80171f6:	68eb      	ldr	r3, [r5, #12]
 80171f8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80171fa:	60ab      	str	r3, [r5, #8]
 80171fc:	68f3      	ldr	r3, [r6, #12]
 80171fe:	60b3      	str	r3, [r6, #8]
 8017200:	68d3      	ldr	r3, [r2, #12]
 8017202:	6093      	str	r3, [r2, #8]
 8017204:	b051      	add	sp, #324	@ 0x144
 8017206:	ecbd 8b06 	vpop	{d8-d10}
 801720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801720e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8017212:	e697      	b.n	8016f44 <forward_conv2d_sssa8_ch_nl_pool+0x1e8>
 8017214:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8017218:	e686      	b.n	8016f28 <forward_conv2d_sssa8_ch_nl_pool+0x1cc>
 801721a:	6870      	ldr	r0, [r6, #4]
 801721c:	4402      	add	r2, r0
 801721e:	4293      	cmp	r3, r2
 8017220:	d2c3      	bcs.n	80171aa <forward_conv2d_sssa8_ch_nl_pool+0x44e>
 8017222:	3901      	subs	r1, #1
 8017224:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017226:	f813 2b01 	ldrb.w	r2, [r3], #1
 801722a:	f801 2f01 	strb.w	r2, [r1, #1]!
 801722e:	68f2      	ldr	r2, [r6, #12]
 8017230:	6870      	ldr	r0, [r6, #4]
 8017232:	4402      	add	r2, r0
 8017234:	4293      	cmp	r3, r2
 8017236:	d3f6      	bcc.n	8017226 <forward_conv2d_sssa8_ch_nl_pool+0x4ca>
 8017238:	9714      	str	r7, [sp, #80]	@ 0x50
 801723a:	e7b6      	b.n	80171aa <forward_conv2d_sssa8_ch_nl_pool+0x44e>
 801723c:	932b      	str	r3, [sp, #172]	@ 0xac
 801723e:	e6b7      	b.n	8016fb0 <forward_conv2d_sssa8_ch_nl_pool+0x254>
 8017240:	922a      	str	r2, [sp, #168]	@ 0xa8
 8017242:	e6a6      	b.n	8016f92 <forward_conv2d_sssa8_ch_nl_pool+0x236>
 8017244:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8017248:	ee09 1a90 	vmov	s19, r1
 801724c:	2900      	cmp	r1, #0
 801724e:	f43f ae0e 	beq.w	8016e6e <forward_conv2d_sssa8_ch_nl_pool+0x112>
 8017252:	6889      	ldr	r1, [r1, #8]
 8017254:	ee09 1a90 	vmov	s19, r1
 8017258:	e609      	b.n	8016e6e <forward_conv2d_sssa8_ch_nl_pool+0x112>
 801725a:	912a      	str	r1, [sp, #168]	@ 0xa8
 801725c:	e699      	b.n	8016f92 <forward_conv2d_sssa8_ch_nl_pool+0x236>
 801725e:	4b08      	ldr	r3, [pc, #32]	@ (8017280 <forward_conv2d_sssa8_ch_nl_pool+0x524>)
 8017260:	46c3      	mov	fp, r8
 8017262:	9330      	str	r3, [sp, #192]	@ 0xc0
 8017264:	e5b7      	b.n	8016dd6 <forward_conv2d_sssa8_ch_nl_pool+0x7a>
 8017266:	922b      	str	r2, [sp, #172]	@ 0xac
 8017268:	e6a2      	b.n	8016fb0 <forward_conv2d_sssa8_ch_nl_pool+0x254>
 801726a:	9115      	str	r1, [sp, #84]	@ 0x54
 801726c:	9118      	str	r1, [sp, #96]	@ 0x60
 801726e:	e59f      	b.n	8016db0 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 8017270:	68db      	ldr	r3, [r3, #12]
 8017272:	deff      	udf	#255	@ 0xff
 8017274:	2300      	movs	r3, #0
 8017276:	685b      	ldr	r3, [r3, #4]
 8017278:	deff      	udf	#255	@ 0xff
 801727a:	2300      	movs	r3, #0
 801727c:	685b      	ldr	r3, [r3, #4]
 801727e:	deff      	udf	#255	@ 0xff
 8017280:	080168ad 	.word	0x080168ad

08017284 <forward_dense_integer_SSSA_ch>:
 8017284:	6983      	ldr	r3, [r0, #24]
 8017286:	8818      	ldrh	r0, [r3, #0]
 8017288:	2800      	cmp	r0, #0
 801728a:	f000 80af 	beq.w	80173ec <forward_dense_integer_SSSA_ch+0x168>
 801728e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017292:	685c      	ldr	r4, [r3, #4]
 8017294:	b08f      	sub	sp, #60	@ 0x3c
 8017296:	6863      	ldr	r3, [r4, #4]
 8017298:	b103      	cbz	r3, 801729c <forward_dense_integer_SSSA_ch+0x18>
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	2801      	cmp	r0, #1
 801729e:	f000 813b 	beq.w	8017518 <forward_dense_integer_SSSA_ch+0x294>
 80172a2:	6922      	ldr	r2, [r4, #16]
 80172a4:	b102      	cbz	r2, 80172a8 <forward_dense_integer_SSSA_ch+0x24>
 80172a6:	6812      	ldr	r2, [r2, #0]
 80172a8:	2802      	cmp	r0, #2
 80172aa:	f000 8138 	beq.w	801751e <forward_dense_integer_SSSA_ch+0x29a>
 80172ae:	69e5      	ldr	r5, [r4, #28]
 80172b0:	2d00      	cmp	r5, #0
 80172b2:	f000 80f2 	beq.w	801749a <forward_dense_integer_SSSA_ch+0x216>
 80172b6:	8b26      	ldrh	r6, [r4, #24]
 80172b8:	6829      	ldr	r1, [r5, #0]
 80172ba:	2e01      	cmp	r6, #1
 80172bc:	f240 8117 	bls.w	80174ee <forward_dense_integer_SSSA_ch+0x26a>
 80172c0:	686d      	ldr	r5, [r5, #4]
 80172c2:	2803      	cmp	r0, #3
 80172c4:	f000 812e 	beq.w	8017524 <forward_dense_integer_SSSA_ch+0x2a0>
 80172c8:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 80172cc:	69a8      	ldr	r0, [r5, #24]
 80172ce:	f1b8 0f00 	cmp.w	r8, #0
 80172d2:	f000 80f9 	beq.w	80174c8 <forward_dense_integer_SSSA_ch+0x244>
 80172d6:	6880      	ldr	r0, [r0, #8]
 80172d8:	68dc      	ldr	r4, [r3, #12]
 80172da:	900d      	str	r0, [sp, #52]	@ 0x34
 80172dc:	68d0      	ldr	r0, [r2, #12]
 80172de:	6866      	ldr	r6, [r4, #4]
 80172e0:	f8d8 8000 	ldr.w	r8, [r8]
 80172e4:	6995      	ldr	r5, [r2, #24]
 80172e6:	fa1f fa86 	uxth.w	sl, r6
 80172ea:	9609      	str	r6, [sp, #36]	@ 0x24
 80172ec:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 80172f0:	68c0      	ldr	r0, [r0, #12]
 80172f2:	fa1f fb89 	uxth.w	fp, r9
 80172f6:	fb00 f004 	mul.w	r0, r0, r4
 80172fa:	699c      	ldr	r4, [r3, #24]
 80172fc:	9008      	str	r0, [sp, #32]
 80172fe:	f1b8 0f00 	cmp.w	r8, #0
 8017302:	d003      	beq.n	801730c <forward_dense_integer_SSSA_ch+0x88>
 8017304:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8017308:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	f8d2 c000 	ldr.w	ip, [r2]
 8017312:	6808      	ldr	r0, [r1, #0]
 8017314:	698a      	ldr	r2, [r1, #24]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d076      	beq.n	8017408 <forward_dense_integer_SSSA_ch+0x184>
 801731a:	6859      	ldr	r1, [r3, #4]
 801731c:	2900      	cmp	r1, #0
 801731e:	f000 809f 	beq.w	8017460 <forward_dense_integer_SSSA_ch+0x1dc>
 8017322:	885e      	ldrh	r6, [r3, #2]
 8017324:	2e00      	cmp	r6, #0
 8017326:	f000 808b 	beq.w	8017440 <forward_dense_integer_SSSA_ch+0x1bc>
 801732a:	680f      	ldr	r7, [r1, #0]
 801732c:	ed97 0a00 	vldr	s0, [r7]
 8017330:	f1bc 0f00 	cmp.w	ip, #0
 8017334:	f000 808a 	beq.w	801744c <forward_dense_integer_SSSA_ch+0x1c8>
 8017338:	f8dc e004 	ldr.w	lr, [ip, #4]
 801733c:	f1be 0f00 	cmp.w	lr, #0
 8017340:	f000 8099 	beq.w	8017476 <forward_dense_integer_SSSA_ch+0x1f2>
 8017344:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8017348:	2e00      	cmp	r6, #0
 801734a:	d051      	beq.n	80173f0 <forward_dense_integer_SSSA_ch+0x16c>
 801734c:	6897      	ldr	r7, [r2, #8]
 801734e:	f8de 2000 	ldr.w	r2, [lr]
 8017352:	68ad      	ldr	r5, [r5, #8]
 8017354:	68a4      	ldr	r4, [r4, #8]
 8017356:	edd2 0a00 	vldr	s1, [r2]
 801735a:	2900      	cmp	r1, #0
 801735c:	d052      	beq.n	8017404 <forward_dense_integer_SSSA_ch+0x180>
 801735e:	885b      	ldrh	r3, [r3, #2]
 8017360:	2b00      	cmp	r3, #0
 8017362:	f000 8091 	beq.w	8017488 <forward_dense_integer_SSSA_ch+0x204>
 8017366:	684b      	ldr	r3, [r1, #4]
 8017368:	f993 3000 	ldrsb.w	r3, [r3]
 801736c:	930c      	str	r3, [sp, #48]	@ 0x30
 801736e:	f1bc 0f00 	cmp.w	ip, #0
 8017372:	f000 80ce 	beq.w	8017512 <forward_dense_integer_SSSA_ch+0x28e>
 8017376:	f1be 0f00 	cmp.w	lr, #0
 801737a:	f000 808b 	beq.w	8017494 <forward_dense_integer_SSSA_ch+0x210>
 801737e:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8017382:	2e00      	cmp	r6, #0
 8017384:	d156      	bne.n	8017434 <forward_dense_integer_SSSA_ch+0x1b0>
 8017386:	960b      	str	r6, [sp, #44]	@ 0x2c
 8017388:	b110      	cbz	r0, 8017390 <forward_dense_integer_SSSA_ch+0x10c>
 801738a:	6840      	ldr	r0, [r0, #4]
 801738c:	b100      	cbz	r0, 8017390 <forward_dense_integer_SSSA_ch+0x10c>
 801738e:	6800      	ldr	r0, [r0, #0]
 8017390:	fa1f f989 	uxth.w	r9, r9
 8017394:	4642      	mov	r2, r8
 8017396:	4659      	mov	r1, fp
 8017398:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
 801739c:	930a      	str	r3, [sp, #40]	@ 0x28
 801739e:	f001 f9e5 	bl	801876c <align_factor_ch>
 80173a2:	9b08      	ldr	r3, [sp, #32]
 80173a4:	b1fb      	cbz	r3, 80173e6 <forward_dense_integer_SSSA_ch+0x162>
 80173a6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80173aa:	4652      	mov	r2, sl
 80173ac:	2600      	movs	r6, #0
 80173ae:	468a      	mov	sl, r1
 80173b0:	4639      	mov	r1, r7
 80173b2:	4647      	mov	r7, r8
 80173b4:	4698      	mov	r8, r3
 80173b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80173b8:	3601      	adds	r6, #1
 80173ba:	4620      	mov	r0, r4
 80173bc:	4454      	add	r4, sl
 80173be:	9304      	str	r3, [sp, #16]
 80173c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80173c2:	9303      	str	r3, [sp, #12]
 80173c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173c6:	9302      	str	r3, [sp, #8]
 80173c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80173ca:	e9cd 5705 	strd	r5, r7, [sp, #20]
 80173ce:	e9cd 7300 	strd	r7, r3, [sp]
 80173d2:	465b      	mov	r3, fp
 80173d4:	444d      	add	r5, r9
 80173d6:	e9cd 1208 	strd	r1, r2, [sp, #32]
 80173da:	f001 fd6d 	bl	8018eb8 <st_sssa8_ch_fully_connected>
 80173de:	4546      	cmp	r6, r8
 80173e0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80173e4:	d1e7      	bne.n	80173b6 <forward_dense_integer_SSSA_ch+0x132>
 80173e6:	b00f      	add	sp, #60	@ 0x3c
 80173e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173ec:	6843      	ldr	r3, [r0, #4]
 80173ee:	deff      	udf	#255	@ 0xff
 80173f0:	68ad      	ldr	r5, [r5, #8]
 80173f2:	68a4      	ldr	r4, [r4, #8]
 80173f4:	6897      	ldr	r7, [r2, #8]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d052      	beq.n	80174a0 <forward_dense_integer_SSSA_ch+0x21c>
 80173fa:	6859      	ldr	r1, [r3, #4]
 80173fc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8017400:	2900      	cmp	r1, #0
 8017402:	d1ac      	bne.n	801735e <forward_dense_integer_SSSA_ch+0xda>
 8017404:	910c      	str	r1, [sp, #48]	@ 0x30
 8017406:	e7bc      	b.n	8017382 <forward_dense_integer_SSSA_ch+0xfe>
 8017408:	f1bc 0f00 	cmp.w	ip, #0
 801740c:	d04d      	beq.n	80174aa <forward_dense_integer_SSSA_ch+0x226>
 801740e:	f8dc e004 	ldr.w	lr, [ip, #4]
 8017412:	f1be 0f00 	cmp.w	lr, #0
 8017416:	d053      	beq.n	80174c0 <forward_dense_integer_SSSA_ch+0x23c>
 8017418:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 801741c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017420:	2e00      	cmp	r6, #0
 8017422:	d0e5      	beq.n	80173f0 <forward_dense_integer_SSSA_ch+0x16c>
 8017424:	930c      	str	r3, [sp, #48]	@ 0x30
 8017426:	f8de 3000 	ldr.w	r3, [lr]
 801742a:	68ad      	ldr	r5, [r5, #8]
 801742c:	68a4      	ldr	r4, [r4, #8]
 801742e:	6897      	ldr	r7, [r2, #8]
 8017430:	edd3 0a00 	vldr	s1, [r3]
 8017434:	f8de 3004 	ldr.w	r3, [lr, #4]
 8017438:	f993 3000 	ldrsb.w	r3, [r3]
 801743c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801743e:	e7a3      	b.n	8017388 <forward_dense_integer_SSSA_ch+0x104>
 8017440:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017444:	f1bc 0f00 	cmp.w	ip, #0
 8017448:	f47f af76 	bne.w	8017338 <forward_dense_integer_SSSA_ch+0xb4>
 801744c:	68ad      	ldr	r5, [r5, #8]
 801744e:	68a4      	ldr	r4, [r4, #8]
 8017450:	6897      	ldr	r7, [r2, #8]
 8017452:	2e00      	cmp	r6, #0
 8017454:	d14d      	bne.n	80174f2 <forward_dense_integer_SSSA_ch+0x26e>
 8017456:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801745a:	960c      	str	r6, [sp, #48]	@ 0x30
 801745c:	960b      	str	r6, [sp, #44]	@ 0x2c
 801745e:	e793      	b.n	8017388 <forward_dense_integer_SSSA_ch+0x104>
 8017460:	f1bc 0f00 	cmp.w	ip, #0
 8017464:	d021      	beq.n	80174aa <forward_dense_integer_SSSA_ch+0x226>
 8017466:	f8dc e004 	ldr.w	lr, [ip, #4]
 801746a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801746e:	f1be 0f00 	cmp.w	lr, #0
 8017472:	f47f af67 	bne.w	8017344 <forward_dense_integer_SSSA_ch+0xc0>
 8017476:	68ad      	ldr	r5, [r5, #8]
 8017478:	68a4      	ldr	r4, [r4, #8]
 801747a:	6897      	ldr	r7, [r2, #8]
 801747c:	b179      	cbz	r1, 801749e <forward_dense_integer_SSSA_ch+0x21a>
 801747e:	885b      	ldrh	r3, [r3, #2]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d13f      	bne.n	8017504 <forward_dense_integer_SSSA_ch+0x280>
 8017484:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8017488:	2300      	movs	r3, #0
 801748a:	930c      	str	r3, [sp, #48]	@ 0x30
 801748c:	f1be 0f00 	cmp.w	lr, #0
 8017490:	f47f af75 	bne.w	801737e <forward_dense_integer_SSSA_ch+0xfa>
 8017494:	2300      	movs	r3, #0
 8017496:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017498:	e776      	b.n	8017388 <forward_dense_integer_SSSA_ch+0x104>
 801749a:	4629      	mov	r1, r5
 801749c:	e711      	b.n	80172c2 <forward_dense_integer_SSSA_ch+0x3e>
 801749e:	460b      	mov	r3, r1
 80174a0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80174a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80174a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80174a8:	e76e      	b.n	8017388 <forward_dense_integer_SSSA_ch+0x104>
 80174aa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80174ae:	4663      	mov	r3, ip
 80174b0:	eef0 0a40 	vmov.f32	s1, s0
 80174b4:	68ad      	ldr	r5, [r5, #8]
 80174b6:	68a4      	ldr	r4, [r4, #8]
 80174b8:	6897      	ldr	r7, [r2, #8]
 80174ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80174bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80174be:	e763      	b.n	8017388 <forward_dense_integer_SSSA_ch+0x104>
 80174c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80174c4:	4673      	mov	r3, lr
 80174c6:	e7f3      	b.n	80174b0 <forward_dense_integer_SSSA_ch+0x22c>
 80174c8:	6880      	ldr	r0, [r0, #8]
 80174ca:	68dc      	ldr	r4, [r3, #12]
 80174cc:	900d      	str	r0, [sp, #52]	@ 0x34
 80174ce:	68d0      	ldr	r0, [r2, #12]
 80174d0:	6866      	ldr	r6, [r4, #4]
 80174d2:	6995      	ldr	r5, [r2, #24]
 80174d4:	fa1f fa86 	uxth.w	sl, r6
 80174d8:	9609      	str	r6, [sp, #36]	@ 0x24
 80174da:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 80174de:	68c0      	ldr	r0, [r0, #12]
 80174e0:	fa1f fb89 	uxth.w	fp, r9
 80174e4:	fb00 f004 	mul.w	r0, r0, r4
 80174e8:	699c      	ldr	r4, [r3, #24]
 80174ea:	9008      	str	r0, [sp, #32]
 80174ec:	e70e      	b.n	801730c <forward_dense_integer_SSSA_ch+0x88>
 80174ee:	2500      	movs	r5, #0
 80174f0:	e6e7      	b.n	80172c2 <forward_dense_integer_SSSA_ch+0x3e>
 80174f2:	684b      	ldr	r3, [r1, #4]
 80174f4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80174f8:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 80174fc:	f993 3000 	ldrsb.w	r3, [r3]
 8017500:	930c      	str	r3, [sp, #48]	@ 0x30
 8017502:	e741      	b.n	8017388 <forward_dense_integer_SSSA_ch+0x104>
 8017504:	684b      	ldr	r3, [r1, #4]
 8017506:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801750a:	f993 3000 	ldrsb.w	r3, [r3]
 801750e:	930c      	str	r3, [sp, #48]	@ 0x30
 8017510:	e7c0      	b.n	8017494 <forward_dense_integer_SSSA_ch+0x210>
 8017512:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8017516:	e737      	b.n	8017388 <forward_dense_integer_SSSA_ch+0x104>
 8017518:	2300      	movs	r3, #0
 801751a:	685b      	ldr	r3, [r3, #4]
 801751c:	deff      	udf	#255	@ 0xff
 801751e:	2300      	movs	r3, #0
 8017520:	685b      	ldr	r3, [r3, #4]
 8017522:	deff      	udf	#255	@ 0xff
 8017524:	2300      	movs	r3, #0
 8017526:	685b      	ldr	r3, [r3, #4]
 8017528:	deff      	udf	#255	@ 0xff
 801752a:	bf00      	nop

0801752c <forward_sm_integer>:
 801752c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801752e:	6983      	ldr	r3, [r0, #24]
 8017530:	b087      	sub	sp, #28
 8017532:	881e      	ldrh	r6, [r3, #0]
 8017534:	2e00      	cmp	r6, #0
 8017536:	d047      	beq.n	80175c8 <forward_sm_integer+0x9c>
 8017538:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801753c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8017540:	b105      	cbz	r5, 8017544 <forward_sm_integer+0x18>
 8017542:	682d      	ldr	r5, [r5, #0]
 8017544:	2e01      	cmp	r6, #1
 8017546:	d04b      	beq.n	80175e0 <forward_sm_integer+0xb4>
 8017548:	f8dc 7010 	ldr.w	r7, [ip, #16]
 801754c:	b107      	cbz	r7, 8017550 <forward_sm_integer+0x24>
 801754e:	683f      	ldr	r7, [r7, #0]
 8017550:	68ab      	ldr	r3, [r5, #8]
 8017552:	0a1b      	lsrs	r3, r3, #8
 8017554:	d040      	beq.n	80175d8 <forward_sm_integer+0xac>
 8017556:	68ec      	ldr	r4, [r5, #12]
 8017558:	2201      	movs	r2, #1
 801755a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801755e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017562:	429c      	cmp	r4, r3
 8017564:	fb01 f202 	mul.w	r2, r1, r2
 8017568:	d1f9      	bne.n	801755e <forward_sm_integer+0x32>
 801756a:	69c3      	ldr	r3, [r0, #28]
 801756c:	2e03      	cmp	r6, #3
 801756e:	689c      	ldr	r4, [r3, #8]
 8017570:	d936      	bls.n	80175e0 <forward_sm_integer+0xb4>
 8017572:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 8017576:	2b00      	cmp	r3, #0
 8017578:	d030      	beq.n	80175dc <forward_sm_integer+0xb0>
 801757a:	6819      	ldr	r1, [r3, #0]
 801757c:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8017580:	6989      	ldr	r1, [r1, #24]
 8017582:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8017586:	68e9      	ldr	r1, [r5, #12]
 8017588:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 801758c:	6929      	ldr	r1, [r5, #16]
 801758e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8017592:	d21b      	bcs.n	80175cc <forward_sm_integer+0xa0>
 8017594:	6969      	ldr	r1, [r5, #20]
 8017596:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801759a:	69a8      	ldr	r0, [r5, #24]
 801759c:	4d12      	ldr	r5, [pc, #72]	@ (80175e8 <forward_sm_integer+0xbc>)
 801759e:	6801      	ldr	r1, [r0, #0]
 80175a0:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 80175a4:	42a9      	cmp	r1, r5
 80175a6:	69bd      	ldr	r5, [r7, #24]
 80175a8:	6881      	ldr	r1, [r0, #8]
 80175aa:	68a8      	ldr	r0, [r5, #8]
 80175ac:	f8cd c010 	str.w	ip, [sp, #16]
 80175b0:	68a5      	ldr	r5, [r4, #8]
 80175b2:	9503      	str	r5, [sp, #12]
 80175b4:	6865      	ldr	r5, [r4, #4]
 80175b6:	9502      	str	r5, [sp, #8]
 80175b8:	6824      	ldr	r4, [r4, #0]
 80175ba:	e9cd 6400 	strd	r6, r4, [sp]
 80175be:	d007      	beq.n	80175d0 <forward_sm_integer+0xa4>
 80175c0:	f001 f8ca 	bl	8018758 <forward_lite_nl_softmax_iu8ou8>
 80175c4:	b007      	add	sp, #28
 80175c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175c8:	6873      	ldr	r3, [r6, #4]
 80175ca:	deff      	udf	#255	@ 0xff
 80175cc:	2300      	movs	r3, #0
 80175ce:	e7e4      	b.n	801759a <forward_sm_integer+0x6e>
 80175d0:	f001 f8b8 	bl	8018744 <forward_lite_nl_softmax_is8os8>
 80175d4:	b007      	add	sp, #28
 80175d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175d8:	2201      	movs	r2, #1
 80175da:	e7c6      	b.n	801756a <forward_sm_integer+0x3e>
 80175dc:	699b      	ldr	r3, [r3, #24]
 80175de:	deff      	udf	#255	@ 0xff
 80175e0:	2300      	movs	r3, #0
 80175e2:	685b      	ldr	r3, [r3, #4]
 80175e4:	deff      	udf	#255	@ 0xff
 80175e6:	bf00      	nop
 80175e8:	00840440 	.word	0x00840440

080175ec <pool_func_mp_array_integer_INT8>:
 80175ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f0:	b093      	sub	sp, #76	@ 0x4c
 80175f2:	468c      	mov	ip, r1
 80175f4:	6804      	ldr	r4, [r0, #0]
 80175f6:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 80175fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80175fc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8017600:	910f      	str	r1, [sp, #60]	@ 0x3c
 8017602:	930e      	str	r3, [sp, #56]	@ 0x38
 8017604:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8017608:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801760a:	9110      	str	r1, [sp, #64]	@ 0x40
 801760c:	6980      	ldr	r0, [r0, #24]
 801760e:	f8bd b07c 	ldrh.w	fp, [sp, #124]	@ 0x7c
 8017612:	f8bd a080 	ldrh.w	sl, [sp, #128]	@ 0x80
 8017616:	f8bd 7084 	ldrh.w	r7, [sp, #132]	@ 0x84
 801761a:	f8bd e088 	ldrh.w	lr, [sp, #136]	@ 0x88
 801761e:	f8bd 808c 	ldrh.w	r8, [sp, #140]	@ 0x8c
 8017622:	6999      	ldr	r1, [r3, #24]
 8017624:	681d      	ldr	r5, [r3, #0]
 8017626:	2c00      	cmp	r4, #0
 8017628:	d064      	beq.n	80176f4 <pool_func_mp_array_integer_INT8+0x108>
 801762a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801762e:	f1b9 0f00 	cmp.w	r9, #0
 8017632:	d049      	beq.n	80176c8 <pool_func_mp_array_integer_INT8+0xdc>
 8017634:	8866      	ldrh	r6, [r4, #2]
 8017636:	2e00      	cmp	r6, #0
 8017638:	d072      	beq.n	8017720 <pool_func_mp_array_integer_INT8+0x134>
 801763a:	f8d9 3000 	ldr.w	r3, [r9]
 801763e:	ed93 0a00 	vldr	s0, [r3]
 8017642:	2d00      	cmp	r5, #0
 8017644:	d070      	beq.n	8017728 <pool_func_mp_array_integer_INT8+0x13c>
 8017646:	686e      	ldr	r6, [r5, #4]
 8017648:	2e00      	cmp	r6, #0
 801764a:	d044      	beq.n	80176d6 <pool_func_mp_array_integer_INT8+0xea>
 801764c:	886b      	ldrh	r3, [r5, #2]
 801764e:	9311      	str	r3, [sp, #68]	@ 0x44
 8017650:	2b00      	cmp	r3, #0
 8017652:	d059      	beq.n	8017708 <pool_func_mp_array_integer_INT8+0x11c>
 8017654:	6833      	ldr	r3, [r6, #0]
 8017656:	eef0 7a40 	vmov.f32	s15, s0
 801765a:	6880      	ldr	r0, [r0, #8]
 801765c:	ed93 7a00 	vldr	s14, [r3]
 8017660:	6889      	ldr	r1, [r1, #8]
 8017662:	ee80 0a07 	vdiv.f32	s0, s0, s14
 8017666:	f1b9 0f00 	cmp.w	r9, #0
 801766a:	d057      	beq.n	801771c <pool_func_mp_array_integer_INT8+0x130>
 801766c:	8863      	ldrh	r3, [r4, #2]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d03b      	beq.n	80176ea <pool_func_mp_array_integer_INT8+0xfe>
 8017672:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017676:	f993 4000 	ldrsb.w	r4, [r3]
 801767a:	2d00      	cmp	r5, #0
 801767c:	d038      	beq.n	80176f0 <pool_func_mp_array_integer_INT8+0x104>
 801767e:	2e00      	cmp	r6, #0
 8017680:	d036      	beq.n	80176f0 <pool_func_mp_array_integer_INT8+0x104>
 8017682:	886b      	ldrh	r3, [r5, #2]
 8017684:	9311      	str	r3, [sp, #68]	@ 0x44
 8017686:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017688:	b113      	cbz	r3, 8017690 <pool_func_mp_array_integer_INT8+0xa4>
 801768a:	6873      	ldr	r3, [r6, #4]
 801768c:	f993 3000 	ldrsb.w	r3, [r3]
 8017690:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017698:	da59      	bge.n	801774e <pool_func_mp_array_integer_INT8+0x162>
 801769a:	f8cd b010 	str.w	fp, [sp, #16]
 801769e:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 80176a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80176a4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80176a6:	9303      	str	r3, [sp, #12]
 80176a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80176aa:	9400      	str	r4, [sp, #0]
 80176ac:	9302      	str	r3, [sp, #8]
 80176ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80176b0:	9301      	str	r3, [sp, #4]
 80176b2:	4613      	mov	r3, r2
 80176b4:	4662      	mov	r2, ip
 80176b6:	e9cd e807 	strd	lr, r8, [sp, #28]
 80176ba:	e9cd a705 	strd	sl, r7, [sp, #20]
 80176be:	f000 ff61 	bl	8018584 <forward_lite_maxpool_is8os8_scaleneg>
 80176c2:	b013      	add	sp, #76	@ 0x4c
 80176c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176c8:	2d00      	cmp	r5, #0
 80176ca:	d03a      	beq.n	8017742 <pool_func_mp_array_integer_INT8+0x156>
 80176cc:	686e      	ldr	r6, [r5, #4]
 80176ce:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80176d2:	2e00      	cmp	r6, #0
 80176d4:	d1ba      	bne.n	801764c <pool_func_mp_array_integer_INT8+0x60>
 80176d6:	6880      	ldr	r0, [r0, #8]
 80176d8:	6889      	ldr	r1, [r1, #8]
 80176da:	f1b9 0f00 	cmp.w	r9, #0
 80176de:	d02b      	beq.n	8017738 <pool_func_mp_array_integer_INT8+0x14c>
 80176e0:	8863      	ldrh	r3, [r4, #2]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d165      	bne.n	80177b2 <pool_func_mp_array_integer_INT8+0x1c6>
 80176e6:	eef0 7a40 	vmov.f32	s15, s0
 80176ea:	2400      	movs	r4, #0
 80176ec:	2e00      	cmp	r6, #0
 80176ee:	d1c8      	bne.n	8017682 <pool_func_mp_array_integer_INT8+0x96>
 80176f0:	2300      	movs	r3, #0
 80176f2:	e7cd      	b.n	8017690 <pool_func_mp_array_integer_INT8+0xa4>
 80176f4:	2d00      	cmp	r5, #0
 80176f6:	d041      	beq.n	801777c <pool_func_mp_array_integer_INT8+0x190>
 80176f8:	686e      	ldr	r6, [r5, #4]
 80176fa:	b316      	cbz	r6, 8017742 <pool_func_mp_array_integer_INT8+0x156>
 80176fc:	886b      	ldrh	r3, [r5, #2]
 80176fe:	9311      	str	r3, [sp, #68]	@ 0x44
 8017700:	2b00      	cmp	r3, #0
 8017702:	d14a      	bne.n	801779a <pool_func_mp_array_integer_INT8+0x1ae>
 8017704:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017708:	6880      	ldr	r0, [r0, #8]
 801770a:	6889      	ldr	r1, [r1, #8]
 801770c:	b1ac      	cbz	r4, 801773a <pool_func_mp_array_integer_INT8+0x14e>
 801770e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8017712:	eef0 7a40 	vmov.f32	s15, s0
 8017716:	f1b9 0f00 	cmp.w	r9, #0
 801771a:	d1a7      	bne.n	801766c <pool_func_mp_array_integer_INT8+0x80>
 801771c:	464c      	mov	r4, r9
 801771e:	e7b2      	b.n	8017686 <pool_func_mp_array_integer_INT8+0x9a>
 8017720:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017724:	2d00      	cmp	r5, #0
 8017726:	d18e      	bne.n	8017646 <pool_func_mp_array_integer_INT8+0x5a>
 8017728:	6880      	ldr	r0, [r0, #8]
 801772a:	6889      	ldr	r1, [r1, #8]
 801772c:	bb6e      	cbnz	r6, 801778a <pool_func_mp_array_integer_INT8+0x19e>
 801772e:	eef0 7a40 	vmov.f32	s15, s0
 8017732:	4634      	mov	r4, r6
 8017734:	4633      	mov	r3, r6
 8017736:	e7ab      	b.n	8017690 <pool_func_mp_array_integer_INT8+0xa4>
 8017738:	464c      	mov	r4, r9
 801773a:	eef0 7a40 	vmov.f32	s15, s0
 801773e:	4623      	mov	r3, r4
 8017740:	e7a6      	b.n	8017690 <pool_func_mp_array_integer_INT8+0xa4>
 8017742:	2400      	movs	r4, #0
 8017744:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017748:	6880      	ldr	r0, [r0, #8]
 801774a:	6889      	ldr	r1, [r1, #8]
 801774c:	4623      	mov	r3, r4
 801774e:	f8cd b010 	str.w	fp, [sp, #16]
 8017752:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 8017756:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017758:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801775a:	9303      	str	r3, [sp, #12]
 801775c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801775e:	9400      	str	r4, [sp, #0]
 8017760:	9302      	str	r3, [sp, #8]
 8017762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017764:	9301      	str	r3, [sp, #4]
 8017766:	4613      	mov	r3, r2
 8017768:	4662      	mov	r2, ip
 801776a:	e9cd e807 	strd	lr, r8, [sp, #28]
 801776e:	e9cd a705 	strd	sl, r7, [sp, #20]
 8017772:	f000 f825 	bl	80177c0 <forward_lite_maxpool_is8os8_scalepos>
 8017776:	b013      	add	sp, #76	@ 0x4c
 8017778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801777c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017780:	462c      	mov	r4, r5
 8017782:	6880      	ldr	r0, [r0, #8]
 8017784:	462b      	mov	r3, r5
 8017786:	6889      	ldr	r1, [r1, #8]
 8017788:	e7e1      	b.n	801774e <pool_func_mp_array_integer_INT8+0x162>
 801778a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801778e:	eef0 7a40 	vmov.f32	s15, s0
 8017792:	462b      	mov	r3, r5
 8017794:	f994 4000 	ldrsb.w	r4, [r4]
 8017798:	e77a      	b.n	8017690 <pool_func_mp_array_integer_INT8+0xa4>
 801779a:	6833      	ldr	r3, [r6, #0]
 801779c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80177a0:	6880      	ldr	r0, [r0, #8]
 80177a2:	edd3 6a00 	vldr	s13, [r3]
 80177a6:	eef0 7a47 	vmov.f32	s15, s14
 80177aa:	6889      	ldr	r1, [r1, #8]
 80177ac:	ee87 0a26 	vdiv.f32	s0, s14, s13
 80177b0:	e76b      	b.n	801768a <pool_func_mp_array_integer_INT8+0x9e>
 80177b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80177b6:	eef0 7a40 	vmov.f32	s15, s0
 80177ba:	f993 4000 	ldrsb.w	r4, [r3]
 80177be:	e797      	b.n	80176f0 <pool_func_mp_array_integer_INT8+0x104>

080177c0 <forward_lite_maxpool_is8os8_scalepos>:
 80177c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177c4:	b095      	sub	sp, #84	@ 0x54
 80177c6:	4614      	mov	r4, r2
 80177c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80177cc:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80177d0:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 80177d4:	910d      	str	r1, [sp, #52]	@ 0x34
 80177d6:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80177da:	930c      	str	r3, [sp, #48]	@ 0x30
 80177dc:	910e      	str	r1, [sp, #56]	@ 0x38
 80177de:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80177e2:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 80177e6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80177e8:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 80177ec:	9206      	str	r2, [sp, #24]
 80177ee:	9110      	str	r1, [sp, #64]	@ 0x40
 80177f0:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 80177f4:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 80177f8:	9111      	str	r1, [sp, #68]	@ 0x44
 80177fa:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 80177fe:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 8017802:	9112      	str	r1, [sp, #72]	@ 0x48
 8017804:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 8017808:	9313      	str	r3, [sp, #76]	@ 0x4c
 801780a:	9107      	str	r1, [sp, #28]
 801780c:	9003      	str	r0, [sp, #12]
 801780e:	2b00      	cmp	r3, #0
 8017810:	f000 8094 	beq.w	801793c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 8017814:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017818:	eeb4 0a67 	vcmp.f32	s0, s15
 801781c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017820:	bf0c      	ite	eq
 8017822:	2301      	moveq	r3, #1
 8017824:	2300      	movne	r3, #0
 8017826:	4290      	cmp	r0, r2
 8017828:	bf14      	ite	ne
 801782a:	2300      	movne	r3, #0
 801782c:	f003 0301 	andeq.w	r3, r3, #1
 8017830:	9301      	str	r3, [sp, #4]
 8017832:	2900      	cmp	r1, #0
 8017834:	f000 8082 	beq.w	801793c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 8017838:	f1ba 0f00 	cmp.w	sl, #0
 801783c:	d07e      	beq.n	801793c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 801783e:	ee07 2a90 	vmov	s15, r2
 8017842:	2300      	movs	r3, #0
 8017844:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8017980 <forward_lite_maxpool_is8os8_scalepos+0x1c0>
 8017848:	fb04 fb0a 	mul.w	fp, r4, sl
 801784c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017850:	9304      	str	r3, [sp, #16]
 8017852:	9b04      	ldr	r3, [sp, #16]
 8017854:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8017858:	9907      	ldr	r1, [sp, #28]
 801785a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801785c:	fb03 f202 	mul.w	r2, r3, r2
 8017860:	fb03 f301 	mul.w	r3, r3, r1
 8017864:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017866:	9308      	str	r3, [sp, #32]
 8017868:	2300      	movs	r3, #0
 801786a:	9305      	str	r3, [sp, #20]
 801786c:	1a53      	subs	r3, r2, r1
 801786e:	1a8a      	subs	r2, r1, r2
 8017870:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017872:	2b00      	cmp	r3, #0
 8017874:	eb02 0c01 	add.w	ip, r2, r1
 8017878:	bfd8      	it	le
 801787a:	4691      	movle	r9, r2
 801787c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801787e:	bfc8      	it	gt
 8017880:	f04f 0900 	movgt.w	r9, #0
 8017884:	4594      	cmp	ip, r2
 8017886:	444b      	add	r3, r9
 8017888:	bfa8      	it	ge
 801788a:	4694      	movge	ip, r2
 801788c:	9a06      	ldr	r2, [sp, #24]
 801788e:	fb02 f303 	mul.w	r3, r2, r3
 8017892:	9309      	str	r3, [sp, #36]	@ 0x24
 8017894:	9a05      	ldr	r2, [sp, #20]
 8017896:	f04f 0e00 	mov.w	lr, #0
 801789a:	9908      	ldr	r1, [sp, #32]
 801789c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801789e:	eb02 0801 	add.w	r8, r2, r1
 80178a2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80178a4:	fb03 f302 	mul.w	r3, r3, r2
 80178a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80178aa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80178ac:	fb0a 2808 	mla	r8, sl, r8, r2
 80178b0:	1a5a      	subs	r2, r3, r1
 80178b2:	1acb      	subs	r3, r1, r3
 80178b4:	9906      	ldr	r1, [sp, #24]
 80178b6:	2a00      	cmp	r2, #0
 80178b8:	bfd8      	it	le
 80178ba:	461f      	movle	r7, r3
 80178bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80178be:	bfc8      	it	gt
 80178c0:	2700      	movgt	r7, #0
 80178c2:	18d3      	adds	r3, r2, r3
 80178c4:	1a8a      	subs	r2, r1, r2
 80178c6:	4294      	cmp	r4, r2
 80178c8:	443b      	add	r3, r7
 80178ca:	bfa8      	it	ge
 80178cc:	4614      	movge	r4, r2
 80178ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80178d0:	fb0a 2303 	mla	r3, sl, r3, r2
 80178d4:	9302      	str	r3, [sp, #8]
 80178d6:	45e1      	cmp	r9, ip
 80178d8:	da4e      	bge.n	8017978 <forward_lite_maxpool_is8os8_scalepos+0x1b8>
 80178da:	9b02      	ldr	r3, [sp, #8]
 80178dc:	464d      	mov	r5, r9
 80178de:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80178e2:	eb03 060e 	add.w	r6, r3, lr
 80178e6:	42a7      	cmp	r7, r4
 80178e8:	da0a      	bge.n	8017900 <forward_lite_maxpool_is8os8_scalepos+0x140>
 80178ea:	4632      	mov	r2, r6
 80178ec:	463b      	mov	r3, r7
 80178ee:	f992 0000 	ldrsb.w	r0, [r2]
 80178f2:	3301      	adds	r3, #1
 80178f4:	4452      	add	r2, sl
 80178f6:	4281      	cmp	r1, r0
 80178f8:	bfb8      	it	lt
 80178fa:	4601      	movlt	r1, r0
 80178fc:	429c      	cmp	r4, r3
 80178fe:	d1f6      	bne.n	80178ee <forward_lite_maxpool_is8os8_scalepos+0x12e>
 8017900:	3501      	adds	r5, #1
 8017902:	445e      	add	r6, fp
 8017904:	45ac      	cmp	ip, r5
 8017906:	d1ee      	bne.n	80178e6 <forward_lite_maxpool_is8os8_scalepos+0x126>
 8017908:	9b01      	ldr	r3, [sp, #4]
 801790a:	b1d3      	cbz	r3, 8017942 <forward_lite_maxpool_is8os8_scalepos+0x182>
 801790c:	f888 1000 	strb.w	r1, [r8]
 8017910:	f10e 0e01 	add.w	lr, lr, #1
 8017914:	f108 0801 	add.w	r8, r8, #1
 8017918:	fa1f f38e 	uxth.w	r3, lr
 801791c:	459a      	cmp	sl, r3
 801791e:	d8da      	bhi.n	80178d6 <forward_lite_maxpool_is8os8_scalepos+0x116>
 8017920:	9b05      	ldr	r3, [sp, #20]
 8017922:	9a07      	ldr	r2, [sp, #28]
 8017924:	3301      	adds	r3, #1
 8017926:	b29b      	uxth	r3, r3
 8017928:	429a      	cmp	r2, r3
 801792a:	9305      	str	r3, [sp, #20]
 801792c:	d8b2      	bhi.n	8017894 <forward_lite_maxpool_is8os8_scalepos+0xd4>
 801792e:	9b04      	ldr	r3, [sp, #16]
 8017930:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017932:	3301      	adds	r3, #1
 8017934:	b29b      	uxth	r3, r3
 8017936:	429a      	cmp	r2, r3
 8017938:	9304      	str	r3, [sp, #16]
 801793a:	d88a      	bhi.n	8017852 <forward_lite_maxpool_is8os8_scalepos+0x92>
 801793c:	b015      	add	sp, #84	@ 0x54
 801793e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017942:	9b03      	ldr	r3, [sp, #12]
 8017944:	eeb0 7a66 	vmov.f32	s14, s13
 8017948:	1ac9      	subs	r1, r1, r3
 801794a:	ee07 1a90 	vmov	s15, r1
 801794e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017952:	eea7 7a80 	vfma.f32	s14, s15, s0
 8017956:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801795a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801795e:	fe65 7a86 	vselge.f32	s15, s11, s12
 8017962:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801796a:	ee17 3a90 	vmov	r3, s15
 801796e:	f303 0307 	ssat	r3, #8, r3
 8017972:	f888 3000 	strb.w	r3, [r8]
 8017976:	e7cb      	b.n	8017910 <forward_lite_maxpool_is8os8_scalepos+0x150>
 8017978:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 801797c:	e7c4      	b.n	8017908 <forward_lite_maxpool_is8os8_scalepos+0x148>
 801797e:	bf00      	nop
 8017980:	befffffc 	.word	0xbefffffc

08017984 <forward_lite_conv2d_deep_3x3_sssa8_ch>:
 8017984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017988:	b097      	sub	sp, #92	@ 0x5c
 801798a:	4605      	mov	r5, r0
 801798c:	e9cd 130d 	strd	r1, r3, [sp, #52]	@ 0x34
 8017990:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 8017994:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	@ 0xa0
 8017998:	f8bd 9084 	ldrh.w	r9, [sp, #132]	@ 0x84
 801799c:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 801799e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80179a0:	fb03 f301 	mul.w	r3, r3, r1
 80179a4:	f8dd b080 	ldr.w	fp, [sp, #128]	@ 0x80
 80179a8:	9110      	str	r1, [sp, #64]	@ 0x40
 80179aa:	fb09 6303 	mla	r3, r9, r3, r6
 80179ae:	f99d 108c 	ldrsb.w	r1, [sp, #140]	@ 0x8c
 80179b2:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 80179b6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80179b8:	4298      	cmp	r0, r3
 80179ba:	f89d 1098 	ldrb.w	r1, [sp, #152]	@ 0x98
 80179be:	f99d 7090 	ldrsb.w	r7, [sp, #144]	@ 0x90
 80179c2:	9114      	str	r1, [sp, #80]	@ 0x50
 80179c4:	d207      	bcs.n	80179d6 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x52>
 80179c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80179c8:	fb03 f202 	mul.w	r2, r3, r2
 80179cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80179ce:	fb03 0202 	mla	r2, r3, r2, r0
 80179d2:	4296      	cmp	r6, r2
 80179d4:	d377      	bcc.n	8017ac6 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x142>
 80179d6:	2301      	movs	r3, #1
 80179d8:	9315      	str	r3, [sp, #84]	@ 0x54
 80179da:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80179dc:	4649      	mov	r1, r9
 80179de:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80179e0:	ea4f 0849 	mov.w	r8, r9, lsl #1
 80179e4:	eba3 0449 	sub.w	r4, r3, r9, lsl #1
 80179e8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80179ea:	441c      	add	r4, r3
 80179ec:	461a      	mov	r2, r3
 80179ee:	4623      	mov	r3, r4
 80179f0:	f000 febc 	bl	801876c <align_factor_ch>
 80179f4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80179f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80179fa:	9312      	str	r3, [sp, #72]	@ 0x48
 80179fc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80179fe:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8017a02:	9211      	str	r2, [sp, #68]	@ 0x44
 8017a04:	f1b9 0f00 	cmp.w	r9, #0
 8017a08:	d062      	beq.n	8017ad0 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x14c>
 8017a0a:	4623      	mov	r3, r4
 8017a0c:	1d10      	adds	r0, r2, #4
 8017a0e:	f04f 0e01 	mov.w	lr, #1
 8017a12:	eb04 0c08 	add.w	ip, r4, r8
 8017a16:	f933 2b02 	ldrsh.w	r2, [r3], #2
 8017a1a:	1e51      	subs	r1, r2, #1
 8017a1c:	fa0e f402 	lsl.w	r4, lr, r2
 8017a20:	fa07 f202 	lsl.w	r2, r7, r2
 8017a24:	b289      	uxth	r1, r1
 8017a26:	eb02 0254 	add.w	r2, r2, r4, lsr #1
 8017a2a:	2914      	cmp	r1, #20
 8017a2c:	d844      	bhi.n	8017ab8 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x134>
 8017a2e:	459c      	cmp	ip, r3
 8017a30:	f840 2c04 	str.w	r2, [r0, #-4]
 8017a34:	f100 0004 	add.w	r0, r0, #4
 8017a38:	d1ed      	bne.n	8017a16 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x92>
 8017a3a:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	@ 0xac
 8017a3e:	189c      	adds	r4, r3, r2
 8017a40:	eba4 0408 	sub.w	r4, r4, r8
 8017a44:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8017a48:	fb13 f802 	smulbb	r8, r3, r2
 8017a4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017a4e:	fa1f f888 	uxth.w	r8, r8
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d02d      	beq.n	8017ab2 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x12e>
 8017a56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017a58:	4659      	mov	r1, fp
 8017a5a:	2700      	movs	r7, #0
 8017a5c:	46cb      	mov	fp, r9
 8017a5e:	fb09 f002 	mul.w	r0, r9, r2
 8017a62:	4652      	mov	r2, sl
 8017a64:	4699      	mov	r9, r3
 8017a66:	46a2      	mov	sl, r4
 8017a68:	4644      	mov	r4, r8
 8017a6a:	4680      	mov	r8, r0
 8017a6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017a6e:	3701      	adds	r7, #1
 8017a70:	4628      	mov	r0, r5
 8017a72:	f8cd a004 	str.w	sl, [sp, #4]
 8017a76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017a78:	4425      	add	r5, r4
 8017a7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017a7c:	9222      	str	r2, [sp, #136]	@ 0x88
 8017a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017a80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017a82:	9120      	str	r1, [sp, #128]	@ 0x80
 8017a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017a88:	9308      	str	r3, [sp, #32]
 8017a8a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017a8c:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8017a90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017a92:	9305      	str	r3, [sp, #20]
 8017a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a96:	9304      	str	r3, [sp, #16]
 8017a98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a9a:	e9cd b302 	strd	fp, r3, [sp, #8]
 8017a9e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8017aa0:	9300      	str	r3, [sp, #0]
 8017aa2:	4633      	mov	r3, r6
 8017aa4:	f008 faac 	bl	8020000 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3>
 8017aa8:	45b9      	cmp	r9, r7
 8017aaa:	4446      	add	r6, r8
 8017aac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8017aae:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8017ab0:	d1dc      	bne.n	8017a6c <forward_lite_conv2d_deep_3x3_sssa8_ch+0xe8>
 8017ab2:	b017      	add	sp, #92	@ 0x5c
 8017ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab8:	459c      	cmp	ip, r3
 8017aba:	f840 7c04 	str.w	r7, [r0, #-4]
 8017abe:	f100 0004 	add.w	r0, r0, #4
 8017ac2:	d1a8      	bne.n	8017a16 <forward_lite_conv2d_deep_3x3_sssa8_ch+0x92>
 8017ac4:	e7b9      	b.n	8017a3a <forward_lite_conv2d_deep_3x3_sssa8_ch+0xb6>
 8017ac6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017ac8:	9315      	str	r3, [sp, #84]	@ 0x54
 8017aca:	2301      	movs	r3, #1
 8017acc:	9310      	str	r3, [sp, #64]	@ 0x40
 8017ace:	e784      	b.n	80179da <forward_lite_conv2d_deep_3x3_sssa8_ch+0x56>
 8017ad0:	9311      	str	r3, [sp, #68]	@ 0x44
 8017ad2:	e7b5      	b.n	8017a40 <forward_lite_conv2d_deep_3x3_sssa8_ch+0xbc>

08017ad4 <forward_lite_conv2d_sssa8_ch>:
 8017ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ad8:	ed2d 8b06 	vpush	{d8-d10}
 8017adc:	b0e3      	sub	sp, #396	@ 0x18c
 8017ade:	469a      	mov	sl, r3
 8017ae0:	4605      	mov	r5, r0
 8017ae2:	f8bd 3200 	ldrh.w	r3, [sp, #512]	@ 0x200
 8017ae6:	9215      	str	r2, [sp, #84]	@ 0x54
 8017ae8:	f8bd 2204 	ldrh.w	r2, [sp, #516]	@ 0x204
 8017aec:	9126      	str	r1, [sp, #152]	@ 0x98
 8017aee:	9314      	str	r3, [sp, #80]	@ 0x50
 8017af0:	f8bd 11cc 	ldrh.w	r1, [sp, #460]	@ 0x1cc
 8017af4:	fb03 f302 	mul.w	r3, r3, r2
 8017af8:	922f      	str	r2, [sp, #188]	@ 0xbc
 8017afa:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 8017afc:	ee08 1a90 	vmov	s17, r1
 8017b00:	9320      	str	r3, [sp, #128]	@ 0x80
 8017b02:	fb01 2303 	mla	r3, r1, r3, r2
 8017b06:	f8bd 21d0 	ldrh.w	r2, [sp, #464]	@ 0x1d0
 8017b0a:	f99d 91ec 	ldrsb.w	r9, [sp, #492]	@ 0x1ec
 8017b0e:	922c      	str	r2, [sp, #176]	@ 0xb0
 8017b10:	4298      	cmp	r0, r3
 8017b12:	f8bd 21d4 	ldrh.w	r2, [sp, #468]	@ 0x1d4
 8017b16:	f99d 61f0 	ldrsb.w	r6, [sp, #496]	@ 0x1f0
 8017b1a:	922b      	str	r2, [sp, #172]	@ 0xac
 8017b1c:	f8bd 21d8 	ldrh.w	r2, [sp, #472]	@ 0x1d8
 8017b20:	f8bd 8208 	ldrh.w	r8, [sp, #520]	@ 0x208
 8017b24:	9216      	str	r2, [sp, #88]	@ 0x58
 8017b26:	f8bd 21dc 	ldrh.w	r2, [sp, #476]	@ 0x1dc
 8017b2a:	f8dd b20c 	ldr.w	fp, [sp, #524]	@ 0x20c
 8017b2e:	9230      	str	r2, [sp, #192]	@ 0xc0
 8017b30:	f8bd 21e0 	ldrh.w	r2, [sp, #480]	@ 0x1e0
 8017b34:	922d      	str	r2, [sp, #180]	@ 0xb4
 8017b36:	f8bd 21e4 	ldrh.w	r2, [sp, #484]	@ 0x1e4
 8017b3a:	9234      	str	r2, [sp, #208]	@ 0xd0
 8017b3c:	f89d 21f8 	ldrb.w	r2, [sp, #504]	@ 0x1f8
 8017b40:	9227      	str	r2, [sp, #156]	@ 0x9c
 8017b42:	f0c0 82ef 	bcc.w	8018124 <forward_lite_conv2d_sssa8_ch+0x650>
 8017b46:	2300      	movs	r3, #0
 8017b48:	932e      	str	r3, [sp, #184]	@ 0xb8
 8017b4a:	ee18 1a90 	vmov	r1, s17
 8017b4e:	9a84      	ldr	r2, [sp, #528]	@ 0x210
 8017b50:	987d      	ldr	r0, [sp, #500]	@ 0x1f4
 8017b52:	ebab 0341 	sub.w	r3, fp, r1, lsl #1
 8017b56:	004f      	lsls	r7, r1, #1
 8017b58:	18d4      	adds	r4, r2, r3
 8017b5a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8017b5c:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8017b5e:	3b02      	subs	r3, #2
 8017b60:	2b01      	cmp	r3, #1
 8017b62:	4623      	mov	r3, r4
 8017b64:	bf98      	it	ls
 8017b66:	2200      	movls	r2, #0
 8017b68:	922e      	str	r2, [sp, #184]	@ 0xb8
 8017b6a:	9a84      	ldr	r2, [sp, #528]	@ 0x210
 8017b6c:	f000 fdfe 	bl	801876c <align_factor_ch>
 8017b70:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8017b72:	07db      	lsls	r3, r3, #31
 8017b74:	d506      	bpl.n	8017b84 <forward_lite_conv2d_sssa8_ch+0xb0>
 8017b76:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017b78:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8017b7a:	3302      	adds	r3, #2
 8017b7c:	3202      	adds	r2, #2
 8017b7e:	fb02 f303 	mul.w	r3, r2, r3
 8017b82:	9320      	str	r3, [sp, #128]	@ 0x80
 8017b84:	9b7a      	ldr	r3, [sp, #488]	@ 0x1e8
 8017b86:	ee18 2a90 	vmov	r2, s17
 8017b8a:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 8017b8c:	4650      	mov	r0, sl
 8017b8e:	9301      	str	r3, [sp, #4]
 8017b90:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 8017b92:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8017b96:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8017b98:	9300      	str	r3, [sp, #0]
 8017b9a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8017b9c:	f001 f902 	bl	8018da4 <st_sssa8_ch_convolve_rank1upd>
 8017ba0:	ee18 2a90 	vmov	r2, s17
 8017ba4:	9984      	ldr	r1, [sp, #528]	@ 0x210
 8017ba6:	18bb      	adds	r3, r7, r2
 8017ba8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8017bac:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	@ 0xac
 8017bb0:	911b      	str	r1, [sp, #108]	@ 0x6c
 8017bb2:	fb10 f303 	smulbb	r3, r0, r3
 8017bb6:	fb13 f30a 	smulbb	r3, r3, sl
 8017bba:	b29b      	uxth	r3, r3
 8017bbc:	931f      	str	r3, [sp, #124]	@ 0x7c
 8017bbe:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 8017bc2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8017bc6:	ee09 3a90 	vmov	s19, r3
 8017bca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017bce:	9325      	str	r3, [sp, #148]	@ 0x94
 8017bd0:	b1da      	cbz	r2, 8017c0a <forward_lite_conv2d_sssa8_ch+0x136>
 8017bd2:	4622      	mov	r2, r4
 8017bd4:	1d18      	adds	r0, r3, #4
 8017bd6:	f04f 0c01 	mov.w	ip, #1
 8017bda:	eb04 0e07 	add.w	lr, r4, r7
 8017bde:	f932 3b02 	ldrsh.w	r3, [r2], #2
 8017be2:	1e59      	subs	r1, r3, #1
 8017be4:	fa0c f403 	lsl.w	r4, ip, r3
 8017be8:	fa06 f303 	lsl.w	r3, r6, r3
 8017bec:	b289      	uxth	r1, r1
 8017bee:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8017bf2:	2914      	cmp	r1, #20
 8017bf4:	f200 8262 	bhi.w	80180bc <forward_lite_conv2d_sssa8_ch+0x5e8>
 8017bf8:	4572      	cmp	r2, lr
 8017bfa:	f840 3c04 	str.w	r3, [r0, #-4]
 8017bfe:	f100 0004 	add.w	r0, r0, #4
 8017c02:	d1ec      	bne.n	8017bde <forward_lite_conv2d_sssa8_ch+0x10a>
 8017c04:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 8017c06:	eb03 040b 	add.w	r4, r3, fp
 8017c0a:	1be3      	subs	r3, r4, r7
 8017c0c:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8017c0e:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8017c10:	aa42      	add	r2, sp, #264	@ 0x108
 8017c12:	9324      	str	r3, [sp, #144]	@ 0x90
 8017c14:	a84e      	add	r0, sp, #312	@ 0x138
 8017c16:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8017c18:	fb01 f604 	mul.w	r6, r1, r4
 8017c1c:	914b      	str	r1, [sp, #300]	@ 0x12c
 8017c1e:	a958      	add	r1, sp, #352	@ 0x160
 8017c20:	9344      	str	r3, [sp, #272]	@ 0x110
 8017c22:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017c24:	fb0a f704 	mul.w	r7, sl, r4
 8017c28:	944c      	str	r4, [sp, #304]	@ 0x130
 8017c2a:	9343      	str	r3, [sp, #268]	@ 0x10c
 8017c2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017c2e:	9348      	str	r3, [sp, #288]	@ 0x120
 8017c30:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8017c32:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017c34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017c36:	935a      	str	r3, [sp, #360]	@ 0x168
 8017c38:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8017c3a:	935b      	str	r3, [sp, #364]	@ 0x16c
 8017c3c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8017c3e:	935c      	str	r3, [sp, #368]	@ 0x170
 8017c40:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8017c42:	935d      	str	r3, [sp, #372]	@ 0x174
 8017c44:	ab4a      	add	r3, sp, #296	@ 0x128
 8017c46:	9300      	str	r3, [sp, #0]
 8017c48:	ab46      	add	r3, sp, #280	@ 0x118
 8017c4a:	f001 f809 	bl	8018c60 <ai_padding_opt_init>
 8017c4e:	fb0a f306 	mul.w	r3, sl, r6
 8017c52:	ee18 2a90 	vmov	r2, s17
 8017c56:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8017c58:	fb02 f403 	mul.w	r4, r2, r3
 8017c5c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017c5e:	fb07 f301 	mul.w	r3, r7, r1
 8017c62:	f5b4 6f20 	cmp.w	r4, #2560	@ 0xa00
 8017c66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017c6a:	bfa8      	it	ge
 8017c6c:	f44f 6420 	movge.w	r4, #2560	@ 0xa00
 8017c70:	f1b8 0f01 	cmp.w	r8, #1
 8017c74:	ee09 3a10 	vmov	s18, r3
 8017c78:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8017c7a:	f003 0202 	and.w	r2, r3, #2
 8017c7e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017c82:	9238      	str	r2, [sp, #224]	@ 0xe0
 8017c84:	9322      	str	r3, [sp, #136]	@ 0x88
 8017c86:	f000 8237 	beq.w	80180f8 <forward_lite_conv2d_sssa8_ch+0x624>
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	9337      	str	r3, [sp, #220]	@ 0xdc
 8017c8e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8017c90:	fbb4 f3f3 	udiv	r3, r4, r3
 8017c94:	b29b      	uxth	r3, r3
 8017c96:	4619      	mov	r1, r3
 8017c98:	ee18 3a90 	vmov	r3, s17
 8017c9c:	4299      	cmp	r1, r3
 8017c9e:	bf28      	it	cs
 8017ca0:	4619      	movcs	r1, r3
 8017ca2:	fbb3 f2f1 	udiv	r2, r3, r1
 8017ca6:	fb01 3312 	mls	r3, r1, r2, r3
 8017caa:	b292      	uxth	r2, r2
 8017cac:	9121      	str	r1, [sp, #132]	@ 0x84
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	9239      	str	r2, [sp, #228]	@ 0xe4
 8017cb2:	b11b      	cbz	r3, 8017cbc <forward_lite_conv2d_sssa8_ch+0x1e8>
 8017cb4:	4613      	mov	r3, r2
 8017cb6:	3301      	adds	r3, #1
 8017cb8:	b29b      	uxth	r3, r3
 8017cba:	9339      	str	r3, [sp, #228]	@ 0xe4
 8017cbc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8017cbe:	2b01      	cmp	r3, #1
 8017cc0:	f000 823d 	beq.w	801813e <forward_lite_conv2d_sssa8_ch+0x66a>
 8017cc4:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 8017cc6:	1e53      	subs	r3, r2, #1
 8017cc8:	b29b      	uxth	r3, r3
 8017cca:	9335      	str	r3, [sp, #212]	@ 0xd4
 8017ccc:	2a00      	cmp	r2, #0
 8017cce:	f000 8137 	beq.w	8017f40 <forward_lite_conv2d_sssa8_ch+0x46c>
 8017cd2:	fb0a f306 	mul.w	r3, sl, r6
 8017cd6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017cd8:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8017cda:	fa0f f689 	sxth.w	r6, r9
 8017cde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017ce2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8017ce4:	ee0a aa10 	vmov	s20, sl
 8017ce8:	46b1      	mov	r9, r6
 8017cea:	9319      	str	r3, [sp, #100]	@ 0x64
 8017cec:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8017cee:	edcd 8a36 	vstr	s17, [sp, #216]	@ 0xd8
 8017cf2:	fb03 f302 	mul.w	r3, r3, r2
 8017cf6:	425b      	negs	r3, r3
 8017cf8:	1a5b      	subs	r3, r3, r1
 8017cfa:	fb0a 5303 	mla	r3, sl, r3, r5
 8017cfe:	9339      	str	r3, [sp, #228]	@ 0xe4
 8017d00:	fb0a f302 	mul.w	r3, sl, r2
 8017d04:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8017d06:	f1a2 0203 	sub.w	r2, r2, #3
 8017d0a:	9312      	str	r3, [sp, #72]	@ 0x48
 8017d0c:	fab2 f282 	clz	r2, r2
 8017d10:	0952      	lsrs	r2, r2, #5
 8017d12:	922a      	str	r2, [sp, #168]	@ 0xa8
 8017d14:	f00a 0203 	and.w	r2, sl, #3
 8017d18:	9213      	str	r2, [sp, #76]	@ 0x4c
 8017d1a:	007a      	lsls	r2, r7, #1
 8017d1c:	921c      	str	r2, [sp, #112]	@ 0x70
 8017d1e:	ea4f 024a 	mov.w	r2, sl, lsl #1
 8017d22:	9231      	str	r2, [sp, #196]	@ 0xc4
 8017d24:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8017d26:	fb02 f303 	mul.w	r3, r2, r3
 8017d2a:	9332      	str	r3, [sp, #200]	@ 0xc8
 8017d2c:	424b      	negs	r3, r1
 8017d2e:	9333      	str	r3, [sp, #204]	@ 0xcc
 8017d30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017d32:	fb0a f303 	mul.w	r3, sl, r3
 8017d36:	46ba      	mov	sl, r7
 8017d38:	931a      	str	r3, [sp, #104]	@ 0x68
 8017d3a:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8017d3c:	b953      	cbnz	r3, 8017d54 <forward_lite_conv2d_sssa8_ch+0x280>
 8017d3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	f040 81d1 	bne.w	80180e8 <forward_lite_conv2d_sssa8_ch+0x614>
 8017d46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8017d48:	ee19 1a10 	vmov	r1, s18
 8017d4c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8017d4e:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 8017d50:	f000 fecc 	bl	8018aec <st_int8_to16_dual_interleaved>
 8017d54:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8017d56:	2b03      	cmp	r3, #3
 8017d58:	f000 81ba 	beq.w	80180d0 <forward_lite_conv2d_sssa8_ch+0x5fc>
 8017d5c:	9b7f      	ldr	r3, [sp, #508]	@ 0x1fc
 8017d5e:	931e      	str	r3, [sp, #120]	@ 0x78
 8017d60:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	f000 80b5 	beq.w	8017ed2 <forward_lite_conv2d_sssa8_ch+0x3fe>
 8017d68:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8017d6a:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8017d6c:	1ad2      	subs	r2, r2, r3
 8017d6e:	425b      	negs	r3, r3
 8017d70:	9317      	str	r3, [sp, #92]	@ 0x5c
 8017d72:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8017d74:	9211      	str	r2, [sp, #68]	@ 0x44
 8017d76:	9323      	str	r3, [sp, #140]	@ 0x8c
 8017d78:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8017d7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8017d7c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8017d7e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8017d80:	a84e      	add	r0, sp, #312	@ 0x138
 8017d82:	f000 ffc7 	bl	8018d14 <ai_padding_opt_phase1>
 8017d86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d074      	beq.n	8017e76 <forward_lite_conv2d_sssa8_ch+0x3a2>
 8017d8c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017d8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017d90:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8017d92:	1a9b      	subs	r3, r3, r2
 8017d94:	fb01 f303 	mul.w	r3, r1, r3
 8017d98:	931d      	str	r3, [sp, #116]	@ 0x74
 8017d9a:	e9dd 312c 	ldrd	r3, r1, [sp, #176]	@ 0xb0
 8017d9e:	1a5f      	subs	r7, r3, r1
 8017da0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8017da2:	4413      	add	r3, r2
 8017da4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8017da6:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8017da8:	930c      	str	r3, [sp, #48]	@ 0x30
 8017daa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017dac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017dae:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8017db0:	9310      	str	r3, [sp, #64]	@ 0x40
 8017db2:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	f000 80d9 	beq.w	8017f6c <forward_lite_conv2d_sssa8_ch+0x498>
 8017dba:	3b01      	subs	r3, #1
 8017dbc:	934e      	str	r3, [sp, #312]	@ 0x138
 8017dbe:	2301      	movs	r3, #1
 8017dc0:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 8017dc4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017dc6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8017dc8:	4293      	cmp	r3, r2
 8017dca:	da40      	bge.n	8017e4e <forward_lite_conv2d_sssa8_ch+0x37a>
 8017dcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017dce:	ee08 aa10 	vmov	s16, sl
 8017dd2:	9d31      	ldr	r5, [sp, #196]	@ 0xc4
 8017dd4:	ee1a 8a10 	vmov	r8, s20
 8017dd8:	1afb      	subs	r3, r7, r3
 8017dda:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 8017ddc:	fb05 f303 	mul.w	r3, r5, r3
 8017de0:	9318      	str	r3, [sp, #96]	@ 0x60
 8017de2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017de4:	930d      	str	r3, [sp, #52]	@ 0x34
 8017de6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017de8:	930e      	str	r3, [sp, #56]	@ 0x38
 8017dea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8017dec:	42bc      	cmp	r4, r7
 8017dee:	da22      	bge.n	8017e36 <forward_lite_conv2d_sssa8_ch+0x362>
 8017df0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017df2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017df4:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8017df8:	4293      	cmp	r3, r2
 8017dfa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8017dfe:	bf8c      	ite	hi
 8017e00:	2300      	movhi	r3, #0
 8017e02:	2301      	movls	r3, #1
 8017e04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017e06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	f000 809e 	beq.w	8017f4a <forward_lite_conv2d_sssa8_ch+0x476>
 8017e0e:	42a6      	cmp	r6, r4
 8017e10:	4651      	mov	r1, sl
 8017e12:	4642      	mov	r2, r8
 8017e14:	4648      	mov	r0, r9
 8017e16:	d903      	bls.n	8017e20 <forward_lite_conv2d_sssa8_ch+0x34c>
 8017e18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	f000 8124 	beq.w	8018068 <forward_lite_conv2d_sssa8_ch+0x594>
 8017e20:	f000 ff92 	bl	8018d48 <st_int16_fill>
 8017e24:	3401      	adds	r4, #1
 8017e26:	44aa      	add	sl, r5
 8017e28:	44c3      	add	fp, r8
 8017e2a:	42bc      	cmp	r4, r7
 8017e2c:	d1ef      	bne.n	8017e0e <forward_lite_conv2d_sssa8_ch+0x33a>
 8017e2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017e30:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017e32:	4413      	add	r3, r2
 8017e34:	930a      	str	r3, [sp, #40]	@ 0x28
 8017e36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017e38:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017e3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017e3c:	440a      	add	r2, r1
 8017e3e:	3301      	adds	r3, #1
 8017e40:	920d      	str	r2, [sp, #52]	@ 0x34
 8017e42:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017e44:	930e      	str	r3, [sp, #56]	@ 0x38
 8017e46:	4293      	cmp	r3, r2
 8017e48:	d1cf      	bne.n	8017dea <forward_lite_conv2d_sssa8_ch+0x316>
 8017e4a:	ee18 aa10 	vmov	sl, s16
 8017e4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017e50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017e52:	4293      	cmp	r3, r2
 8017e54:	f000 80bf 	beq.w	8017fd6 <forward_lite_conv2d_sssa8_ch+0x502>
 8017e58:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017e5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017e5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017e5e:	440a      	add	r2, r1
 8017e60:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8017e62:	3301      	adds	r3, #1
 8017e64:	920f      	str	r2, [sp, #60]	@ 0x3c
 8017e66:	440f      	add	r7, r1
 8017e68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017e6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8017e6c:	440a      	add	r2, r1
 8017e6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8017e70:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017e72:	429a      	cmp	r2, r3
 8017e74:	d19d      	bne.n	8017db2 <forward_lite_conv2d_sssa8_ch+0x2de>
 8017e76:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8017e78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017e7a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8017e7c:	440a      	add	r2, r1
 8017e7e:	3301      	adds	r3, #1
 8017e80:	9211      	str	r2, [sp, #68]	@ 0x44
 8017e82:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017e84:	9329      	str	r3, [sp, #164]	@ 0xa4
 8017e86:	440a      	add	r2, r1
 8017e88:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8017e8a:	9217      	str	r2, [sp, #92]	@ 0x5c
 8017e8c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8017e8e:	440a      	add	r2, r1
 8017e90:	9223      	str	r2, [sp, #140]	@ 0x8c
 8017e92:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8017e94:	429a      	cmp	r2, r3
 8017e96:	f47f af73 	bne.w	8017d80 <forward_lite_conv2d_sssa8_ch+0x2ac>
 8017e9a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8017e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017e9e:	4299      	cmp	r1, r3
 8017ea0:	d017      	beq.n	8017ed2 <forward_lite_conv2d_sssa8_ch+0x3fe>
 8017ea2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017ea4:	ee19 2a90 	vmov	r2, s19
 8017ea8:	ee19 0a10 	vmov	r0, s18
 8017eac:	9307      	str	r3, [sp, #28]
 8017eae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8017eb0:	9306      	str	r3, [sp, #24]
 8017eb2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8017eb4:	9305      	str	r3, [sp, #20]
 8017eb6:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 8017eb8:	9304      	str	r3, [sp, #16]
 8017eba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8017ebc:	9303      	str	r3, [sp, #12]
 8017ebe:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8017ec0:	9302      	str	r3, [sp, #8]
 8017ec2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8017ec4:	9301      	str	r3, [sp, #4]
 8017ec6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8017ec8:	9300      	str	r3, [sp, #0]
 8017eca:	ee18 3a90 	vmov	r3, s17
 8017ece:	f001 fb63 	bl	8019598 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8017ed2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8017ed4:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8017ed6:	1a9b      	subs	r3, r3, r2
 8017ed8:	b299      	uxth	r1, r3
 8017eda:	4613      	mov	r3, r2
 8017edc:	428a      	cmp	r2, r1
 8017ede:	9136      	str	r1, [sp, #216]	@ 0xd8
 8017ee0:	bf28      	it	cs
 8017ee2:	460b      	movcs	r3, r1
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	f000 80f1 	beq.w	80180cc <forward_lite_conv2d_sssa8_ch+0x5f8>
 8017eea:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 8017eec:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8017eee:	fb00 1102 	mla	r1, r0, r2, r1
 8017ef2:	9172      	str	r1, [sp, #456]	@ 0x1c8
 8017ef4:	ee19 1a90 	vmov	r1, s19
 8017ef8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017efc:	ee09 1a90 	vmov	s19, r1
 8017f00:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8017f02:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8017f06:	9124      	str	r1, [sp, #144]	@ 0x90
 8017f08:	9984      	ldr	r1, [sp, #528]	@ 0x210
 8017f0a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017f0e:	9184      	str	r1, [sp, #528]	@ 0x210
 8017f10:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8017f12:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017f16:	9125      	str	r1, [sp, #148]	@ 0x94
 8017f18:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8017f1a:	2900      	cmp	r1, #0
 8017f1c:	f000 80de 	beq.w	80180dc <forward_lite_conv2d_sssa8_ch+0x608>
 8017f20:	997f      	ldr	r1, [sp, #508]	@ 0x1fc
 8017f22:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8017f24:	9321      	str	r3, [sp, #132]	@ 0x84
 8017f26:	fb00 1202 	mla	r2, r0, r2, r1
 8017f2a:	927f      	str	r2, [sp, #508]	@ 0x1fc
 8017f2c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8017f2e:	3b01      	subs	r3, #1
 8017f30:	b29b      	uxth	r3, r3
 8017f32:	461a      	mov	r2, r3
 8017f34:	9335      	str	r3, [sp, #212]	@ 0xd4
 8017f36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017f3a:	429a      	cmp	r2, r3
 8017f3c:	f47f aefd 	bne.w	8017d3a <forward_lite_conv2d_sssa8_ch+0x266>
 8017f40:	b063      	add	sp, #396	@ 0x18c
 8017f42:	ecbd 8b06 	vpop	{d8-d10}
 8017f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f4a:	42a6      	cmp	r6, r4
 8017f4c:	4642      	mov	r2, r8
 8017f4e:	4651      	mov	r1, sl
 8017f50:	4648      	mov	r0, r9
 8017f52:	d903      	bls.n	8017f5c <forward_lite_conv2d_sssa8_ch+0x488>
 8017f54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	f000 8082 	beq.w	8018060 <forward_lite_conv2d_sssa8_ch+0x58c>
 8017f5c:	f000 fef4 	bl	8018d48 <st_int16_fill>
 8017f60:	3401      	adds	r4, #1
 8017f62:	44aa      	add	sl, r5
 8017f64:	44c3      	add	fp, r8
 8017f66:	42bc      	cmp	r4, r7
 8017f68:	d1ef      	bne.n	8017f4a <forward_lite_conv2d_sssa8_ch+0x476>
 8017f6a:	e760      	b.n	8017e2e <forward_lite_conv2d_sssa8_ch+0x35a>
 8017f6c:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 8017f6e:	b933      	cbnz	r3, 8017f7e <forward_lite_conv2d_sssa8_ch+0x4aa>
 8017f70:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 8017f72:	3b01      	subs	r3, #1
 8017f74:	9350      	str	r3, [sp, #320]	@ 0x140
 8017f76:	2301      	movs	r3, #1
 8017f78:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 8017f7c:	e722      	b.n	8017dc4 <forward_lite_conv2d_sssa8_ch+0x2f0>
 8017f7e:	3b01      	subs	r3, #1
 8017f80:	934f      	str	r3, [sp, #316]	@ 0x13c
 8017f82:	f8bd 315c 	ldrh.w	r3, [sp, #348]	@ 0x15c
 8017f86:	2b01      	cmp	r3, #1
 8017f88:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 8017f8c:	f43f af1a 	beq.w	8017dc4 <forward_lite_conv2d_sssa8_ch+0x2f0>
 8017f90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017f92:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d148      	bne.n	801802a <forward_lite_conv2d_sssa8_ch+0x556>
 8017f98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017f9a:	429c      	cmp	r4, r3
 8017f9c:	f6bf af57 	bge.w	8017e4e <forward_lite_conv2d_sssa8_ch+0x37a>
 8017fa0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8017fa2:	4698      	mov	r8, r3
 8017fa4:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8017fa6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8017fa8:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 8017fac:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8017fae:	3401      	adds	r4, #1
 8017fb0:	4629      	mov	r1, r5
 8017fb2:	4630      	mov	r0, r6
 8017fb4:	4652      	mov	r2, sl
 8017fb6:	f000 fc6b 	bl	8018890 <st_int8_to16_no_shift_interleaved>
 8017fba:	4544      	cmp	r4, r8
 8017fbc:	445d      	add	r5, fp
 8017fbe:	443e      	add	r6, r7
 8017fc0:	d1f5      	bne.n	8017fae <forward_lite_conv2d_sssa8_ch+0x4da>
 8017fc2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8017fc4:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
 8017fc8:	4413      	add	r3, r2
 8017fca:	930a      	str	r3, [sp, #40]	@ 0x28
 8017fcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017fce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017fd0:	4293      	cmp	r3, r2
 8017fd2:	f47f af41 	bne.w	8017e58 <forward_lite_conv2d_sssa8_ch+0x384>
 8017fd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d149      	bne.n	8018070 <forward_lite_conv2d_sssa8_ch+0x59c>
 8017fdc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d046      	beq.n	8018070 <forward_lite_conv2d_sssa8_ch+0x59c>
 8017fe2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017fe4:	ee19 2a90 	vmov	r2, s19
 8017fe8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8017fea:	ee19 0a10 	vmov	r0, s18
 8017fee:	9308      	str	r3, [sp, #32]
 8017ff0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8017ff2:	9307      	str	r3, [sp, #28]
 8017ff4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8017ff6:	9306      	str	r3, [sp, #24]
 8017ff8:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 8017ffa:	9305      	str	r3, [sp, #20]
 8017ffc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8017ffe:	9304      	str	r3, [sp, #16]
 8018000:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8018002:	9303      	str	r3, [sp, #12]
 8018004:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018006:	9302      	str	r3, [sp, #8]
 8018008:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801800a:	9300      	str	r3, [sp, #0]
 801800c:	2302      	movs	r3, #2
 801800e:	9301      	str	r3, [sp, #4]
 8018010:	ee18 3a90 	vmov	r3, s17
 8018014:	f008 fdae 	bl	8020b74 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8018018:	901e      	str	r0, [sp, #120]	@ 0x78
 801801a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801801c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801801e:	3b01      	subs	r3, #1
 8018020:	4293      	cmp	r3, r2
 8018022:	d045      	beq.n	80180b0 <forward_lite_conv2d_sssa8_ch+0x5dc>
 8018024:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018026:	930a      	str	r3, [sp, #40]	@ 0x28
 8018028:	e716      	b.n	8017e58 <forward_lite_conv2d_sssa8_ch+0x384>
 801802a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801802c:	429c      	cmp	r4, r3
 801802e:	f6bf af0e 	bge.w	8017e4e <forward_lite_conv2d_sssa8_ch+0x37a>
 8018032:	970b      	str	r7, [sp, #44]	@ 0x2c
 8018034:	4698      	mov	r8, r3
 8018036:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018038:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801803a:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 801803e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8018040:	3401      	adds	r4, #1
 8018042:	4629      	mov	r1, r5
 8018044:	4630      	mov	r0, r6
 8018046:	4652      	mov	r2, sl
 8018048:	f000 fbc0 	bl	80187cc <st_int8_to16_no_shift>
 801804c:	4544      	cmp	r4, r8
 801804e:	445d      	add	r5, fp
 8018050:	443e      	add	r6, r7
 8018052:	d1f5      	bne.n	8018040 <forward_lite_conv2d_sssa8_ch+0x56c>
 8018054:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8018056:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
 801805a:	4413      	add	r3, r2
 801805c:	930a      	str	r3, [sp, #40]	@ 0x28
 801805e:	e7b5      	b.n	8017fcc <forward_lite_conv2d_sssa8_ch+0x4f8>
 8018060:	4658      	mov	r0, fp
 8018062:	f000 fc15 	bl	8018890 <st_int8_to16_no_shift_interleaved>
 8018066:	e77b      	b.n	8017f60 <forward_lite_conv2d_sssa8_ch+0x48c>
 8018068:	4658      	mov	r0, fp
 801806a:	f000 fbaf 	bl	80187cc <st_int8_to16_no_shift>
 801806e:	e6d9      	b.n	8017e24 <forward_lite_conv2d_sssa8_ch+0x350>
 8018070:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018072:	ee19 2a90 	vmov	r2, s19
 8018076:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018078:	ee19 0a10 	vmov	r0, s18
 801807c:	9308      	str	r3, [sp, #32]
 801807e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018080:	9307      	str	r3, [sp, #28]
 8018082:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8018084:	9306      	str	r3, [sp, #24]
 8018086:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 8018088:	9305      	str	r3, [sp, #20]
 801808a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801808c:	9304      	str	r3, [sp, #16]
 801808e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8018090:	9303      	str	r3, [sp, #12]
 8018092:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018094:	9302      	str	r3, [sp, #8]
 8018096:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8018098:	9300      	str	r3, [sp, #0]
 801809a:	2300      	movs	r3, #0
 801809c:	9301      	str	r3, [sp, #4]
 801809e:	ee18 3a90 	vmov	r3, s17
 80180a2:	f008 fd67 	bl	8020b74 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 80180a6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80180a8:	901e      	str	r0, [sp, #120]	@ 0x78
 80180aa:	2b03      	cmp	r3, #3
 80180ac:	d1ba      	bne.n	8018024 <forward_lite_conv2d_sssa8_ch+0x550>
 80180ae:	e7b4      	b.n	801801a <forward_lite_conv2d_sssa8_ch+0x546>
 80180b0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80180b2:	3302      	adds	r3, #2
 80180b4:	931e      	str	r3, [sp, #120]	@ 0x78
 80180b6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80180b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80180ba:	e6cd      	b.n	8017e58 <forward_lite_conv2d_sssa8_ch+0x384>
 80180bc:	4572      	cmp	r2, lr
 80180be:	f840 6c04 	str.w	r6, [r0, #-4]
 80180c2:	f100 0004 	add.w	r0, r0, #4
 80180c6:	f47f ad8a 	bne.w	8017bde <forward_lite_conv2d_sssa8_ch+0x10a>
 80180ca:	e59b      	b.n	8017c04 <forward_lite_conv2d_sssa8_ch+0x130>
 80180cc:	9321      	str	r3, [sp, #132]	@ 0x84
 80180ce:	e72d      	b.n	8017f2c <forward_lite_conv2d_sssa8_ch+0x458>
 80180d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80180d2:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 80180d4:	3303      	adds	r3, #3
 80180d6:	18d3      	adds	r3, r2, r3
 80180d8:	931e      	str	r3, [sp, #120]	@ 0x78
 80180da:	e641      	b.n	8017d60 <forward_lite_conv2d_sssa8_ch+0x28c>
 80180dc:	4611      	mov	r1, r2
 80180de:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 80180e0:	9321      	str	r3, [sp, #132]	@ 0x84
 80180e2:	440a      	add	r2, r1
 80180e4:	927f      	str	r2, [sp, #508]	@ 0x1fc
 80180e6:	e721      	b.n	8017f2c <forward_lite_conv2d_sssa8_ch+0x458>
 80180e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80180ea:	ee19 1a10 	vmov	r1, s18
 80180ee:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80180f0:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 80180f2:	f000 fc11 	bl	8018918 <st_int8_to16_dual>
 80180f6:	e62d      	b.n	8017d54 <forward_lite_conv2d_sssa8_ch+0x280>
 80180f8:	ee18 1a90 	vmov	r1, s17
 80180fc:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80180fe:	fb02 f301 	mul.w	r3, r2, r1
 8018102:	42a3      	cmp	r3, r4
 8018104:	f73f adc1 	bgt.w	8017c8a <forward_lite_conv2d_sssa8_ch+0x1b6>
 8018108:	f01a 0f03 	tst.w	sl, #3
 801810c:	f8cd 80dc 	str.w	r8, [sp, #220]	@ 0xdc
 8018110:	f040 822e 	bne.w	8018570 <forward_lite_conv2d_sssa8_ch+0xa9c>
 8018114:	ee18 3a90 	vmov	r3, s17
 8018118:	ee19 1a10 	vmov	r1, s18
 801811c:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 801811e:	f000 fce5 	bl	8018aec <st_int8_to16_dual_interleaved>
 8018122:	e5b4      	b.n	8017c8e <forward_lite_conv2d_sssa8_ch+0x1ba>
 8018124:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018126:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018128:	fb02 f303 	mul.w	r3, r2, r3
 801812c:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 801812e:	fb0a 0303 	mla	r3, sl, r3, r0
 8018132:	429a      	cmp	r2, r3
 8018134:	bf2c      	ite	cs
 8018136:	2300      	movcs	r3, #0
 8018138:	2301      	movcc	r3, #1
 801813a:	932e      	str	r3, [sp, #184]	@ 0xb8
 801813c:	e505      	b.n	8017b4a <forward_lite_conv2d_sssa8_ch+0x76>
 801813e:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8018140:	2b00      	cmp	r3, #0
 8018142:	f43f aefd 	beq.w	8017f40 <forward_lite_conv2d_sssa8_ch+0x46c>
 8018146:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8018148:	fb0a f306 	mul.w	r3, sl, r6
 801814c:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801814e:	fa0f f989 	sxth.w	r9, r9
 8018152:	9238      	str	r2, [sp, #224]	@ 0xe0
 8018154:	ee0a aa90 	vmov	s21, sl
 8018158:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801815a:	fb01 f40a 	mul.w	r4, r1, sl
 801815e:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8018160:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018164:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8018166:	9413      	str	r4, [sp, #76]	@ 0x4c
 8018168:	931a      	str	r3, [sp, #104]	@ 0x68
 801816a:	fb01 f302 	mul.w	r3, r1, r2
 801816e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8018170:	425b      	negs	r3, r3
 8018172:	1a1b      	subs	r3, r3, r0
 8018174:	fb0a 5303 	mla	r3, sl, r3, r5
 8018178:	9d7f      	ldr	r5, [sp, #508]	@ 0x1fc
 801817a:	9335      	str	r3, [sp, #212]	@ 0xd4
 801817c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801817e:	953c      	str	r5, [sp, #240]	@ 0xf0
 8018180:	3b01      	subs	r3, #1
 8018182:	b29b      	uxth	r3, r3
 8018184:	9341      	str	r3, [sp, #260]	@ 0x104
 8018186:	1ccb      	adds	r3, r1, #3
 8018188:	18eb      	adds	r3, r5, r3
 801818a:	933b      	str	r3, [sp, #236]	@ 0xec
 801818c:	f00a 0303 	and.w	r3, sl, #3
 8018190:	9312      	str	r3, [sp, #72]	@ 0x48
 8018192:	007b      	lsls	r3, r7, #1
 8018194:	931c      	str	r3, [sp, #112]	@ 0x70
 8018196:	ea4f 034a 	mov.w	r3, sl, lsl #1
 801819a:	9334      	str	r3, [sp, #208]	@ 0xd0
 801819c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801819e:	1a9b      	subs	r3, r3, r2
 80181a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80181a2:	4253      	negs	r3, r2
 80181a4:	9318      	str	r3, [sp, #96]	@ 0x60
 80181a6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80181a8:	fb03 f304 	mul.w	r3, r3, r4
 80181ac:	933e      	str	r3, [sp, #248]	@ 0xf8
 80181ae:	4243      	negs	r3, r0
 80181b0:	a84e      	add	r0, sp, #312	@ 0x138
 80181b2:	933a      	str	r3, [sp, #232]	@ 0xe8
 80181b4:	1c8b      	adds	r3, r1, #2
 80181b6:	9340      	str	r3, [sp, #256]	@ 0x100
 80181b8:	ee18 3a90 	vmov	r3, s17
 80181bc:	fb01 f303 	mul.w	r3, r1, r3
 80181c0:	933f      	str	r3, [sp, #252]	@ 0xfc
 80181c2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80181c4:	fb03 f30a 	mul.w	r3, r3, sl
 80181c8:	46ca      	mov	sl, r9
 80181ca:	9319      	str	r3, [sp, #100]	@ 0x64
 80181cc:	f000 fda2 	bl	8018d14 <ai_padding_opt_phase1>
 80181d0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80181d2:	2b03      	cmp	r3, #3
 80181d4:	f000 81b6 	beq.w	8018544 <forward_lite_conv2d_sssa8_ch+0xa70>
 80181d8:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 80181da:	9328      	str	r3, [sp, #160]	@ 0xa0
 80181dc:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80181de:	933d      	str	r3, [sp, #244]	@ 0xf4
 80181e0:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80181e2:	b953      	cbnz	r3, 80181fa <forward_lite_conv2d_sssa8_ch+0x726>
 80181e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	f040 81ba 	bne.w	8018560 <forward_lite_conv2d_sssa8_ch+0xa8c>
 80181ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80181ee:	ee19 1a10 	vmov	r1, s18
 80181f2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80181f4:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 80181f6:	f000 fc79 	bl	8018aec <st_int8_to16_dual_interleaved>
 80181fa:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	f000 817f 	beq.w	8018500 <forward_lite_conv2d_sssa8_ch+0xa2c>
 8018202:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018204:	eeb0 aa69 	vmov.f32	s20, s19
 8018208:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801820a:	46b8      	mov	r8, r7
 801820c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801820e:	1a9b      	subs	r3, r3, r2
 8018210:	edcd 8a32 	vstr	s17, [sp, #200]	@ 0xc8
 8018214:	fb01 f303 	mul.w	r3, r1, r3
 8018218:	931d      	str	r3, [sp, #116]	@ 0x74
 801821a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801821c:	18d3      	adds	r3, r2, r3
 801821e:	9333      	str	r3, [sp, #204]	@ 0xcc
 8018220:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018222:	9331      	str	r3, [sp, #196]	@ 0xc4
 8018224:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018226:	9323      	str	r3, [sp, #140]	@ 0x8c
 8018228:	9b72      	ldr	r3, [sp, #456]	@ 0x1c8
 801822a:	9336      	str	r3, [sp, #216]	@ 0xd8
 801822c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801822e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8018230:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8018232:	932e      	str	r3, [sp, #184]	@ 0xb8
 8018234:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 8018236:	932a      	str	r3, [sp, #168]	@ 0xa8
 8018238:	9a52      	ldr	r2, [sp, #328]	@ 0x148
 801823a:	9b51      	ldr	r3, [sp, #324]	@ 0x144
 801823c:	924f      	str	r2, [sp, #316]	@ 0x13c
 801823e:	9a53      	ldr	r2, [sp, #332]	@ 0x14c
 8018240:	934e      	str	r3, [sp, #312]	@ 0x138
 8018242:	9250      	str	r2, [sp, #320]	@ 0x140
 8018244:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018246:	2a00      	cmp	r2, #0
 8018248:	f000 8120 	beq.w	801848c <forward_lite_conv2d_sssa8_ch+0x9b8>
 801824c:	e9dd 212c 	ldrd	r2, r1, [sp, #176]	@ 0xb0
 8018250:	1a57      	subs	r7, r2, r1
 8018252:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 8018254:	920c      	str	r2, [sp, #48]	@ 0x30
 8018256:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8018258:	920f      	str	r2, [sp, #60]	@ 0x3c
 801825a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801825c:	921e      	str	r2, [sp, #120]	@ 0x78
 801825e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8018260:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018262:	2200      	movs	r2, #0
 8018264:	9211      	str	r2, [sp, #68]	@ 0x44
 8018266:	2b00      	cmp	r3, #0
 8018268:	d05f      	beq.n	801832a <forward_lite_conv2d_sssa8_ch+0x856>
 801826a:	3b01      	subs	r3, #1
 801826c:	934e      	str	r3, [sp, #312]	@ 0x138
 801826e:	2301      	movs	r3, #1
 8018270:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 8018274:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8018276:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018278:	4293      	cmp	r3, r2
 801827a:	dd3f      	ble.n	80182fc <forward_lite_conv2d_sssa8_ch+0x828>
 801827c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801827e:	ee08 8a10 	vmov	s16, r8
 8018282:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8018284:	ee1a 9a90 	vmov	r9, s21
 8018288:	1afb      	subs	r3, r7, r3
 801828a:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 801828c:	fb05 f303 	mul.w	r3, r5, r3
 8018290:	9317      	str	r3, [sp, #92]	@ 0x5c
 8018292:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018294:	930d      	str	r3, [sp, #52]	@ 0x34
 8018296:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018298:	930e      	str	r3, [sp, #56]	@ 0x38
 801829a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801829c:	42bc      	cmp	r4, r7
 801829e:	da21      	bge.n	80182e4 <forward_lite_conv2d_sssa8_ch+0x810>
 80182a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80182a4:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80182a8:	4293      	cmp	r3, r2
 80182aa:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 80182ae:	bf34      	ite	cc
 80182b0:	2300      	movcc	r3, #0
 80182b2:	2301      	movcs	r3, #1
 80182b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80182b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d03f      	beq.n	801833c <forward_lite_conv2d_sssa8_ch+0x868>
 80182bc:	42b4      	cmp	r4, r6
 80182be:	4641      	mov	r1, r8
 80182c0:	464a      	mov	r2, r9
 80182c2:	4650      	mov	r0, sl
 80182c4:	d203      	bcs.n	80182ce <forward_lite_conv2d_sssa8_ch+0x7fa>
 80182c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	f000 80bf 	beq.w	801844c <forward_lite_conv2d_sssa8_ch+0x978>
 80182ce:	f000 fd3b 	bl	8018d48 <st_int16_fill>
 80182d2:	3401      	adds	r4, #1
 80182d4:	44a8      	add	r8, r5
 80182d6:	44cb      	add	fp, r9
 80182d8:	42a7      	cmp	r7, r4
 80182da:	d1ef      	bne.n	80182bc <forward_lite_conv2d_sssa8_ch+0x7e8>
 80182dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80182de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80182e0:	4413      	add	r3, r2
 80182e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80182e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80182e6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80182e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182ea:	440a      	add	r2, r1
 80182ec:	3301      	adds	r3, #1
 80182ee:	920d      	str	r2, [sp, #52]	@ 0x34
 80182f0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80182f2:	930e      	str	r3, [sp, #56]	@ 0x38
 80182f4:	4293      	cmp	r3, r2
 80182f6:	d1d0      	bne.n	801829a <forward_lite_conv2d_sssa8_ch+0x7c6>
 80182f8:	ee18 8a10 	vmov	r8, s16
 80182fc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80182fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018300:	4293      	cmp	r3, r2
 8018302:	d055      	beq.n	80183b0 <forward_lite_conv2d_sssa8_ch+0x8dc>
 8018304:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018306:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8018308:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801830a:	440a      	add	r2, r1
 801830c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801830e:	3301      	adds	r3, #1
 8018310:	920f      	str	r2, [sp, #60]	@ 0x3c
 8018312:	440f      	add	r7, r1
 8018314:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018316:	9311      	str	r3, [sp, #68]	@ 0x44
 8018318:	440a      	add	r2, r1
 801831a:	920c      	str	r2, [sp, #48]	@ 0x30
 801831c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801831e:	429a      	cmp	r2, r3
 8018320:	f000 8098 	beq.w	8018454 <forward_lite_conv2d_sssa8_ch+0x980>
 8018324:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8018326:	2b00      	cmp	r3, #0
 8018328:	d19f      	bne.n	801826a <forward_lite_conv2d_sssa8_ch+0x796>
 801832a:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 801832c:	b9b3      	cbnz	r3, 801835c <forward_lite_conv2d_sssa8_ch+0x888>
 801832e:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 8018330:	3b01      	subs	r3, #1
 8018332:	9350      	str	r3, [sp, #320]	@ 0x140
 8018334:	2301      	movs	r3, #1
 8018336:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 801833a:	e79b      	b.n	8018274 <forward_lite_conv2d_sssa8_ch+0x7a0>
 801833c:	42b4      	cmp	r4, r6
 801833e:	464a      	mov	r2, r9
 8018340:	4641      	mov	r1, r8
 8018342:	4650      	mov	r0, sl
 8018344:	d202      	bcs.n	801834c <forward_lite_conv2d_sssa8_ch+0x878>
 8018346:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018348:	2b00      	cmp	r3, #0
 801834a:	d07b      	beq.n	8018444 <forward_lite_conv2d_sssa8_ch+0x970>
 801834c:	f000 fcfc 	bl	8018d48 <st_int16_fill>
 8018350:	3401      	adds	r4, #1
 8018352:	44a8      	add	r8, r5
 8018354:	44cb      	add	fp, r9
 8018356:	42bc      	cmp	r4, r7
 8018358:	d1f0      	bne.n	801833c <forward_lite_conv2d_sssa8_ch+0x868>
 801835a:	e7bf      	b.n	80182dc <forward_lite_conv2d_sssa8_ch+0x808>
 801835c:	3b01      	subs	r3, #1
 801835e:	934f      	str	r3, [sp, #316]	@ 0x13c
 8018360:	f8bd 315c 	ldrh.w	r3, [sp, #348]	@ 0x15c
 8018364:	2b01      	cmp	r3, #1
 8018366:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 801836a:	d083      	beq.n	8018274 <forward_lite_conv2d_sssa8_ch+0x7a0>
 801836c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801836e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8018370:	2b00      	cmp	r3, #0
 8018372:	d14b      	bne.n	801840c <forward_lite_conv2d_sssa8_ch+0x938>
 8018374:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018376:	429c      	cmp	r4, r3
 8018378:	dac0      	bge.n	80182fc <forward_lite_conv2d_sssa8_ch+0x828>
 801837a:	970a      	str	r7, [sp, #40]	@ 0x28
 801837c:	461f      	mov	r7, r3
 801837e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018380:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8018382:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 8018386:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 801838a:	3401      	adds	r4, #1
 801838c:	4629      	mov	r1, r5
 801838e:	4630      	mov	r0, r6
 8018390:	4642      	mov	r2, r8
 8018392:	f000 fa7d 	bl	8018890 <st_int8_to16_no_shift_interleaved>
 8018396:	42bc      	cmp	r4, r7
 8018398:	444d      	add	r5, r9
 801839a:	445e      	add	r6, fp
 801839c:	d1f5      	bne.n	801838a <forward_lite_conv2d_sssa8_ch+0x8b6>
 801839e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80183a0:	e9dd 730a 	ldrd	r7, r3, [sp, #40]	@ 0x28
 80183a4:	4413      	add	r3, r2
 80183a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80183a8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80183aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80183ac:	4293      	cmp	r3, r2
 80183ae:	d1a9      	bne.n	8018304 <forward_lite_conv2d_sssa8_ch+0x830>
 80183b0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80183b2:	ee19 0a10 	vmov	r0, s18
 80183b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80183b8:	9308      	str	r3, [sp, #32]
 80183ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80183bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80183be:	9307      	str	r3, [sp, #28]
 80183c0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80183c2:	3401      	adds	r4, #1
 80183c4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80183c6:	9306      	str	r3, [sp, #24]
 80183c8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80183ca:	9411      	str	r4, [sp, #68]	@ 0x44
 80183cc:	9305      	str	r3, [sp, #20]
 80183ce:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80183d0:	9304      	str	r3, [sp, #16]
 80183d2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80183d4:	9303      	str	r3, [sp, #12]
 80183d6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80183d8:	9302      	str	r3, [sp, #8]
 80183da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80183dc:	9300      	str	r3, [sp, #0]
 80183de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80183e0:	4413      	add	r3, r2
 80183e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80183e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80183e6:	4417      	add	r7, r2
 80183e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80183ea:	4413      	add	r3, r2
 80183ec:	ee1a 2a10 	vmov	r2, s20
 80183f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80183f2:	2300      	movs	r3, #0
 80183f4:	9301      	str	r3, [sp, #4]
 80183f6:	ee18 3a90 	vmov	r3, s17
 80183fa:	f008 fbbb 	bl	8020b74 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 80183fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018400:	901e      	str	r0, [sp, #120]	@ 0x78
 8018402:	42a3      	cmp	r3, r4
 8018404:	d042      	beq.n	801848c <forward_lite_conv2d_sssa8_ch+0x9b8>
 8018406:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018408:	930b      	str	r3, [sp, #44]	@ 0x2c
 801840a:	e78b      	b.n	8018324 <forward_lite_conv2d_sssa8_ch+0x850>
 801840c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801840e:	429c      	cmp	r4, r3
 8018410:	f6bf af74 	bge.w	80182fc <forward_lite_conv2d_sssa8_ch+0x828>
 8018414:	970a      	str	r7, [sp, #40]	@ 0x28
 8018416:	461f      	mov	r7, r3
 8018418:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801841a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801841c:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 8018420:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 8018424:	3401      	adds	r4, #1
 8018426:	4629      	mov	r1, r5
 8018428:	4630      	mov	r0, r6
 801842a:	4642      	mov	r2, r8
 801842c:	f000 f9ce 	bl	80187cc <st_int8_to16_no_shift>
 8018430:	42bc      	cmp	r4, r7
 8018432:	444d      	add	r5, r9
 8018434:	445e      	add	r6, fp
 8018436:	d1f5      	bne.n	8018424 <forward_lite_conv2d_sssa8_ch+0x950>
 8018438:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801843a:	e9dd 730a 	ldrd	r7, r3, [sp, #40]	@ 0x28
 801843e:	4413      	add	r3, r2
 8018440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018442:	e7b1      	b.n	80183a8 <forward_lite_conv2d_sssa8_ch+0x8d4>
 8018444:	4658      	mov	r0, fp
 8018446:	f000 fa23 	bl	8018890 <st_int8_to16_no_shift_interleaved>
 801844a:	e781      	b.n	8018350 <forward_lite_conv2d_sssa8_ch+0x87c>
 801844c:	4658      	mov	r0, fp
 801844e:	f000 f9bd 	bl	80187cc <st_int8_to16_no_shift>
 8018452:	e73e      	b.n	80182d2 <forward_lite_conv2d_sssa8_ch+0x7fe>
 8018454:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018456:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018458:	428b      	cmp	r3, r1
 801845a:	d017      	beq.n	801848c <forward_lite_conv2d_sssa8_ch+0x9b8>
 801845c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801845e:	ee1a 2a10 	vmov	r2, s20
 8018462:	ee19 0a10 	vmov	r0, s18
 8018466:	9307      	str	r3, [sp, #28]
 8018468:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801846a:	9306      	str	r3, [sp, #24]
 801846c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801846e:	9305      	str	r3, [sp, #20]
 8018470:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8018472:	9304      	str	r3, [sp, #16]
 8018474:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8018476:	9303      	str	r3, [sp, #12]
 8018478:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801847a:	9302      	str	r3, [sp, #8]
 801847c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801847e:	9301      	str	r3, [sp, #4]
 8018480:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8018482:	9300      	str	r3, [sp, #0]
 8018484:	ee18 3a90 	vmov	r3, s17
 8018488:	f001 f886 	bl	8019598 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 801848c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801848e:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8018490:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8018492:	1a9b      	subs	r3, r3, r2
 8018494:	4411      	add	r1, r2
 8018496:	9128      	str	r1, [sp, #160]	@ 0xa0
 8018498:	b299      	uxth	r1, r3
 801849a:	4613      	mov	r3, r2
 801849c:	428a      	cmp	r2, r1
 801849e:	9132      	str	r1, [sp, #200]	@ 0xc8
 80184a0:	bf28      	it	cs
 80184a2:	460b      	movcs	r3, r1
 80184a4:	b29b      	uxth	r3, r3
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d051      	beq.n	801854e <forward_lite_conv2d_sssa8_ch+0xa7a>
 80184aa:	ee1a 4a10 	vmov	r4, s20
 80184ae:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 80184b0:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 80184b2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80184b6:	fb01 0002 	mla	r0, r1, r2, r0
 80184ba:	ee0a 4a10 	vmov	s20, r4
 80184be:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 80184c0:	9036      	str	r0, [sp, #216]	@ 0xd8
 80184c2:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 80184c6:	942e      	str	r4, [sp, #184]	@ 0xb8
 80184c8:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 80184ca:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80184ce:	942a      	str	r4, [sp, #168]	@ 0xa8
 80184d0:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80184d2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80184d6:	9229      	str	r2, [sp, #164]	@ 0xa4
 80184d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80184da:	2a00      	cmp	r2, #0
 80184dc:	d139      	bne.n	8018552 <forward_lite_conv2d_sssa8_ch+0xa7e>
 80184de:	460a      	mov	r2, r1
 80184e0:	ee19 1a10 	vmov	r1, s18
 80184e4:	9323      	str	r3, [sp, #140]	@ 0x8c
 80184e6:	f000 fb01 	bl	8018aec <st_int8_to16_dual_interleaved>
 80184ea:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80184ec:	3b01      	subs	r3, #1
 80184ee:	b29b      	uxth	r3, r3
 80184f0:	461a      	mov	r2, r3
 80184f2:	9331      	str	r3, [sp, #196]	@ 0xc4
 80184f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80184f8:	429a      	cmp	r2, r3
 80184fa:	f47f ae9d 	bne.w	8018238 <forward_lite_conv2d_sssa8_ch+0x764>
 80184fe:	4647      	mov	r7, r8
 8018500:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8018502:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018504:	4413      	add	r3, r2
 8018506:	9310      	str	r3, [sp, #64]	@ 0x40
 8018508:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801850a:	4413      	add	r3, r2
 801850c:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 801850e:	9318      	str	r3, [sp, #96]	@ 0x60
 8018510:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8018512:	4413      	add	r3, r2
 8018514:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8018516:	9335      	str	r3, [sp, #212]	@ 0xd4
 8018518:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 801851a:	4413      	add	r3, r2
 801851c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801851e:	933b      	str	r3, [sp, #236]	@ 0xec
 8018520:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8018522:	4413      	add	r3, r2
 8018524:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8018526:	933c      	str	r3, [sp, #240]	@ 0xf0
 8018528:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 801852a:	3301      	adds	r3, #1
 801852c:	9338      	str	r3, [sp, #224]	@ 0xe0
 801852e:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8018530:	4293      	cmp	r3, r2
 8018532:	f77f ad05 	ble.w	8017f40 <forward_lite_conv2d_sssa8_ch+0x46c>
 8018536:	a84e      	add	r0, sp, #312	@ 0x138
 8018538:	f000 fbec 	bl	8018d14 <ai_padding_opt_phase1>
 801853c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801853e:	2b03      	cmp	r3, #3
 8018540:	f47f ae4a 	bne.w	80181d8 <forward_lite_conv2d_sssa8_ch+0x704>
 8018544:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8018546:	933d      	str	r3, [sp, #244]	@ 0xf4
 8018548:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 801854a:	9328      	str	r3, [sp, #160]	@ 0xa0
 801854c:	e648      	b.n	80181e0 <forward_lite_conv2d_sssa8_ch+0x70c>
 801854e:	9323      	str	r3, [sp, #140]	@ 0x8c
 8018550:	e7cb      	b.n	80184ea <forward_lite_conv2d_sssa8_ch+0xa16>
 8018552:	460a      	mov	r2, r1
 8018554:	ee19 1a10 	vmov	r1, s18
 8018558:	9323      	str	r3, [sp, #140]	@ 0x8c
 801855a:	f000 f9dd 	bl	8018918 <st_int8_to16_dual>
 801855e:	e7c4      	b.n	80184ea <forward_lite_conv2d_sssa8_ch+0xa16>
 8018560:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018562:	ee19 1a10 	vmov	r1, s18
 8018566:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8018568:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 801856a:	f000 f9d5 	bl	8018918 <st_int8_to16_dual>
 801856e:	e644      	b.n	80181fa <forward_lite_conv2d_sssa8_ch+0x726>
 8018570:	ee18 3a90 	vmov	r3, s17
 8018574:	ee19 1a10 	vmov	r1, s18
 8018578:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 801857a:	f000 f9cd 	bl	8018918 <st_int8_to16_dual>
 801857e:	f7ff bb86 	b.w	8017c8e <forward_lite_conv2d_sssa8_ch+0x1ba>
 8018582:	bf00      	nop

08018584 <forward_lite_maxpool_is8os8_scaleneg>:
 8018584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018588:	b095      	sub	sp, #84	@ 0x54
 801858a:	4614      	mov	r4, r2
 801858c:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8018590:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8018594:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 8018598:	910d      	str	r1, [sp, #52]	@ 0x34
 801859a:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 801859e:	930c      	str	r3, [sp, #48]	@ 0x30
 80185a0:	910e      	str	r1, [sp, #56]	@ 0x38
 80185a2:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80185a6:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 80185aa:	910f      	str	r1, [sp, #60]	@ 0x3c
 80185ac:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 80185b0:	9206      	str	r2, [sp, #24]
 80185b2:	9110      	str	r1, [sp, #64]	@ 0x40
 80185b4:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 80185b8:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 80185bc:	9111      	str	r1, [sp, #68]	@ 0x44
 80185be:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 80185c2:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 80185c6:	9112      	str	r1, [sp, #72]	@ 0x48
 80185c8:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 80185cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80185ce:	9107      	str	r1, [sp, #28]
 80185d0:	9003      	str	r0, [sp, #12]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	f000 8093 	beq.w	80186fe <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 80185d8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80185dc:	eeb4 0a67 	vcmp.f32	s0, s15
 80185e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185e4:	bf0c      	ite	eq
 80185e6:	2301      	moveq	r3, #1
 80185e8:	2300      	movne	r3, #0
 80185ea:	4290      	cmp	r0, r2
 80185ec:	bf14      	ite	ne
 80185ee:	2300      	movne	r3, #0
 80185f0:	f003 0301 	andeq.w	r3, r3, #1
 80185f4:	9301      	str	r3, [sp, #4]
 80185f6:	2900      	cmp	r1, #0
 80185f8:	f000 8081 	beq.w	80186fe <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 80185fc:	f1ba 0f00 	cmp.w	sl, #0
 8018600:	d07d      	beq.n	80186fe <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 8018602:	ee07 2a90 	vmov	s15, r2
 8018606:	2300      	movs	r3, #0
 8018608:	ed9f 6a4d 	vldr	s12, [pc, #308]	@ 8018740 <forward_lite_maxpool_is8os8_scaleneg+0x1bc>
 801860c:	fb04 fb0a 	mul.w	fp, r4, sl
 8018610:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018614:	9304      	str	r3, [sp, #16]
 8018616:	9b04      	ldr	r3, [sp, #16]
 8018618:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801861c:	9907      	ldr	r1, [sp, #28]
 801861e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018620:	fb03 f202 	mul.w	r2, r3, r2
 8018624:	fb03 f301 	mul.w	r3, r3, r1
 8018628:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801862a:	9308      	str	r3, [sp, #32]
 801862c:	2300      	movs	r3, #0
 801862e:	9305      	str	r3, [sp, #20]
 8018630:	1a53      	subs	r3, r2, r1
 8018632:	1a8a      	subs	r2, r1, r2
 8018634:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018636:	2b00      	cmp	r3, #0
 8018638:	eb02 0c01 	add.w	ip, r2, r1
 801863c:	bfd8      	it	le
 801863e:	4691      	movle	r9, r2
 8018640:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018642:	bfc8      	it	gt
 8018644:	f04f 0900 	movgt.w	r9, #0
 8018648:	4594      	cmp	ip, r2
 801864a:	444b      	add	r3, r9
 801864c:	bfa8      	it	ge
 801864e:	4694      	movge	ip, r2
 8018650:	9a06      	ldr	r2, [sp, #24]
 8018652:	fb02 f303 	mul.w	r3, r2, r3
 8018656:	9309      	str	r3, [sp, #36]	@ 0x24
 8018658:	9a05      	ldr	r2, [sp, #20]
 801865a:	f04f 0e00 	mov.w	lr, #0
 801865e:	9908      	ldr	r1, [sp, #32]
 8018660:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018662:	eb02 0801 	add.w	r8, r2, r1
 8018666:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018668:	fb03 f302 	mul.w	r3, r3, r2
 801866c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801866e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8018670:	fb0a 2808 	mla	r8, sl, r8, r2
 8018674:	1a5a      	subs	r2, r3, r1
 8018676:	1acb      	subs	r3, r1, r3
 8018678:	9906      	ldr	r1, [sp, #24]
 801867a:	2a00      	cmp	r2, #0
 801867c:	bfd8      	it	le
 801867e:	461f      	movle	r7, r3
 8018680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018682:	bfc8      	it	gt
 8018684:	2700      	movgt	r7, #0
 8018686:	18d3      	adds	r3, r2, r3
 8018688:	1a8a      	subs	r2, r1, r2
 801868a:	4294      	cmp	r4, r2
 801868c:	443b      	add	r3, r7
 801868e:	bfa8      	it	ge
 8018690:	4614      	movge	r4, r2
 8018692:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018694:	fb0a 2303 	mla	r3, sl, r3, r2
 8018698:	9302      	str	r3, [sp, #8]
 801869a:	45e1      	cmp	r9, ip
 801869c:	da4d      	bge.n	801873a <forward_lite_maxpool_is8os8_scaleneg+0x1b6>
 801869e:	9b02      	ldr	r3, [sp, #8]
 80186a0:	464d      	mov	r5, r9
 80186a2:	217f      	movs	r1, #127	@ 0x7f
 80186a4:	eb03 060e 	add.w	r6, r3, lr
 80186a8:	42a7      	cmp	r7, r4
 80186aa:	da0a      	bge.n	80186c2 <forward_lite_maxpool_is8os8_scaleneg+0x13e>
 80186ac:	4632      	mov	r2, r6
 80186ae:	463b      	mov	r3, r7
 80186b0:	f992 0000 	ldrsb.w	r0, [r2]
 80186b4:	3301      	adds	r3, #1
 80186b6:	4452      	add	r2, sl
 80186b8:	4281      	cmp	r1, r0
 80186ba:	bfa8      	it	ge
 80186bc:	4601      	movge	r1, r0
 80186be:	429c      	cmp	r4, r3
 80186c0:	d1f6      	bne.n	80186b0 <forward_lite_maxpool_is8os8_scaleneg+0x12c>
 80186c2:	3501      	adds	r5, #1
 80186c4:	445e      	add	r6, fp
 80186c6:	45ac      	cmp	ip, r5
 80186c8:	d1ee      	bne.n	80186a8 <forward_lite_maxpool_is8os8_scaleneg+0x124>
 80186ca:	9b01      	ldr	r3, [sp, #4]
 80186cc:	b1d3      	cbz	r3, 8018704 <forward_lite_maxpool_is8os8_scaleneg+0x180>
 80186ce:	f888 1000 	strb.w	r1, [r8]
 80186d2:	f10e 0e01 	add.w	lr, lr, #1
 80186d6:	f108 0801 	add.w	r8, r8, #1
 80186da:	fa1f f38e 	uxth.w	r3, lr
 80186de:	459a      	cmp	sl, r3
 80186e0:	d8db      	bhi.n	801869a <forward_lite_maxpool_is8os8_scaleneg+0x116>
 80186e2:	9b05      	ldr	r3, [sp, #20]
 80186e4:	9a07      	ldr	r2, [sp, #28]
 80186e6:	3301      	adds	r3, #1
 80186e8:	b29b      	uxth	r3, r3
 80186ea:	429a      	cmp	r2, r3
 80186ec:	9305      	str	r3, [sp, #20]
 80186ee:	d8b3      	bhi.n	8018658 <forward_lite_maxpool_is8os8_scaleneg+0xd4>
 80186f0:	9b04      	ldr	r3, [sp, #16]
 80186f2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80186f4:	3301      	adds	r3, #1
 80186f6:	b29b      	uxth	r3, r3
 80186f8:	429a      	cmp	r2, r3
 80186fa:	9304      	str	r3, [sp, #16]
 80186fc:	d88b      	bhi.n	8018616 <forward_lite_maxpool_is8os8_scaleneg+0x92>
 80186fe:	b015      	add	sp, #84	@ 0x54
 8018700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018704:	9b03      	ldr	r3, [sp, #12]
 8018706:	eeb0 7a66 	vmov.f32	s14, s13
 801870a:	1ac9      	subs	r1, r1, r3
 801870c:	ee07 1a90 	vmov	s15, r1
 8018710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018714:	eea7 7a80 	vfma.f32	s14, s15, s0
 8018718:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801871c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018720:	fe65 7a86 	vselge.f32	s15, s11, s12
 8018724:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801872c:	ee17 3a90 	vmov	r3, s15
 8018730:	f303 0307 	ssat	r3, #8, r3
 8018734:	f888 3000 	strb.w	r3, [r8]
 8018738:	e7cb      	b.n	80186d2 <forward_lite_maxpool_is8os8_scaleneg+0x14e>
 801873a:	217f      	movs	r1, #127	@ 0x7f
 801873c:	e7c5      	b.n	80186ca <forward_lite_maxpool_is8os8_scaleneg+0x146>
 801873e:	bf00      	nop
 8018740:	befffffc 	.word	0xbefffffc

08018744 <forward_lite_nl_softmax_is8os8>:
 8018744:	fbb2 f2f3 	udiv	r2, r2, r3
 8018748:	b410      	push	{r4}
 801874a:	9c01      	ldr	r4, [sp, #4]
 801874c:	fbb2 f2f4 	udiv	r2, r2, r4
 8018750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018754:	f008 bcaa 	b.w	80210ac <_lite_kernel_nl_softmax_is8os8>

08018758 <forward_lite_nl_softmax_iu8ou8>:
 8018758:	fbb2 f2f3 	udiv	r2, r2, r3
 801875c:	b410      	push	{r4}
 801875e:	9c01      	ldr	r4, [sp, #4]
 8018760:	fbb2 f2f4 	udiv	r2, r2, r4
 8018764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018768:	f009 ba52 	b.w	8021c10 <_lite_kernel_nl_softmax_iu8ou8>

0801876c <align_factor_ch>:
 801876c:	b361      	cbz	r1, 80187c8 <align_factor_ch+0x5c>
 801876e:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8018772:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018776:	b570      	push	{r4, r5, r6, lr}
 8018778:	1e9d      	subs	r5, r3, #2
 801877a:	1f14      	subs	r4, r2, #4
 801877c:	2600      	movs	r6, #0
 801877e:	ecf0 7a01 	vldmia	r0!, {s15}
 8018782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018786:	ee17 ea90 	vmov	lr, s15
 801878a:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 801878e:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 8018792:	f1be 0f00 	cmp.w	lr, #0
 8018796:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 801879a:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 801879e:	bfb8      	it	lt
 80187a0:	f1cc 0c00 	rsblt	ip, ip, #0
 80187a4:	2a1f      	cmp	r2, #31
 80187a6:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 80187aa:	dc06      	bgt.n	80187ba <align_factor_ch+0x4e>
 80187ac:	4281      	cmp	r1, r0
 80187ae:	f825 2f02 	strh.w	r2, [r5, #2]!
 80187b2:	f844 3f04 	str.w	r3, [r4, #4]!
 80187b6:	d1e2      	bne.n	801877e <align_factor_ch+0x12>
 80187b8:	bd70      	pop	{r4, r5, r6, pc}
 80187ba:	4281      	cmp	r1, r0
 80187bc:	f825 6f02 	strh.w	r6, [r5, #2]!
 80187c0:	f844 6f04 	str.w	r6, [r4, #4]!
 80187c4:	d1db      	bne.n	801877e <align_factor_ch+0x12>
 80187c6:	bd70      	pop	{r4, r5, r6, pc}
 80187c8:	4770      	bx	lr
 80187ca:	bf00      	nop

080187cc <st_int8_to16_no_shift>:
 80187cc:	b570      	push	{r4, r5, r6, lr}
 80187ce:	f1b2 0410 	subs.w	r4, r2, #16
 80187d2:	f04f 0e00 	mov.w	lr, #0
 80187d6:	d438      	bmi.n	801884a <st_int8_to16_no_shift+0x7e>
 80187d8:	f8d0 c000 	ldr.w	ip, [r0]
 80187dc:	6843      	ldr	r3, [r0, #4]
 80187de:	fa2f f59c 	sxtb16	r5, ip, ror #8
 80187e2:	fa2f fc8c 	sxtb16	ip, ip
 80187e6:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 80187ea:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 80187ee:	fa2f f593 	sxtb16	r5, r3, ror #8
 80187f2:	3010      	adds	r0, #16
 80187f4:	604e      	str	r6, [r1, #4]
 80187f6:	f8c1 c000 	str.w	ip, [r1]
 80187fa:	fa2f f383 	sxtb16	r3, r3
 80187fe:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 8018802:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8018806:	60ce      	str	r6, [r1, #12]
 8018808:	608b      	str	r3, [r1, #8]
 801880a:	f850 cc08 	ldr.w	ip, [r0, #-8]
 801880e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018812:	fa2f f59c 	sxtb16	r5, ip, ror #8
 8018816:	fa2f fc8c 	sxtb16	ip, ip
 801881a:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 801881e:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 8018822:	fa2f f593 	sxtb16	r5, r3, ror #8
 8018826:	f10e 0e10 	add.w	lr, lr, #16
 801882a:	f8c1 c010 	str.w	ip, [r1, #16]
 801882e:	614e      	str	r6, [r1, #20]
 8018830:	3120      	adds	r1, #32
 8018832:	45a6      	cmp	lr, r4
 8018834:	fa2f f383 	sxtb16	r3, r3
 8018838:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 801883c:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8018840:	f841 cc04 	str.w	ip, [r1, #-4]
 8018844:	f841 3c08 	str.w	r3, [r1, #-8]
 8018848:	ddc6      	ble.n	80187d8 <st_int8_to16_no_shift+0xc>
 801884a:	1f16      	subs	r6, r2, #4
 801884c:	4576      	cmp	r6, lr
 801884e:	db12      	blt.n	8018876 <st_int8_to16_no_shift+0xaa>
 8018850:	f850 3b04 	ldr.w	r3, [r0], #4
 8018854:	fa2f f493 	sxtb16	r4, r3, ror #8
 8018858:	f10e 0e04 	add.w	lr, lr, #4
 801885c:	3108      	adds	r1, #8
 801885e:	fa2f f383 	sxtb16	r3, r3
 8018862:	45b6      	cmp	lr, r6
 8018864:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 8018868:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 801886c:	f841 5c04 	str.w	r5, [r1, #-4]
 8018870:	f841 3c08 	str.w	r3, [r1, #-8]
 8018874:	ddec      	ble.n	8018850 <st_int8_to16_no_shift+0x84>
 8018876:	4572      	cmp	r2, lr
 8018878:	dd08      	ble.n	801888c <st_int8_to16_no_shift+0xc0>
 801887a:	eba2 020e 	sub.w	r2, r2, lr
 801887e:	4402      	add	r2, r0
 8018880:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8018884:	4290      	cmp	r0, r2
 8018886:	f821 3b02 	strh.w	r3, [r1], #2
 801888a:	d1f9      	bne.n	8018880 <st_int8_to16_no_shift+0xb4>
 801888c:	bd70      	pop	{r4, r5, r6, pc}
 801888e:	bf00      	nop

08018890 <st_int8_to16_no_shift_interleaved>:
 8018890:	b570      	push	{r4, r5, r6, lr}
 8018892:	f1b2 0510 	subs.w	r5, r2, #16
 8018896:	f04f 0e00 	mov.w	lr, #0
 801889a:	d428      	bmi.n	80188ee <st_int8_to16_no_shift_interleaved+0x5e>
 801889c:	f8d0 c000 	ldr.w	ip, [r0]
 80188a0:	6843      	ldr	r3, [r0, #4]
 80188a2:	fa2f f69c 	sxtb16	r6, ip, ror #8
 80188a6:	fa2f fc8c 	sxtb16	ip, ip
 80188aa:	fa2f f493 	sxtb16	r4, r3, ror #8
 80188ae:	3010      	adds	r0, #16
 80188b0:	600e      	str	r6, [r1, #0]
 80188b2:	f8c1 c004 	str.w	ip, [r1, #4]
 80188b6:	608c      	str	r4, [r1, #8]
 80188b8:	fa2f f383 	sxtb16	r3, r3
 80188bc:	60cb      	str	r3, [r1, #12]
 80188be:	f850 cc08 	ldr.w	ip, [r0, #-8]
 80188c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80188c6:	fa2f f69c 	sxtb16	r6, ip, ror #8
 80188ca:	fa2f fc8c 	sxtb16	ip, ip
 80188ce:	fa2f f493 	sxtb16	r4, r3, ror #8
 80188d2:	f10e 0e10 	add.w	lr, lr, #16
 80188d6:	610e      	str	r6, [r1, #16]
 80188d8:	f8c1 c014 	str.w	ip, [r1, #20]
 80188dc:	3120      	adds	r1, #32
 80188de:	45ae      	cmp	lr, r5
 80188e0:	f841 4c08 	str.w	r4, [r1, #-8]
 80188e4:	fa2f f383 	sxtb16	r3, r3
 80188e8:	f841 3c04 	str.w	r3, [r1, #-4]
 80188ec:	ddd6      	ble.n	801889c <st_int8_to16_no_shift_interleaved+0xc>
 80188ee:	3a04      	subs	r2, #4
 80188f0:	4572      	cmp	r2, lr
 80188f2:	db0f      	blt.n	8018914 <st_int8_to16_no_shift_interleaved+0x84>
 80188f4:	ebae 0e00 	sub.w	lr, lr, r0
 80188f8:	f850 3b04 	ldr.w	r3, [r0], #4
 80188fc:	fa2f f493 	sxtb16	r4, r3, ror #8
 8018900:	eb00 0c0e 	add.w	ip, r0, lr
 8018904:	600c      	str	r4, [r1, #0]
 8018906:	3108      	adds	r1, #8
 8018908:	4562      	cmp	r2, ip
 801890a:	fa2f f383 	sxtb16	r3, r3
 801890e:	f841 3c04 	str.w	r3, [r1, #-4]
 8018912:	daf1      	bge.n	80188f8 <st_int8_to16_no_shift_interleaved+0x68>
 8018914:	bd70      	pop	{r4, r5, r6, pc}
 8018916:	bf00      	nop

08018918 <st_int8_to16_dual>:
 8018918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801891c:	4698      	mov	r8, r3
 801891e:	085b      	lsrs	r3, r3, #1
 8018920:	eb00 0c02 	add.w	ip, r0, r2
 8018924:	f000 80b9 	beq.w	8018a9a <st_int8_to16_dual+0x182>
 8018928:	f1a2 0710 	sub.w	r7, r2, #16
 801892c:	1f16      	subs	r6, r2, #4
 801892e:	2f00      	cmp	r7, #0
 8018930:	f04f 0500 	mov.w	r5, #0
 8018934:	db73      	blt.n	8018a1e <st_int8_to16_dual+0x106>
 8018936:	f8d0 e000 	ldr.w	lr, [r0]
 801893a:	f8dc 4000 	ldr.w	r4, [ip]
 801893e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8018942:	fa2f fe8e 	sxtb16	lr, lr
 8018946:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 801894a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 801894e:	fa2f f994 	sxtb16	r9, r4, ror #8
 8018952:	f8c1 e000 	str.w	lr, [r1]
 8018956:	f8c1 a008 	str.w	sl, [r1, #8]
 801895a:	fa2f f484 	sxtb16	r4, r4
 801895e:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8018962:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 8018966:	f8c1 e00c 	str.w	lr, [r1, #12]
 801896a:	604c      	str	r4, [r1, #4]
 801896c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8018970:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8018974:	fa2f f99e 	sxtb16	r9, lr, ror #8
 8018978:	fa2f fe8e 	sxtb16	lr, lr
 801897c:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 8018980:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 8018984:	fa2f f994 	sxtb16	r9, r4, ror #8
 8018988:	f8c1 e010 	str.w	lr, [r1, #16]
 801898c:	f8c1 a018 	str.w	sl, [r1, #24]
 8018990:	fa2f f484 	sxtb16	r4, r4
 8018994:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 8018998:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 801899c:	f8c1 e01c 	str.w	lr, [r1, #28]
 80189a0:	614c      	str	r4, [r1, #20]
 80189a2:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80189a6:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80189aa:	fa2f f99e 	sxtb16	r9, lr, ror #8
 80189ae:	fa2f fe8e 	sxtb16	lr, lr
 80189b2:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 80189b6:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 80189ba:	fa2f f994 	sxtb16	r9, r4, ror #8
 80189be:	3010      	adds	r0, #16
 80189c0:	f10c 0c10 	add.w	ip, ip, #16
 80189c4:	f8c1 e020 	str.w	lr, [r1, #32]
 80189c8:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 80189cc:	fa2f f484 	sxtb16	r4, r4
 80189d0:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 80189d4:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 80189d8:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 80189dc:	624c      	str	r4, [r1, #36]	@ 0x24
 80189de:	f850 ec04 	ldr.w	lr, [r0, #-4]
 80189e2:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 80189e6:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 80189ea:	fa2f fe8e 	sxtb16	lr, lr
 80189ee:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 80189f2:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 80189f6:	fa2f fa94 	sxtb16	sl, r4, ror #8
 80189fa:	3510      	adds	r5, #16
 80189fc:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 8018a00:	f8c1 9038 	str.w	r9, [r1, #56]	@ 0x38
 8018a04:	3140      	adds	r1, #64	@ 0x40
 8018a06:	42bd      	cmp	r5, r7
 8018a08:	fa2f f484 	sxtb16	r4, r4
 8018a0c:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 8018a10:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 8018a14:	f841 ec04 	str.w	lr, [r1, #-4]
 8018a18:	f841 4c0c 	str.w	r4, [r1, #-12]
 8018a1c:	dd8b      	ble.n	8018936 <st_int8_to16_dual+0x1e>
 8018a1e:	42ae      	cmp	r6, r5
 8018a20:	db1e      	blt.n	8018a60 <st_int8_to16_dual+0x148>
 8018a22:	f850 4b04 	ldr.w	r4, [r0], #4
 8018a26:	f85c eb04 	ldr.w	lr, [ip], #4
 8018a2a:	fa2f fa94 	sxtb16	sl, r4, ror #8
 8018a2e:	fa2f f484 	sxtb16	r4, r4
 8018a32:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 8018a36:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 8018a3a:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 8018a3e:	3504      	adds	r5, #4
 8018a40:	600c      	str	r4, [r1, #0]
 8018a42:	f8c1 9008 	str.w	r9, [r1, #8]
 8018a46:	3110      	adds	r1, #16
 8018a48:	42b5      	cmp	r5, r6
 8018a4a:	fa2f fe8e 	sxtb16	lr, lr
 8018a4e:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 8018a52:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 8018a56:	f841 4c04 	str.w	r4, [r1, #-4]
 8018a5a:	f841 ec0c 	str.w	lr, [r1, #-12]
 8018a5e:	dde0      	ble.n	8018a22 <st_int8_to16_dual+0x10a>
 8018a60:	42aa      	cmp	r2, r5
 8018a62:	dd40      	ble.n	8018ae6 <st_int8_to16_dual+0x1ce>
 8018a64:	1b55      	subs	r5, r2, r5
 8018a66:	1d0c      	adds	r4, r1, #4
 8018a68:	46e6      	mov	lr, ip
 8018a6a:	eb00 0a05 	add.w	sl, r0, r5
 8018a6e:	f910 9b01 	ldrsb.w	r9, [r0], #1
 8018a72:	3404      	adds	r4, #4
 8018a74:	f824 9c08 	strh.w	r9, [r4, #-8]
 8018a78:	4550      	cmp	r0, sl
 8018a7a:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 8018a7e:	f824 9c06 	strh.w	r9, [r4, #-6]
 8018a82:	d1f4      	bne.n	8018a6e <st_int8_to16_dual+0x156>
 8018a84:	44ac      	add	ip, r5
 8018a86:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8018a8a:	3b01      	subs	r3, #1
 8018a8c:	eb0a 0002 	add.w	r0, sl, r2
 8018a90:	4494      	add	ip, r2
 8018a92:	b29b      	uxth	r3, r3
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	f47f af4a 	bne.w	801892e <st_int8_to16_dual+0x16>
 8018a9a:	f018 0f01 	tst.w	r8, #1
 8018a9e:	d020      	beq.n	8018ae2 <st_int8_to16_dual+0x1ca>
 8018aa0:	1f17      	subs	r7, r2, #4
 8018aa2:	f04f 0400 	mov.w	r4, #0
 8018aa6:	d411      	bmi.n	8018acc <st_int8_to16_dual+0x1b4>
 8018aa8:	f850 3b04 	ldr.w	r3, [r0], #4
 8018aac:	fa2f f593 	sxtb16	r5, r3, ror #8
 8018ab0:	3404      	adds	r4, #4
 8018ab2:	3108      	adds	r1, #8
 8018ab4:	fa2f f383 	sxtb16	r3, r3
 8018ab8:	42a7      	cmp	r7, r4
 8018aba:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 8018abe:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 8018ac2:	f841 6c04 	str.w	r6, [r1, #-4]
 8018ac6:	f841 3c08 	str.w	r3, [r1, #-8]
 8018aca:	daed      	bge.n	8018aa8 <st_int8_to16_dual+0x190>
 8018acc:	42a2      	cmp	r2, r4
 8018ace:	dd08      	ble.n	8018ae2 <st_int8_to16_dual+0x1ca>
 8018ad0:	1b13      	subs	r3, r2, r4
 8018ad2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018ad6:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8018ada:	f821 2b02 	strh.w	r2, [r1], #2
 8018ade:	428b      	cmp	r3, r1
 8018ae0:	d1f9      	bne.n	8018ad6 <st_int8_to16_dual+0x1be>
 8018ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ae6:	4682      	mov	sl, r0
 8018ae8:	e7cf      	b.n	8018a8a <st_int8_to16_dual+0x172>
 8018aea:	bf00      	nop

08018aec <st_int8_to16_dual_interleaved>:
 8018aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018af0:	4698      	mov	r8, r3
 8018af2:	085b      	lsrs	r3, r3, #1
 8018af4:	eb00 0c02 	add.w	ip, r0, r2
 8018af8:	f000 808f 	beq.w	8018c1a <st_int8_to16_dual_interleaved+0x12e>
 8018afc:	f1a2 0710 	sub.w	r7, r2, #16
 8018b00:	1f16      	subs	r6, r2, #4
 8018b02:	2f00      	cmp	r7, #0
 8018b04:	f04f 0e00 	mov.w	lr, #0
 8018b08:	db4e      	blt.n	8018ba8 <st_int8_to16_dual_interleaved+0xbc>
 8018b0a:	6805      	ldr	r5, [r0, #0]
 8018b0c:	f8dc 4000 	ldr.w	r4, [ip]
 8018b10:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8018b14:	fa2f f585 	sxtb16	r5, r5
 8018b18:	fa2f f994 	sxtb16	r9, r4, ror #8
 8018b1c:	f8c1 a000 	str.w	sl, [r1]
 8018b20:	f8c1 9004 	str.w	r9, [r1, #4]
 8018b24:	608d      	str	r5, [r1, #8]
 8018b26:	fa2f f484 	sxtb16	r4, r4
 8018b2a:	60cc      	str	r4, [r1, #12]
 8018b2c:	6845      	ldr	r5, [r0, #4]
 8018b2e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8018b32:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8018b36:	fa2f f585 	sxtb16	r5, r5
 8018b3a:	fa2f f994 	sxtb16	r9, r4, ror #8
 8018b3e:	f8c1 a010 	str.w	sl, [r1, #16]
 8018b42:	f8c1 9014 	str.w	r9, [r1, #20]
 8018b46:	618d      	str	r5, [r1, #24]
 8018b48:	fa2f f484 	sxtb16	r4, r4
 8018b4c:	61cc      	str	r4, [r1, #28]
 8018b4e:	6885      	ldr	r5, [r0, #8]
 8018b50:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8018b54:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8018b58:	fa2f f585 	sxtb16	r5, r5
 8018b5c:	fa2f f994 	sxtb16	r9, r4, ror #8
 8018b60:	3010      	adds	r0, #16
 8018b62:	f10c 0c10 	add.w	ip, ip, #16
 8018b66:	f8c1 a020 	str.w	sl, [r1, #32]
 8018b6a:	f8c1 9024 	str.w	r9, [r1, #36]	@ 0x24
 8018b6e:	628d      	str	r5, [r1, #40]	@ 0x28
 8018b70:	fa2f f484 	sxtb16	r4, r4
 8018b74:	62cc      	str	r4, [r1, #44]	@ 0x2c
 8018b76:	f850 5c04 	ldr.w	r5, [r0, #-4]
 8018b7a:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 8018b7e:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8018b82:	fa2f f585 	sxtb16	r5, r5
 8018b86:	fa2f f994 	sxtb16	r9, r4, ror #8
 8018b8a:	f10e 0e10 	add.w	lr, lr, #16
 8018b8e:	f8c1 a030 	str.w	sl, [r1, #48]	@ 0x30
 8018b92:	f8c1 9034 	str.w	r9, [r1, #52]	@ 0x34
 8018b96:	3140      	adds	r1, #64	@ 0x40
 8018b98:	45be      	cmp	lr, r7
 8018b9a:	f841 5c08 	str.w	r5, [r1, #-8]
 8018b9e:	fa2f f484 	sxtb16	r4, r4
 8018ba2:	f841 4c04 	str.w	r4, [r1, #-4]
 8018ba6:	ddb0      	ble.n	8018b0a <st_int8_to16_dual_interleaved+0x1e>
 8018ba8:	4576      	cmp	r6, lr
 8018baa:	db18      	blt.n	8018bde <st_int8_to16_dual_interleaved+0xf2>
 8018bac:	f850 5b04 	ldr.w	r5, [r0], #4
 8018bb0:	f85c 4b04 	ldr.w	r4, [ip], #4
 8018bb4:	fa2f fa95 	sxtb16	sl, r5, ror #8
 8018bb8:	fa2f f585 	sxtb16	r5, r5
 8018bbc:	fa2f f994 	sxtb16	r9, r4, ror #8
 8018bc0:	f10e 0e04 	add.w	lr, lr, #4
 8018bc4:	f8c1 a000 	str.w	sl, [r1]
 8018bc8:	f8c1 9004 	str.w	r9, [r1, #4]
 8018bcc:	3110      	adds	r1, #16
 8018bce:	45b6      	cmp	lr, r6
 8018bd0:	f841 5c08 	str.w	r5, [r1, #-8]
 8018bd4:	fa2f f484 	sxtb16	r4, r4
 8018bd8:	f841 4c04 	str.w	r4, [r1, #-4]
 8018bdc:	dde6      	ble.n	8018bac <st_int8_to16_dual_interleaved+0xc0>
 8018bde:	4572      	cmp	r2, lr
 8018be0:	dd3c      	ble.n	8018c5c <st_int8_to16_dual_interleaved+0x170>
 8018be2:	eba2 0e0e 	sub.w	lr, r2, lr
 8018be6:	1d0c      	adds	r4, r1, #4
 8018be8:	4665      	mov	r5, ip
 8018bea:	eb00 0a0e 	add.w	sl, r0, lr
 8018bee:	f910 9b01 	ldrsb.w	r9, [r0], #1
 8018bf2:	3404      	adds	r4, #4
 8018bf4:	f824 9c08 	strh.w	r9, [r4, #-8]
 8018bf8:	4550      	cmp	r0, sl
 8018bfa:	f915 9b01 	ldrsb.w	r9, [r5], #1
 8018bfe:	f824 9c06 	strh.w	r9, [r4, #-6]
 8018c02:	d1f4      	bne.n	8018bee <st_int8_to16_dual_interleaved+0x102>
 8018c04:	44f4      	add	ip, lr
 8018c06:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8018c0a:	3b01      	subs	r3, #1
 8018c0c:	eb0a 0002 	add.w	r0, sl, r2
 8018c10:	4494      	add	ip, r2
 8018c12:	b29b      	uxth	r3, r3
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	f47f af74 	bne.w	8018b02 <st_int8_to16_dual_interleaved+0x16>
 8018c1a:	f018 0f01 	tst.w	r8, #1
 8018c1e:	d01b      	beq.n	8018c58 <st_int8_to16_dual_interleaved+0x16c>
 8018c20:	1f16      	subs	r6, r2, #4
 8018c22:	f04f 0400 	mov.w	r4, #0
 8018c26:	d40c      	bmi.n	8018c42 <st_int8_to16_dual_interleaved+0x156>
 8018c28:	f850 3b04 	ldr.w	r3, [r0], #4
 8018c2c:	fa2f f593 	sxtb16	r5, r3, ror #8
 8018c30:	3404      	adds	r4, #4
 8018c32:	600d      	str	r5, [r1, #0]
 8018c34:	3108      	adds	r1, #8
 8018c36:	42a6      	cmp	r6, r4
 8018c38:	fa2f f383 	sxtb16	r3, r3
 8018c3c:	f841 3c04 	str.w	r3, [r1, #-4]
 8018c40:	daf2      	bge.n	8018c28 <st_int8_to16_dual_interleaved+0x13c>
 8018c42:	42a2      	cmp	r2, r4
 8018c44:	dd08      	ble.n	8018c58 <st_int8_to16_dual_interleaved+0x16c>
 8018c46:	1b13      	subs	r3, r2, r4
 8018c48:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018c4c:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8018c50:	f821 2b02 	strh.w	r2, [r1], #2
 8018c54:	428b      	cmp	r3, r1
 8018c56:	d1f9      	bne.n	8018c4c <st_int8_to16_dual_interleaved+0x160>
 8018c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c5c:	4682      	mov	sl, r0
 8018c5e:	e7d4      	b.n	8018c0a <st_int8_to16_dual_interleaved+0x11e>

08018c60 <ai_padding_opt_init>:
 8018c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c64:	2700      	movs	r7, #0
 8018c66:	9c07      	ldr	r4, [sp, #28]
 8018c68:	e9c0 7700 	strd	r7, r7, [r0]
 8018c6c:	6087      	str	r7, [r0, #8]
 8018c6e:	46b9      	mov	r9, r7
 8018c70:	690e      	ldr	r6, [r1, #16]
 8018c72:	f1c6 0c00 	rsb	ip, r6, #0
 8018c76:	689e      	ldr	r6, [r3, #8]
 8018c78:	42be      	cmp	r6, r7
 8018c7a:	dd1c      	ble.n	8018cb6 <ai_padding_opt_init+0x56>
 8018c7c:	463e      	mov	r6, r7
 8018c7e:	46be      	mov	lr, r7
 8018c80:	e010      	b.n	8018ca4 <ai_padding_opt_init+0x44>
 8018c82:	6895      	ldr	r5, [r2, #8]
 8018c84:	eba5 080c 	sub.w	r8, r5, ip
 8018c88:	68a5      	ldr	r5, [r4, #8]
 8018c8a:	45a8      	cmp	r8, r5
 8018c8c:	da10      	bge.n	8018cb0 <ai_padding_opt_init+0x50>
 8018c8e:	f109 0901 	add.w	r9, r9, #1
 8018c92:	f8c0 9008 	str.w	r9, [r0, #8]
 8018c96:	688d      	ldr	r5, [r1, #8]
 8018c98:	f10e 0e01 	add.w	lr, lr, #1
 8018c9c:	44ac      	add	ip, r5
 8018c9e:	689d      	ldr	r5, [r3, #8]
 8018ca0:	4575      	cmp	r5, lr
 8018ca2:	dd09      	ble.n	8018cb8 <ai_padding_opt_init+0x58>
 8018ca4:	f1bc 0f00 	cmp.w	ip, #0
 8018ca8:	daeb      	bge.n	8018c82 <ai_padding_opt_init+0x22>
 8018caa:	3601      	adds	r6, #1
 8018cac:	6006      	str	r6, [r0, #0]
 8018cae:	e7f2      	b.n	8018c96 <ai_padding_opt_init+0x36>
 8018cb0:	3701      	adds	r7, #1
 8018cb2:	6047      	str	r7, [r0, #4]
 8018cb4:	e7ef      	b.n	8018c96 <ai_padding_opt_init+0x36>
 8018cb6:	463e      	mov	r6, r7
 8018cb8:	2500      	movs	r5, #0
 8018cba:	f8c0 9014 	str.w	r9, [r0, #20]
 8018cbe:	e9c0 6703 	strd	r6, r7, [r0, #12]
 8018cc2:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8018cc6:	6205      	str	r5, [r0, #32]
 8018cc8:	694e      	ldr	r6, [r1, #20]
 8018cca:	f1c6 0c00 	rsb	ip, r6, #0
 8018cce:	685e      	ldr	r6, [r3, #4]
 8018cd0:	42ae      	cmp	r6, r5
 8018cd2:	dd1c      	ble.n	8018d0e <ai_padding_opt_init+0xae>
 8018cd4:	46ae      	mov	lr, r5
 8018cd6:	e00f      	b.n	8018cf8 <ai_padding_opt_init+0x98>
 8018cd8:	6855      	ldr	r5, [r2, #4]
 8018cda:	6866      	ldr	r6, [r4, #4]
 8018cdc:	eba5 050c 	sub.w	r5, r5, ip
 8018ce0:	42b5      	cmp	r5, r6
 8018ce2:	da10      	bge.n	8018d06 <ai_padding_opt_init+0xa6>
 8018ce4:	6a05      	ldr	r5, [r0, #32]
 8018ce6:	3501      	adds	r5, #1
 8018ce8:	6205      	str	r5, [r0, #32]
 8018cea:	68cd      	ldr	r5, [r1, #12]
 8018cec:	f10e 0e01 	add.w	lr, lr, #1
 8018cf0:	44ac      	add	ip, r5
 8018cf2:	685d      	ldr	r5, [r3, #4]
 8018cf4:	4575      	cmp	r5, lr
 8018cf6:	dd0a      	ble.n	8018d0e <ai_padding_opt_init+0xae>
 8018cf8:	f1bc 0f00 	cmp.w	ip, #0
 8018cfc:	daec      	bge.n	8018cd8 <ai_padding_opt_init+0x78>
 8018cfe:	6985      	ldr	r5, [r0, #24]
 8018d00:	3501      	adds	r5, #1
 8018d02:	6185      	str	r5, [r0, #24]
 8018d04:	e7f1      	b.n	8018cea <ai_padding_opt_init+0x8a>
 8018d06:	69c5      	ldr	r5, [r0, #28]
 8018d08:	3501      	adds	r5, #1
 8018d0a:	61c5      	str	r5, [r0, #28]
 8018d0c:	e7ed      	b.n	8018cea <ai_padding_opt_init+0x8a>
 8018d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d12:	bf00      	nop

08018d14 <ai_padding_opt_phase1>:
 8018d14:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 8018d18:	b923      	cbnz	r3, 8018d24 <ai_padding_opt_phase1+0x10>
 8018d1a:	b17a      	cbz	r2, 8018d3c <ai_padding_opt_phase1+0x28>
 8018d1c:	3a01      	subs	r2, #1
 8018d1e:	8483      	strh	r3, [r0, #36]	@ 0x24
 8018d20:	61c2      	str	r2, [r0, #28]
 8018d22:	e004      	b.n	8018d2e <ai_padding_opt_phase1+0x1a>
 8018d24:	b152      	cbz	r2, 8018d3c <ai_padding_opt_phase1+0x28>
 8018d26:	2201      	movs	r2, #1
 8018d28:	3b01      	subs	r3, #1
 8018d2a:	8482      	strh	r2, [r0, #36]	@ 0x24
 8018d2c:	6183      	str	r3, [r0, #24]
 8018d2e:	68c3      	ldr	r3, [r0, #12]
 8018d30:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8018d34:	6003      	str	r3, [r0, #0]
 8018d36:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8018d3a:	4770      	bx	lr
 8018d3c:	6a03      	ldr	r3, [r0, #32]
 8018d3e:	2201      	movs	r2, #1
 8018d40:	3b01      	subs	r3, #1
 8018d42:	8482      	strh	r2, [r0, #36]	@ 0x24
 8018d44:	6203      	str	r3, [r0, #32]
 8018d46:	e7f2      	b.n	8018d2e <ai_padding_opt_phase1+0x1a>

08018d48 <st_int16_fill>:
 8018d48:	b510      	push	{r4, lr}
 8018d4a:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 8018d4e:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 8018d52:	d013      	beq.n	8018d7c <st_int16_fill+0x34>
 8018d54:	f10e 33ff 	add.w	r3, lr, #4294967295
 8018d58:	2b03      	cmp	r3, #3
 8018d5a:	460b      	mov	r3, r1
 8018d5c:	d919      	bls.n	8018d92 <st_int16_fill+0x4a>
 8018d5e:	f011 0f07 	tst.w	r1, #7
 8018d62:	d116      	bne.n	8018d92 <st_int16_fill+0x4a>
 8018d64:	f04f 0c00 	mov.w	ip, #0
 8018d68:	f10c 0c01 	add.w	ip, ip, #1
 8018d6c:	45e6      	cmp	lr, ip
 8018d6e:	e9c3 4400 	strd	r4, r4, [r3]
 8018d72:	f103 0308 	add.w	r3, r3, #8
 8018d76:	d1f7      	bne.n	8018d68 <st_int16_fill+0x20>
 8018d78:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 8018d7c:	f012 0203 	ands.w	r2, r2, #3
 8018d80:	d006      	beq.n	8018d90 <st_int16_fill+0x48>
 8018d82:	3a01      	subs	r2, #1
 8018d84:	8008      	strh	r0, [r1, #0]
 8018d86:	d003      	beq.n	8018d90 <st_int16_fill+0x48>
 8018d88:	2a01      	cmp	r2, #1
 8018d8a:	8048      	strh	r0, [r1, #2]
 8018d8c:	bf18      	it	ne
 8018d8e:	8088      	strhne	r0, [r1, #4]
 8018d90:	bd10      	pop	{r4, pc}
 8018d92:	46f4      	mov	ip, lr
 8018d94:	f1bc 0c01 	subs.w	ip, ip, #1
 8018d98:	601c      	str	r4, [r3, #0]
 8018d9a:	605c      	str	r4, [r3, #4]
 8018d9c:	f103 0308 	add.w	r3, r3, #8
 8018da0:	d1f8      	bne.n	8018d94 <st_int16_fill+0x4c>
 8018da2:	e7e9      	b.n	8018d78 <st_int16_fill+0x30>

08018da4 <st_sssa8_ch_convolve_rank1upd>:
 8018da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018da8:	b085      	sub	sp, #20
 8018daa:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 8018dae:	f99d b040 	ldrsb.w	fp, [sp, #64]	@ 0x40
 8018db2:	fb13 f304 	smulbb	r3, r3, r4
 8018db6:	460c      	mov	r4, r1
 8018db8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018dba:	fb13 f500 	smulbb	r5, r3, r0
 8018dbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018dc0:	2a00      	cmp	r2, #0
 8018dc2:	d070      	beq.n	8018ea6 <st_sssa8_ch_convolve_rank1upd+0x102>
 8018dc4:	b2ad      	uxth	r5, r5
 8018dc6:	f1a1 0904 	sub.w	r9, r1, #4
 8018dca:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 8018dce:	08af      	lsrs	r7, r5, #2
 8018dd0:	f005 0503 	and.w	r5, r5, #3
 8018dd4:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 8018dd8:	1e69      	subs	r1, r5, #1
 8018dda:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 8018dde:	f1a7 0280 	sub.w	r2, r7, #128	@ 0x80
 8018de2:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8018de6:	b289      	uxth	r1, r1
 8018de8:	9100      	str	r1, [sp, #0]
 8018dea:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 8018dee:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8018df2:	b292      	uxth	r2, r2
 8018df4:	9202      	str	r2, [sp, #8]
 8018df6:	025a      	lsls	r2, r3, #9
 8018df8:	3301      	adds	r3, #1
 8018dfa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8018dfe:	025b      	lsls	r3, r3, #9
 8018e00:	9203      	str	r2, [sp, #12]
 8018e02:	9301      	str	r3, [sp, #4]
 8018e04:	2f80      	cmp	r7, #128	@ 0x80
 8018e06:	d953      	bls.n	8018eb0 <st_sssa8_ch_convolve_rank1upd+0x10c>
 8018e08:	9b03      	ldr	r3, [sp, #12]
 8018e0a:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8018e0e:	2600      	movs	r6, #0
 8018e10:	eb04 0c03 	add.w	ip, r4, r3
 8018e14:	f5a0 7100 	sub.w	r1, r0, #512	@ 0x200
 8018e18:	2200      	movs	r2, #0
 8018e1a:	f851 3b04 	ldr.w	r3, [r1], #4
 8018e1e:	fa2f fe83 	sxtb16	lr, r3
 8018e22:	4281      	cmp	r1, r0
 8018e24:	ea4f 2333 	mov.w	r3, r3, ror #8
 8018e28:	fa92 f21e 	qadd16	r2, r2, lr
 8018e2c:	fa2f f383 	sxtb16	r3, r3
 8018e30:	fa92 f213 	qadd16	r2, r2, r3
 8018e34:	d1f1      	bne.n	8018e1a <st_sssa8_ch_convolve_rank1upd+0x76>
 8018e36:	f501 7000 	add.w	r0, r1, #512	@ 0x200
 8018e3a:	b213      	sxth	r3, r2
 8018e3c:	4560      	cmp	r0, ip
 8018e3e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8018e42:	441e      	add	r6, r3
 8018e44:	d1e6      	bne.n	8018e14 <st_sssa8_ch_convolve_rank1upd+0x70>
 8018e46:	9b01      	ldr	r3, [sp, #4]
 8018e48:	18e1      	adds	r1, r4, r3
 8018e4a:	9c02      	ldr	r4, [sp, #8]
 8018e4c:	b374      	cbz	r4, 8018eac <st_sssa8_ch_convolve_rank1upd+0x108>
 8018e4e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8018e52:	2200      	movs	r2, #0
 8018e54:	f851 3b04 	ldr.w	r3, [r1], #4
 8018e58:	fa2f f083 	sxtb16	r0, r3
 8018e5c:	428c      	cmp	r4, r1
 8018e5e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8018e62:	fa92 f210 	qadd16	r2, r2, r0
 8018e66:	fa2f f383 	sxtb16	r3, r3
 8018e6a:	fa92 f213 	qadd16	r2, r2, r3
 8018e6e:	d1f1      	bne.n	8018e54 <st_sssa8_ch_convolve_rank1upd+0xb0>
 8018e70:	b213      	sxth	r3, r2
 8018e72:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8018e76:	441e      	add	r6, r3
 8018e78:	b16d      	cbz	r5, 8018e96 <st_sssa8_ch_convolve_rank1upd+0xf2>
 8018e7a:	f994 3000 	ldrsb.w	r3, [r4]
 8018e7e:	441e      	add	r6, r3
 8018e80:	9b00      	ldr	r3, [sp, #0]
 8018e82:	b13b      	cbz	r3, 8018e94 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8018e84:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8018e88:	2d02      	cmp	r5, #2
 8018e8a:	441e      	add	r6, r3
 8018e8c:	d002      	beq.n	8018e94 <st_sssa8_ch_convolve_rank1upd+0xf0>
 8018e8e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8018e92:	441e      	add	r6, r3
 8018e94:	442c      	add	r4, r5
 8018e96:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8018e9a:	fb06 331b 	mls	r3, r6, fp, r3
 8018e9e:	f84a 3b04 	str.w	r3, [sl], #4
 8018ea2:	45c2      	cmp	sl, r8
 8018ea4:	d1ae      	bne.n	8018e04 <st_sssa8_ch_convolve_rank1upd+0x60>
 8018ea6:	b005      	add	sp, #20
 8018ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eac:	460c      	mov	r4, r1
 8018eae:	e7e3      	b.n	8018e78 <st_sssa8_ch_convolve_rank1upd+0xd4>
 8018eb0:	4621      	mov	r1, r4
 8018eb2:	2600      	movs	r6, #0
 8018eb4:	463c      	mov	r4, r7
 8018eb6:	e7c9      	b.n	8018e4c <st_sssa8_ch_convolve_rank1upd+0xa8>

08018eb8 <st_sssa8_ch_fully_connected>:
 8018eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ebc:	b097      	sub	sp, #92	@ 0x5c
 8018ebe:	468a      	mov	sl, r1
 8018ec0:	4693      	mov	fp, r2
 8018ec2:	4619      	mov	r1, r3
 8018ec4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018ec6:	9314      	str	r3, [sp, #80]	@ 0x50
 8018ec8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018ecc:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8018ed0:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8018ed2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018ed6:	f99d e088 	ldrsb.w	lr, [sp, #136]	@ 0x88
 8018eda:	9512      	str	r5, [sp, #72]	@ 0x48
 8018edc:	930d      	str	r3, [sp, #52]	@ 0x34
 8018ede:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 8018ee2:	2900      	cmp	r1, #0
 8018ee4:	f000 827b 	beq.w	80193de <st_sssa8_ch_fully_connected+0x526>
 8018ee8:	463c      	mov	r4, r7
 8018eea:	3504      	adds	r5, #4
 8018eec:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8018ef0:	f04f 0c01 	mov.w	ip, #1
 8018ef4:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 8018ef8:	f934 2b02 	ldrsh.w	r2, [r4], #2
 8018efc:	1e51      	subs	r1, r2, #1
 8018efe:	fa0c f602 	lsl.w	r6, ip, r2
 8018f02:	fa03 f202 	lsl.w	r2, r3, r2
 8018f06:	b289      	uxth	r1, r1
 8018f08:	eb02 0256 	add.w	r2, r2, r6, lsr #1
 8018f0c:	2914      	cmp	r1, #20
 8018f0e:	f200 81e8 	bhi.w	80192e2 <st_sssa8_ch_fully_connected+0x42a>
 8018f12:	42bc      	cmp	r4, r7
 8018f14:	f845 2c04 	str.w	r2, [r5, #-4]
 8018f18:	f105 0504 	add.w	r5, r5, #4
 8018f1c:	d1ec      	bne.n	8018ef8 <st_sssa8_ch_fully_connected+0x40>
 8018f1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018f20:	fa1f f38e 	uxth.w	r3, lr
 8018f24:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8018f26:	eba7 0508 	sub.w	r5, r7, r8
 8018f2a:	0852      	lsrs	r2, r2, #1
 8018f2c:	f8cd e000 	str.w	lr, [sp]
 8018f30:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8018f34:	4631      	mov	r1, r6
 8018f36:	4614      	mov	r4, r2
 8018f38:	9215      	str	r2, [sp, #84]	@ 0x54
 8018f3a:	465a      	mov	r2, fp
 8018f3c:	9513      	str	r5, [sp, #76]	@ 0x4c
 8018f3e:	f000 faf5 	bl	801952c <st_int8_reordered_no_shift_zero>
 8018f42:	2c00      	cmp	r4, #0
 8018f44:	f000 8179 	beq.w	801923a <st_sssa8_ch_fully_connected+0x382>
 8018f48:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8018f4a:	1e62      	subs	r2, r4, #1
 8018f4c:	f1ab 0310 	sub.w	r3, fp, #16
 8018f50:	46d9      	mov	r9, fp
 8018f52:	b292      	uxth	r2, r2
 8018f54:	f100 0110 	add.w	r1, r0, #16
 8018f58:	091b      	lsrs	r3, r3, #4
 8018f5a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8018f5e:	3301      	adds	r3, #1
 8018f60:	920e      	str	r2, [sp, #56]	@ 0x38
 8018f62:	f1ab 0203 	sub.w	r2, fp, #3
 8018f66:	920f      	str	r2, [sp, #60]	@ 0x3c
 8018f68:	4602      	mov	r2, r0
 8018f6a:	3208      	adds	r2, #8
 8018f6c:	9208      	str	r2, [sp, #32]
 8018f6e:	1d2a      	adds	r2, r5, #4
 8018f70:	9207      	str	r2, [sp, #28]
 8018f72:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8018f74:	3202      	adds	r2, #2
 8018f76:	9204      	str	r2, [sp, #16]
 8018f78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018f7a:	3204      	adds	r2, #4
 8018f7c:	9205      	str	r2, [sp, #20]
 8018f7e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018f80:	3204      	adds	r2, #4
 8018f82:	9206      	str	r2, [sp, #24]
 8018f84:	011a      	lsls	r2, r3, #4
 8018f86:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8018f8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8018f8c:	9310      	str	r3, [sp, #64]	@ 0x40
 8018f8e:	f1ab 0304 	sub.w	r3, fp, #4
 8018f92:	9311      	str	r3, [sp, #68]	@ 0x44
 8018f94:	9b08      	ldr	r3, [sp, #32]
 8018f96:	f1b9 0f0f 	cmp.w	r9, #15
 8018f9a:	eb0a 0b09 	add.w	fp, sl, r9
 8018f9e:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 8018fa2:	f340 81ef 	ble.w	8019384 <st_sssa8_ch_fully_connected+0x4cc>
 8018fa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018fa8:	465c      	mov	r4, fp
 8018faa:	eb0a 0502 	add.w	r5, sl, r2
 8018fae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018fb0:	f8da 6000 	ldr.w	r6, [sl]
 8018fb4:	6820      	ldr	r0, [r4, #0]
 8018fb6:	ea4f 2736 	mov.w	r7, r6, ror #8
 8018fba:	f8d2 e000 	ldr.w	lr, [r2]
 8018fbe:	ea4f 2c30 	mov.w	ip, r0, ror #8
 8018fc2:	fa2f f787 	sxtb16	r7, r7
 8018fc6:	fa2f f686 	sxtb16	r6, r6
 8018fca:	fa2f fc8c 	sxtb16	ip, ip
 8018fce:	fa2f f080 	sxtb16	r0, r0
 8018fd2:	fb2e 1106 	smlad	r1, lr, r6, r1
 8018fd6:	fb2e 3300 	smlad	r3, lr, r0, r3
 8018fda:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8018fde:	fb2e 1707 	smlad	r7, lr, r7, r1
 8018fe2:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 8018fe6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8018fea:	6860      	ldr	r0, [r4, #4]
 8018fec:	ea4f 2631 	mov.w	r6, r1, ror #8
 8018ff0:	6893      	ldr	r3, [r2, #8]
 8018ff2:	ea4f 2c30 	mov.w	ip, r0, ror #8
 8018ff6:	fa2f f686 	sxtb16	r6, r6
 8018ffa:	fa2f f181 	sxtb16	r1, r1
 8018ffe:	fa2f fc8c 	sxtb16	ip, ip
 8019002:	fa2f f080 	sxtb16	r0, r0
 8019006:	fb23 7101 	smlad	r1, r3, r1, r7
 801900a:	fb23 e300 	smlad	r3, r3, r0, lr
 801900e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8019012:	fb2e 1606 	smlad	r6, lr, r6, r1
 8019016:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 801901a:	f8da 0008 	ldr.w	r0, [sl, #8]
 801901e:	68a1      	ldr	r1, [r4, #8]
 8019020:	ea4f 2c30 	mov.w	ip, r0, ror #8
 8019024:	6913      	ldr	r3, [r2, #16]
 8019026:	ea4f 2731 	mov.w	r7, r1, ror #8
 801902a:	fa2f fc8c 	sxtb16	ip, ip
 801902e:	fa2f f080 	sxtb16	r0, r0
 8019032:	fa2f f787 	sxtb16	r7, r7
 8019036:	fa2f f181 	sxtb16	r1, r1
 801903a:	fb23 6000 	smlad	r0, r3, r0, r6
 801903e:	fb23 e301 	smlad	r3, r3, r1, lr
 8019042:	6951      	ldr	r1, [r2, #20]
 8019044:	fb21 000c 	smlad	r0, r1, ip, r0
 8019048:	fb21 3c07 	smlad	ip, r1, r7, r3
 801904c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8019050:	3410      	adds	r4, #16
 8019052:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8019056:	f10a 0a10 	add.w	sl, sl, #16
 801905a:	ea4f 2731 	mov.w	r7, r1, ror #8
 801905e:	6993      	ldr	r3, [r2, #24]
 8019060:	ea4f 263e 	mov.w	r6, lr, ror #8
 8019064:	fa2f f787 	sxtb16	r7, r7
 8019068:	fa2f f181 	sxtb16	r1, r1
 801906c:	fa2f fe8e 	sxtb16	lr, lr
 8019070:	fa2f f686 	sxtb16	r6, r6
 8019074:	fb23 0101 	smlad	r1, r3, r1, r0
 8019078:	fb23 c00e 	smlad	r0, r3, lr, ip
 801907c:	69d3      	ldr	r3, [r2, #28]
 801907e:	3220      	adds	r2, #32
 8019080:	fb23 1107 	smlad	r1, r3, r7, r1
 8019084:	fb23 0306 	smlad	r3, r3, r6, r0
 8019088:	4555      	cmp	r5, sl
 801908a:	d191      	bne.n	8018fb0 <st_sssa8_ch_fully_connected+0xf8>
 801908c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801908e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019090:	4493      	add	fp, r2
 8019092:	4690      	mov	r8, r2
 8019094:	9003      	str	r0, [sp, #12]
 8019096:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019098:	4542      	cmp	r2, r8
 801909a:	f340 8171 	ble.w	8019380 <st_sssa8_ch_fully_connected+0x4c8>
 801909e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80190a0:	46dc      	mov	ip, fp
 80190a2:	9d03      	ldr	r5, [sp, #12]
 80190a4:	eba2 0208 	sub.w	r2, r2, r8
 80190a8:	0892      	lsrs	r2, r2, #2
 80190aa:	920c      	str	r2, [sp, #48]	@ 0x30
 80190ac:	3201      	adds	r2, #1
 80190ae:	0090      	lsls	r0, r2, #2
 80190b0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80190b2:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 80190b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80190b8:	f85a 7b04 	ldr.w	r7, [sl], #4
 80190bc:	f85c 0b04 	ldr.w	r0, [ip], #4
 80190c0:	ea4f 2637 	mov.w	r6, r7, ror #8
 80190c4:	682a      	ldr	r2, [r5, #0]
 80190c6:	ea4f 2430 	mov.w	r4, r0, ror #8
 80190ca:	fa2f f686 	sxtb16	r6, r6
 80190ce:	fa2f f787 	sxtb16	r7, r7
 80190d2:	fa2f f484 	sxtb16	r4, r4
 80190d6:	fa2f f080 	sxtb16	r0, r0
 80190da:	fb22 1107 	smlad	r1, r2, r7, r1
 80190de:	fb22 3200 	smlad	r2, r2, r0, r3
 80190e2:	686b      	ldr	r3, [r5, #4]
 80190e4:	3508      	adds	r5, #8
 80190e6:	fb23 1106 	smlad	r1, r3, r6, r1
 80190ea:	fb23 2304 	smlad	r3, r3, r4, r2
 80190ee:	45d6      	cmp	lr, sl
 80190f0:	d1e2      	bne.n	80190b8 <st_sssa8_ch_fully_connected+0x200>
 80190f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80190f4:	f108 0804 	add.w	r8, r8, #4
 80190f8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80190fa:	4493      	add	fp, r2
 80190fc:	9a03      	ldr	r2, [sp, #12]
 80190fe:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8019102:	9203      	str	r2, [sp, #12]
 8019104:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019106:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 801910a:	45c1      	cmp	r9, r8
 801910c:	dd37      	ble.n	801917e <st_sssa8_ch_fully_connected+0x2c6>
 801910e:	9c03      	ldr	r4, [sp, #12]
 8019110:	f99e 0000 	ldrsb.w	r0, [lr]
 8019114:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019118:	fb12 1100 	smlabb	r1, r2, r0, r1
 801911c:	f99b 0000 	ldrsb.w	r0, [fp]
 8019120:	fb12 3300 	smlabb	r3, r2, r0, r3
 8019124:	f108 0201 	add.w	r2, r8, #1
 8019128:	454a      	cmp	r2, r9
 801912a:	da25      	bge.n	8019178 <st_sssa8_ch_fully_connected+0x2c0>
 801912c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019130:	f99e 0001 	ldrsb.w	r0, [lr, #1]
 8019134:	fb12 1100 	smlabb	r1, r2, r0, r1
 8019138:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 801913c:	fb12 3300 	smlabb	r3, r2, r0, r3
 8019140:	f108 0202 	add.w	r2, r8, #2
 8019144:	4591      	cmp	r9, r2
 8019146:	dd17      	ble.n	8019178 <st_sssa8_ch_fully_connected+0x2c0>
 8019148:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801914c:	f99e 0002 	ldrsb.w	r0, [lr, #2]
 8019150:	fb12 1100 	smlabb	r1, r2, r0, r1
 8019154:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 8019158:	fb12 3300 	smlabb	r3, r2, r0, r3
 801915c:	f108 0203 	add.w	r2, r8, #3
 8019160:	4591      	cmp	r9, r2
 8019162:	dd09      	ble.n	8019178 <st_sssa8_ch_fully_connected+0x2c0>
 8019164:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019168:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 801916c:	fb12 3300 	smlabb	r3, r2, r0, r3
 8019170:	f99e 0003 	ldrsb.w	r0, [lr, #3]
 8019174:	fb12 1100 	smlabb	r1, r2, r0, r1
 8019178:	eba9 0808 	sub.w	r8, r9, r8
 801917c:	44c6      	add	lr, r8
 801917e:	9d07      	ldr	r5, [sp, #28]
 8019180:	f935 0c04 	ldrsh.w	r0, [r5, #-4]
 8019184:	2815      	cmp	r0, #21
 8019186:	f340 80c2 	ble.w	801930e <st_sssa8_ch_fully_connected+0x456>
 801918a:	1e84      	subs	r4, r0, #2
 801918c:	2201      	movs	r2, #1
 801918e:	3801      	subs	r0, #1
 8019190:	fa02 f404 	lsl.w	r4, r2, r4
 8019194:	9a05      	ldr	r2, [sp, #20]
 8019196:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801919a:	fb51 4202 	smmla	r2, r1, r2, r4
 801919e:	9906      	ldr	r1, [sp, #24]
 80191a0:	4102      	asrs	r2, r0
 80191a2:	1eac      	subs	r4, r5, #2
 80191a4:	f851 1c04 	ldr.w	r1, [r1, #-4]
 80191a8:	440a      	add	r2, r1
 80191aa:	f302 0207 	ssat	r2, #8, r2
 80191ae:	9904      	ldr	r1, [sp, #16]
 80191b0:	b252      	sxtb	r2, r2
 80191b2:	1e48      	subs	r0, r1, #1
 80191b4:	f801 2c02 	strb.w	r2, [r1, #-2]
 80191b8:	f9b4 4000 	ldrsh.w	r4, [r4]
 80191bc:	2c15      	cmp	r4, #21
 80191be:	f340 8098 	ble.w	80192f2 <st_sssa8_ch_fully_connected+0x43a>
 80191c2:	1ea1      	subs	r1, r4, #2
 80191c4:	2201      	movs	r2, #1
 80191c6:	3c01      	subs	r4, #1
 80191c8:	fa02 f101 	lsl.w	r1, r2, r1
 80191cc:	9a05      	ldr	r2, [sp, #20]
 80191ce:	6812      	ldr	r2, [r2, #0]
 80191d0:	fb53 1302 	smmla	r3, r3, r2, r1
 80191d4:	9a06      	ldr	r2, [sp, #24]
 80191d6:	4123      	asrs	r3, r4
 80191d8:	6812      	ldr	r2, [r2, #0]
 80191da:	4413      	add	r3, r2
 80191dc:	f303 0307 	ssat	r3, #8, r3
 80191e0:	b25b      	sxtb	r3, r3
 80191e2:	9a07      	ldr	r2, [sp, #28]
 80191e4:	eb0e 0a09 	add.w	sl, lr, r9
 80191e8:	7003      	strb	r3, [r0, #0]
 80191ea:	3204      	adds	r2, #4
 80191ec:	9b08      	ldr	r3, [sp, #32]
 80191ee:	9207      	str	r2, [sp, #28]
 80191f0:	3308      	adds	r3, #8
 80191f2:	9a04      	ldr	r2, [sp, #16]
 80191f4:	9308      	str	r3, [sp, #32]
 80191f6:	3202      	adds	r2, #2
 80191f8:	9204      	str	r2, [sp, #16]
 80191fa:	9a05      	ldr	r2, [sp, #20]
 80191fc:	3208      	adds	r2, #8
 80191fe:	9205      	str	r2, [sp, #20]
 8019200:	9a06      	ldr	r2, [sp, #24]
 8019202:	3208      	adds	r2, #8
 8019204:	9206      	str	r2, [sp, #24]
 8019206:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019208:	429a      	cmp	r2, r3
 801920a:	f47f aec3 	bne.w	8018f94 <st_sssa8_ch_fully_connected+0xdc>
 801920e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019210:	46cb      	mov	fp, r9
 8019212:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019214:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019218:	9220      	str	r2, [sp, #128]	@ 0x80
 801921a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801921c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019220:	9213      	str	r2, [sp, #76]	@ 0x4c
 8019222:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8019224:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019228:	9224      	str	r2, [sp, #144]	@ 0x90
 801922a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801922c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8019230:	9225      	str	r2, [sp, #148]	@ 0x94
 8019232:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019234:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019238:	9312      	str	r3, [sp, #72]	@ 0x48
 801923a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801923c:	07db      	lsls	r3, r3, #31
 801923e:	d54c      	bpl.n	80192da <st_sssa8_ch_fully_connected+0x422>
 8019240:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8019242:	ea5f 079b 	movs.w	r7, fp, lsr #2
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	f000 80c7 	beq.w	80193da <st_sssa8_ch_fully_connected+0x522>
 801924c:	eb0a 0687 	add.w	r6, sl, r7, lsl #2
 8019250:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019252:	f85a 2b04 	ldr.w	r2, [sl], #4
 8019256:	3008      	adds	r0, #8
 8019258:	f850 5c08 	ldr.w	r5, [r0, #-8]
 801925c:	ea4f 2132 	mov.w	r1, r2, ror #8
 8019260:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8019264:	fa2f f282 	sxtb16	r2, r2
 8019268:	fa2f f181 	sxtb16	r1, r1
 801926c:	fb25 3302 	smlad	r3, r5, r2, r3
 8019270:	fb24 3301 	smlad	r3, r4, r1, r3
 8019274:	45b2      	cmp	sl, r6
 8019276:	d1ec      	bne.n	8019252 <st_sssa8_ch_fully_connected+0x39a>
 8019278:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801927a:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 801927e:	920d      	str	r2, [sp, #52]	@ 0x34
 8019280:	f01b 0203 	ands.w	r2, fp, #3
 8019284:	d014      	beq.n	80192b0 <st_sssa8_ch_fully_connected+0x3f8>
 8019286:	3a01      	subs	r2, #1
 8019288:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801928a:	f996 1000 	ldrsb.w	r1, [r6]
 801928e:	8820      	ldrh	r0, [r4, #0]
 8019290:	b292      	uxth	r2, r2
 8019292:	fb10 3301 	smlabb	r3, r0, r1, r3
 8019296:	b15a      	cbz	r2, 80192b0 <st_sssa8_ch_fully_connected+0x3f8>
 8019298:	f996 1001 	ldrsb.w	r1, [r6, #1]
 801929c:	2a01      	cmp	r2, #1
 801929e:	8860      	ldrh	r0, [r4, #2]
 80192a0:	fb10 3301 	smlabb	r3, r0, r1, r3
 80192a4:	d004      	beq.n	80192b0 <st_sssa8_ch_fully_connected+0x3f8>
 80192a6:	f996 2002 	ldrsb.w	r2, [r6, #2]
 80192aa:	88a1      	ldrh	r1, [r4, #4]
 80192ac:	fb11 3302 	smlabb	r3, r1, r2, r3
 80192b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80192b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80192b6:	2a15      	cmp	r2, #21
 80192b8:	dd69      	ble.n	801938e <st_sssa8_ch_fully_connected+0x4d6>
 80192ba:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80192bc:	1e95      	subs	r5, r2, #2
 80192be:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80192c0:	3a01      	subs	r2, #1
 80192c2:	6804      	ldr	r4, [r0, #0]
 80192c4:	2001      	movs	r0, #1
 80192c6:	6809      	ldr	r1, [r1, #0]
 80192c8:	40a8      	lsls	r0, r5
 80192ca:	fb53 0301 	smmla	r3, r3, r1, r0
 80192ce:	4113      	asrs	r3, r2
 80192d0:	4423      	add	r3, r4
 80192d2:	f303 0307 	ssat	r3, #8, r3
 80192d6:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80192d8:	7013      	strb	r3, [r2, #0]
 80192da:	2000      	movs	r0, #0
 80192dc:	b017      	add	sp, #92	@ 0x5c
 80192de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192e2:	42bc      	cmp	r4, r7
 80192e4:	f845 3c04 	str.w	r3, [r5, #-4]
 80192e8:	f105 0504 	add.w	r5, r5, #4
 80192ec:	f47f ae04 	bne.w	8018ef8 <st_sssa8_ch_fully_connected+0x40>
 80192f0:	e615      	b.n	8018f1e <st_sssa8_ch_fully_connected+0x66>
 80192f2:	2c00      	cmp	r4, #0
 80192f4:	dd1f      	ble.n	8019336 <st_sssa8_ch_fully_connected+0x47e>
 80192f6:	9a05      	ldr	r2, [sp, #20]
 80192f8:	005b      	lsls	r3, r3, #1
 80192fa:	9906      	ldr	r1, [sp, #24]
 80192fc:	6812      	ldr	r2, [r2, #0]
 80192fe:	6809      	ldr	r1, [r1, #0]
 8019300:	fb53 1302 	smmla	r3, r3, r2, r1
 8019304:	4123      	asrs	r3, r4
 8019306:	f303 0307 	ssat	r3, #8, r3
 801930a:	b25b      	sxtb	r3, r3
 801930c:	e769      	b.n	80191e2 <st_sssa8_ch_fully_connected+0x32a>
 801930e:	2800      	cmp	r0, #0
 8019310:	dd21      	ble.n	8019356 <st_sssa8_ch_fully_connected+0x49e>
 8019312:	462c      	mov	r4, r5
 8019314:	9a05      	ldr	r2, [sp, #20]
 8019316:	004d      	lsls	r5, r1, #1
 8019318:	9906      	ldr	r1, [sp, #24]
 801931a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 801931e:	3c02      	subs	r4, #2
 8019320:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8019324:	fb55 1502 	smmla	r5, r5, r2, r1
 8019328:	4105      	asrs	r5, r0
 801932a:	f305 0207 	ssat	r2, #8, r5
 801932e:	9904      	ldr	r1, [sp, #16]
 8019330:	b252      	sxtb	r2, r2
 8019332:	1e48      	subs	r0, r1, #1
 8019334:	e73e      	b.n	80191b4 <st_sssa8_ch_fully_connected+0x2fc>
 8019336:	f1c4 0401 	rsb	r4, r4, #1
 801933a:	40a3      	lsls	r3, r4
 801933c:	f303 031f 	ssat	r3, #32, r3
 8019340:	9a05      	ldr	r2, [sp, #20]
 8019342:	6812      	ldr	r2, [r2, #0]
 8019344:	fb53 f212 	smmulr	r2, r3, r2
 8019348:	9b06      	ldr	r3, [sp, #24]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	4413      	add	r3, r2
 801934e:	f303 0307 	ssat	r3, #8, r3
 8019352:	b25b      	sxtb	r3, r3
 8019354:	e745      	b.n	80191e2 <st_sssa8_ch_fully_connected+0x32a>
 8019356:	f1c0 0001 	rsb	r0, r0, #1
 801935a:	1eac      	subs	r4, r5, #2
 801935c:	4081      	lsls	r1, r0
 801935e:	f301 011f 	ssat	r1, #32, r1
 8019362:	9a05      	ldr	r2, [sp, #20]
 8019364:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8019368:	fb51 f212 	smmulr	r2, r1, r2
 801936c:	9906      	ldr	r1, [sp, #24]
 801936e:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8019372:	440a      	add	r2, r1
 8019374:	f302 0207 	ssat	r2, #8, r2
 8019378:	9904      	ldr	r1, [sp, #16]
 801937a:	b252      	sxtb	r2, r2
 801937c:	1e48      	subs	r0, r1, #1
 801937e:	e719      	b.n	80191b4 <st_sssa8_ch_fully_connected+0x2fc>
 8019380:	46d6      	mov	lr, sl
 8019382:	e6c2      	b.n	801910a <st_sssa8_ch_fully_connected+0x252>
 8019384:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019386:	f04f 0800 	mov.w	r8, #0
 801938a:	9203      	str	r2, [sp, #12]
 801938c:	e683      	b.n	8019096 <st_sssa8_ch_fully_connected+0x1de>
 801938e:	2a00      	cmp	r2, #0
 8019390:	dd0f      	ble.n	80193b2 <st_sssa8_ch_fully_connected+0x4fa>
 8019392:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8019394:	005b      	lsls	r3, r3, #1
 8019396:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8019398:	6809      	ldr	r1, [r1, #0]
 801939a:	6800      	ldr	r0, [r0, #0]
 801939c:	fb53 0301 	smmla	r3, r3, r1, r0
 80193a0:	4113      	asrs	r3, r2
 80193a2:	f303 0307 	ssat	r3, #8, r3
 80193a6:	2000      	movs	r0, #0
 80193a8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80193aa:	7013      	strb	r3, [r2, #0]
 80193ac:	b017      	add	sp, #92	@ 0x5c
 80193ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193b2:	f1c2 0201 	rsb	r2, r2, #1
 80193b6:	4093      	lsls	r3, r2
 80193b8:	f303 031f 	ssat	r3, #32, r3
 80193bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80193be:	6812      	ldr	r2, [r2, #0]
 80193c0:	fb53 f312 	smmulr	r3, r3, r2
 80193c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80193c6:	6812      	ldr	r2, [r2, #0]
 80193c8:	4413      	add	r3, r2
 80193ca:	f303 0307 	ssat	r3, #8, r3
 80193ce:	2000      	movs	r0, #0
 80193d0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80193d2:	7013      	strb	r3, [r2, #0]
 80193d4:	b017      	add	sp, #92	@ 0x5c
 80193d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193da:	4656      	mov	r6, sl
 80193dc:	e750      	b.n	8019280 <st_sssa8_ch_fully_connected+0x3c8>
 80193de:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 80193e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80193e4:	e59b      	b.n	8018f1e <st_sssa8_ch_fully_connected+0x66>
 80193e6:	bf00      	nop

080193e8 <st_int8_copy>:
 80193e8:	4288      	cmp	r0, r1
 80193ea:	d023      	beq.n	8019434 <st_int8_copy+0x4c>
 80193ec:	b312      	cbz	r2, 8019434 <st_int8_copy+0x4c>
 80193ee:	4288      	cmp	r0, r1
 80193f0:	eb00 0302 	add.w	r3, r0, r2
 80193f4:	d20b      	bcs.n	801940e <st_int8_copy+0x26>
 80193f6:	4299      	cmp	r1, r3
 80193f8:	d209      	bcs.n	801940e <st_int8_copy+0x26>
 80193fa:	4298      	cmp	r0, r3
 80193fc:	440a      	add	r2, r1
 80193fe:	d219      	bcs.n	8019434 <st_int8_copy+0x4c>
 8019400:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8019404:	4298      	cmp	r0, r3
 8019406:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801940a:	d1f9      	bne.n	8019400 <st_int8_copy+0x18>
 801940c:	4770      	bx	lr
 801940e:	2a03      	cmp	r2, #3
 8019410:	d811      	bhi.n	8019436 <st_int8_copy+0x4e>
 8019412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019416:	f801 3b01 	strb.w	r3, [r1], #1
 801941a:	2a01      	cmp	r2, #1
 801941c:	d00a      	beq.n	8019434 <st_int8_copy+0x4c>
 801941e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019422:	f801 3b01 	strb.w	r3, [r1], #1
 8019426:	2a02      	cmp	r2, #2
 8019428:	d004      	beq.n	8019434 <st_int8_copy+0x4c>
 801942a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801942e:	f801 3b01 	strb.w	r3, [r1], #1
 8019432:	4770      	bx	lr
 8019434:	4770      	bx	lr
 8019436:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801943a:	f001 0403 	and.w	r4, r1, #3
 801943e:	f000 0e03 	and.w	lr, r0, #3
 8019442:	f1c4 0304 	rsb	r3, r4, #4
 8019446:	eba2 0c03 	sub.w	ip, r2, r3
 801944a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801944e:	f801 3b01 	strb.w	r3, [r1], #1
 8019452:	2c03      	cmp	r4, #3
 8019454:	f1c4 0202 	rsb	r2, r4, #2
 8019458:	d00e      	beq.n	8019478 <st_int8_copy+0x90>
 801945a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801945e:	f801 3b01 	strb.w	r3, [r1], #1
 8019462:	2a00      	cmp	r2, #0
 8019464:	dd08      	ble.n	8019478 <st_int8_copy+0x90>
 8019466:	f810 3b01 	ldrb.w	r3, [r0], #1
 801946a:	f801 3b01 	strb.w	r3, [r1], #1
 801946e:	b91c      	cbnz	r4, 8019478 <st_int8_copy+0x90>
 8019470:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019474:	f801 3b01 	strb.w	r3, [r1], #1
 8019478:	4574      	cmp	r4, lr
 801947a:	d02b      	beq.n	80194d4 <st_int8_copy+0xec>
 801947c:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8019480:	1e5a      	subs	r2, r3, #1
 8019482:	b153      	cbz	r3, 801949a <st_int8_copy+0xb2>
 8019484:	f850 3b04 	ldr.w	r3, [r0], #4
 8019488:	f850 4b04 	ldr.w	r4, [r0], #4
 801948c:	f850 5b04 	ldr.w	r5, [r0], #4
 8019490:	f850 6b04 	ldr.w	r6, [r0], #4
 8019494:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8019496:	3a01      	subs	r2, #1
 8019498:	d2f4      	bcs.n	8019484 <st_int8_copy+0x9c>
 801949a:	f01c 0f08 	tst.w	ip, #8
 801949e:	d004      	beq.n	80194aa <st_int8_copy+0xc2>
 80194a0:	f850 3b04 	ldr.w	r3, [r0], #4
 80194a4:	f850 4b04 	ldr.w	r4, [r0], #4
 80194a8:	c118      	stmia	r1!, {r3, r4}
 80194aa:	f01c 0f04 	tst.w	ip, #4
 80194ae:	d003      	beq.n	80194b8 <st_int8_copy+0xd0>
 80194b0:	f850 3b04 	ldr.w	r3, [r0], #4
 80194b4:	f841 3b04 	str.w	r3, [r1], #4
 80194b8:	f01c 0f02 	tst.w	ip, #2
 80194bc:	d003      	beq.n	80194c6 <st_int8_copy+0xde>
 80194be:	f830 3b02 	ldrh.w	r3, [r0], #2
 80194c2:	f821 3b02 	strh.w	r3, [r1], #2
 80194c6:	f01c 0f01 	tst.w	ip, #1
 80194ca:	d001      	beq.n	80194d0 <st_int8_copy+0xe8>
 80194cc:	7803      	ldrb	r3, [r0, #0]
 80194ce:	700b      	strb	r3, [r1, #0]
 80194d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194d4:	ea4f 139c 	mov.w	r3, ip, lsr #6
 80194d8:	f103 39ff 	add.w	r9, r3, #4294967295
 80194dc:	b183      	cbz	r3, 8019500 <st_int8_copy+0x118>
 80194de:	4688      	mov	r8, r1
 80194e0:	4686      	mov	lr, r0
 80194e2:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80194e6:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80194ea:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80194ee:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80194f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80194f6:	4641      	mov	r1, r8
 80194f8:	4670      	mov	r0, lr
 80194fa:	f1b9 3fff 	cmp.w	r9, #4294967295
 80194fe:	d1ee      	bne.n	80194de <st_int8_copy+0xf6>
 8019500:	f01c 0f20 	tst.w	ip, #32
 8019504:	d007      	beq.n	8019516 <st_int8_copy+0x12e>
 8019506:	4688      	mov	r8, r1
 8019508:	4686      	mov	lr, r0
 801950a:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801950e:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8019512:	4641      	mov	r1, r8
 8019514:	4670      	mov	r0, lr
 8019516:	f01c 0f10 	tst.w	ip, #16
 801951a:	d001      	beq.n	8019520 <st_int8_copy+0x138>
 801951c:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 801951e:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8019520:	f01c 0f08 	tst.w	ip, #8
 8019524:	d0c1      	beq.n	80194aa <st_int8_copy+0xc2>
 8019526:	c818      	ldmia	r0!, {r3, r4}
 8019528:	c118      	stmia	r1!, {r3, r4}
 801952a:	e7be      	b.n	80194aa <st_int8_copy+0xc2>

0801952c <st_int8_reordered_no_shift_zero>:
 801952c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801952e:	0897      	lsrs	r7, r2, #2
 8019530:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8019534:	d02d      	beq.n	8019592 <st_int8_reordered_no_shift_zero+0x66>
 8019536:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 801953a:	468e      	mov	lr, r1
 801953c:	f850 cb04 	ldr.w	ip, [r0], #4
 8019540:	fa2f f49c 	sxtb16	r4, ip, ror #8
 8019544:	fad4 f403 	ssub16	r4, r4, r3
 8019548:	fa2f fc8c 	sxtb16	ip, ip
 801954c:	fadc fc03 	ssub16	ip, ip, r3
 8019550:	42a8      	cmp	r0, r5
 8019552:	f8ce c000 	str.w	ip, [lr]
 8019556:	f8ce 4004 	str.w	r4, [lr, #4]
 801955a:	f10e 0e08 	add.w	lr, lr, #8
 801955e:	d1ed      	bne.n	801953c <st_int8_reordered_no_shift_zero+0x10>
 8019560:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8019564:	f012 0203 	ands.w	r2, r2, #3
 8019568:	d012      	beq.n	8019590 <st_int8_reordered_no_shift_zero+0x64>
 801956a:	f995 0000 	ldrsb.w	r0, [r5]
 801956e:	b273      	sxtb	r3, r6
 8019570:	3a01      	subs	r2, #1
 8019572:	eba0 0003 	sub.w	r0, r0, r3
 8019576:	8008      	strh	r0, [r1, #0]
 8019578:	d00a      	beq.n	8019590 <st_int8_reordered_no_shift_zero+0x64>
 801957a:	f995 0001 	ldrsb.w	r0, [r5, #1]
 801957e:	2a01      	cmp	r2, #1
 8019580:	eba0 0003 	sub.w	r0, r0, r3
 8019584:	8048      	strh	r0, [r1, #2]
 8019586:	d003      	beq.n	8019590 <st_int8_reordered_no_shift_zero+0x64>
 8019588:	f995 2002 	ldrsb.w	r2, [r5, #2]
 801958c:	1ad3      	subs	r3, r2, r3
 801958e:	808b      	strh	r3, [r1, #4]
 8019590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019592:	4605      	mov	r5, r0
 8019594:	e7e6      	b.n	8019564 <st_int8_reordered_no_shift_zero+0x38>
 8019596:	bf00      	nop

08019598 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8019598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801959c:	b093      	sub	sp, #76	@ 0x4c
 801959e:	f8bd 4074 	ldrh.w	r4, [sp, #116]	@ 0x74
 80195a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80195a4:	f8bd 2078 	ldrh.w	r2, [sp, #120]	@ 0x78
 80195a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80195aa:	920d      	str	r2, [sp, #52]	@ 0x34
 80195ac:	0862      	lsrs	r2, r4, #1
 80195ae:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 80195b2:	940c      	str	r4, [sp, #48]	@ 0x30
 80195b4:	9104      	str	r1, [sp, #16]
 80195b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80195b8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	f000 8184 	beq.w	80198c8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x330>
 80195c0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80195c2:	b299      	uxth	r1, r3
 80195c4:	4613      	mov	r3, r2
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	f000 80d7 	beq.w	801977a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e2>
 80195cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80195ce:	3b01      	subs	r3, #1
 80195d0:	0897      	lsrs	r7, r2, #2
 80195d2:	f002 0203 	and.w	r2, r2, #3
 80195d6:	b29b      	uxth	r3, r3
 80195d8:	9201      	str	r2, [sp, #4]
 80195da:	1c4a      	adds	r2, r1, #1
 80195dc:	0049      	lsls	r1, r1, #1
 80195de:	9703      	str	r7, [sp, #12]
 80195e0:	9105      	str	r1, [sp, #20]
 80195e2:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80195e4:	4411      	add	r1, r2
 80195e6:	9102      	str	r1, [sp, #8]
 80195e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80195ea:	f101 0210 	add.w	r2, r1, #16
 80195ee:	f101 0c08 	add.w	ip, r1, #8
 80195f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80195f6:	9a01      	ldr	r2, [sp, #4]
 80195f8:	9306      	str	r3, [sp, #24]
 80195fa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80195fc:	f103 0e04 	add.w	lr, r3, #4
 8019600:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8019602:	f103 0508 	add.w	r5, r3, #8
 8019606:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019608:	f103 0408 	add.w	r4, r3, #8
 801960c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801960e:	1c5e      	adds	r6, r3, #1
 8019610:	013b      	lsls	r3, r7, #4
 8019612:	9307      	str	r3, [sp, #28]
 8019614:	9b04      	ldr	r3, [sp, #16]
 8019616:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801961a:	9308      	str	r3, [sp, #32]
 801961c:	0093      	lsls	r3, r2, #2
 801961e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019620:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 8019624:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8019628:	9311      	str	r3, [sp, #68]	@ 0x44
 801962a:	9903      	ldr	r1, [sp, #12]
 801962c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801962e:	9211      	str	r2, [sp, #68]	@ 0x44
 8019630:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019632:	2900      	cmp	r1, #0
 8019634:	f000 8146 	beq.w	80198c4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32c>
 8019638:	4688      	mov	r8, r1
 801963a:	9f04      	ldr	r7, [sp, #16]
 801963c:	4601      	mov	r1, r0
 801963e:	f8d7 9000 	ldr.w	r9, [r7]
 8019642:	f8d1 a000 	ldr.w	sl, [r1]
 8019646:	fb2a 3a09 	smlad	sl, sl, r9, r3
 801964a:	684b      	ldr	r3, [r1, #4]
 801964c:	fb23 2909 	smlad	r9, r3, r9, r2
 8019650:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8019654:	3110      	adds	r1, #16
 8019656:	f851 3c08 	ldr.w	r3, [r1, #-8]
 801965a:	3708      	adds	r7, #8
 801965c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8019660:	fb23 a30b 	smlad	r3, r3, fp, sl
 8019664:	fb22 920b 	smlad	r2, r2, fp, r9
 8019668:	f1b8 0801 	subs.w	r8, r8, #1
 801966c:	d1e7      	bne.n	801963e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 801966e:	9907      	ldr	r1, [sp, #28]
 8019670:	4408      	add	r0, r1
 8019672:	9908      	ldr	r1, [sp, #32]
 8019674:	9f01      	ldr	r7, [sp, #4]
 8019676:	b31f      	cbz	r7, 80196c0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x128>
 8019678:	f9b1 7000 	ldrsh.w	r7, [r1]
 801967c:	f8b0 8000 	ldrh.w	r8, [r0]
 8019680:	fb17 3308 	smlabb	r3, r7, r8, r3
 8019684:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8019688:	fb18 2207 	smlabb	r2, r8, r7, r2
 801968c:	9f01      	ldr	r7, [sp, #4]
 801968e:	2f01      	cmp	r7, #1
 8019690:	d014      	beq.n	80196bc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 8019692:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 8019696:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 801969a:	fb17 3308 	smlabb	r3, r7, r8, r3
 801969e:	f8b0 8006 	ldrh.w	r8, [r0, #6]
 80196a2:	fb18 2207 	smlabb	r2, r8, r7, r2
 80196a6:	9f01      	ldr	r7, [sp, #4]
 80196a8:	2f02      	cmp	r7, #2
 80196aa:	d007      	beq.n	80196bc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 80196ac:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80196b0:	8907      	ldrh	r7, [r0, #8]
 80196b2:	fb17 3301 	smlabb	r3, r7, r1, r3
 80196b6:	8947      	ldrh	r7, [r0, #10]
 80196b8:	fb11 2207 	smlabb	r2, r1, r7, r2
 80196bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80196be:	4408      	add	r0, r1
 80196c0:	f93e 9c04 	ldrsh.w	r9, [lr, #-4]
 80196c4:	f1b9 0f15 	cmp.w	r9, #21
 80196c8:	f340 80af 	ble.w	801982a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x292>
 80196cc:	f109 38ff 	add.w	r8, r9, #4294967295
 80196d0:	f1a9 0702 	sub.w	r7, r9, #2
 80196d4:	2101      	movs	r1, #1
 80196d6:	fa01 f707 	lsl.w	r7, r1, r7
 80196da:	f855 1c08 	ldr.w	r1, [r5, #-8]
 80196de:	fb53 7101 	smmla	r1, r3, r1, r7
 80196e2:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80196e6:	fa41 f108 	asr.w	r1, r1, r8
 80196ea:	1f27      	subs	r7, r4, #4
 80196ec:	f1a5 0804 	sub.w	r8, r5, #4
 80196f0:	440b      	add	r3, r1
 80196f2:	f1ae 0102 	sub.w	r1, lr, #2
 80196f6:	f303 0307 	ssat	r3, #8, r3
 80196fa:	b25b      	sxtb	r3, r3
 80196fc:	f806 3c01 	strb.w	r3, [r6, #-1]
 8019700:	f9b1 1000 	ldrsh.w	r1, [r1]
 8019704:	2915      	cmp	r1, #21
 8019706:	f340 80ab 	ble.w	8019860 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c8>
 801970a:	f8d8 3000 	ldr.w	r3, [r8]
 801970e:	f04f 0901 	mov.w	r9, #1
 8019712:	f8d7 8000 	ldr.w	r8, [r7]
 8019716:	1e8f      	subs	r7, r1, #2
 8019718:	3901      	subs	r1, #1
 801971a:	fa09 f707 	lsl.w	r7, r9, r7
 801971e:	fb52 7303 	smmla	r3, r2, r3, r7
 8019722:	410b      	asrs	r3, r1
 8019724:	4443      	add	r3, r8
 8019726:	f303 0307 	ssat	r3, #8, r3
 801972a:	b25b      	sxtb	r3, r3
 801972c:	9a02      	ldr	r2, [sp, #8]
 801972e:	f10c 0c08 	add.w	ip, ip, #8
 8019732:	f10e 0e04 	add.w	lr, lr, #4
 8019736:	3508      	adds	r5, #8
 8019738:	f802 3c01 	strb.w	r3, [r2, #-1]
 801973c:	3408      	adds	r4, #8
 801973e:	9b05      	ldr	r3, [sp, #20]
 8019740:	441a      	add	r2, r3
 8019742:	441e      	add	r6, r3
 8019744:	9b06      	ldr	r3, [sp, #24]
 8019746:	9202      	str	r2, [sp, #8]
 8019748:	459c      	cmp	ip, r3
 801974a:	f47f af69 	bne.w	8019620 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x88>
 801974e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019750:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8019752:	9905      	ldr	r1, [sp, #20]
 8019754:	fb03 2201 	mla	r2, r3, r1, r2
 8019758:	9223      	str	r2, [sp, #140]	@ 0x8c
 801975a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801975c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019760:	920a      	str	r2, [sp, #40]	@ 0x28
 8019762:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8019764:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019768:	921f      	str	r2, [sp, #124]	@ 0x7c
 801976a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801976c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019770:	9220      	str	r2, [sp, #128]	@ 0x80
 8019772:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019774:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019778:	9321      	str	r3, [sp, #132]	@ 0x84
 801977a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801977c:	07db      	lsls	r3, r3, #31
 801977e:	d546      	bpl.n	801980e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 8019780:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019784:	0896      	lsrs	r6, r2, #2
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	f000 80cd 	beq.w	8019926 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38e>
 801978c:	00f7      	lsls	r7, r6, #3
 801978e:	9904      	ldr	r1, [sp, #16]
 8019790:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8019794:	6804      	ldr	r4, [r0, #0]
 8019796:	3008      	adds	r0, #8
 8019798:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801979c:	680d      	ldr	r5, [r1, #0]
 801979e:	fb24 3305 	smlad	r3, r4, r5, r3
 80197a2:	684c      	ldr	r4, [r1, #4]
 80197a4:	3108      	adds	r1, #8
 80197a6:	fb22 3304 	smlad	r3, r2, r4, r3
 80197aa:	42b0      	cmp	r0, r6
 80197ac:	d1f2      	bne.n	8019794 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1fc>
 80197ae:	9a04      	ldr	r2, [sp, #16]
 80197b0:	443a      	add	r2, r7
 80197b2:	9204      	str	r2, [sp, #16]
 80197b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80197b6:	f012 0203 	ands.w	r2, r2, #3
 80197ba:	d011      	beq.n	80197e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 80197bc:	3a01      	subs	r2, #1
 80197be:	9c04      	ldr	r4, [sp, #16]
 80197c0:	8831      	ldrh	r1, [r6, #0]
 80197c2:	8820      	ldrh	r0, [r4, #0]
 80197c4:	b292      	uxth	r2, r2
 80197c6:	fb10 3301 	smlabb	r3, r0, r1, r3
 80197ca:	b14a      	cbz	r2, 80197e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 80197cc:	8860      	ldrh	r0, [r4, #2]
 80197ce:	2a01      	cmp	r2, #1
 80197d0:	8871      	ldrh	r1, [r6, #2]
 80197d2:	fb10 3301 	smlabb	r3, r0, r1, r3
 80197d6:	d003      	beq.n	80197e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 80197d8:	88b1      	ldrh	r1, [r6, #4]
 80197da:	88a2      	ldrh	r2, [r4, #4]
 80197dc:	fb11 3302 	smlabb	r3, r1, r2, r3
 80197e0:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80197e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80197e6:	2a15      	cmp	r2, #21
 80197e8:	dd79      	ble.n	80198de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 80197ea:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80197ec:	1e95      	subs	r5, r2, #2
 80197ee:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80197f0:	3a01      	subs	r2, #1
 80197f2:	6804      	ldr	r4, [r0, #0]
 80197f4:	2001      	movs	r0, #1
 80197f6:	6809      	ldr	r1, [r1, #0]
 80197f8:	40a8      	lsls	r0, r5
 80197fa:	fb53 0301 	smmla	r3, r3, r1, r0
 80197fe:	4113      	asrs	r3, r2
 8019800:	4423      	add	r3, r4
 8019802:	f303 0307 	ssat	r3, #8, r3
 8019806:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8019808:	f802 3b01 	strb.w	r3, [r2], #1
 801980c:	9223      	str	r2, [sp, #140]	@ 0x8c
 801980e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019810:	2b00      	cmp	r3, #0
 8019812:	d05c      	beq.n	80198ce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 8019814:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019816:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019818:	fb02 f303 	mul.w	r3, r2, r3
 801981c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801981e:	f1c3 0301 	rsb	r3, r3, #1
 8019822:	18d0      	adds	r0, r2, r3
 8019824:	b013      	add	sp, #76	@ 0x4c
 8019826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801982a:	f1b9 0f00 	cmp.w	r9, #0
 801982e:	dd24      	ble.n	801987a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e2>
 8019830:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8019834:	005b      	lsls	r3, r3, #1
 8019836:	f854 7c08 	ldr.w	r7, [r4, #-8]
 801983a:	f1a5 0804 	sub.w	r8, r5, #4
 801983e:	fb53 7301 	smmla	r3, r3, r1, r7
 8019842:	1f27      	subs	r7, r4, #4
 8019844:	fa43 f309 	asr.w	r3, r3, r9
 8019848:	f1ae 0102 	sub.w	r1, lr, #2
 801984c:	f303 0307 	ssat	r3, #8, r3
 8019850:	b25b      	sxtb	r3, r3
 8019852:	f806 3c01 	strb.w	r3, [r6, #-1]
 8019856:	f9b1 1000 	ldrsh.w	r1, [r1]
 801985a:	2915      	cmp	r1, #21
 801985c:	f73f af55 	bgt.w	801970a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 8019860:	2900      	cmp	r1, #0
 8019862:	dd20      	ble.n	80198a6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x30e>
 8019864:	0053      	lsls	r3, r2, #1
 8019866:	683f      	ldr	r7, [r7, #0]
 8019868:	f8d8 2000 	ldr.w	r2, [r8]
 801986c:	fb53 7302 	smmla	r3, r3, r2, r7
 8019870:	410b      	asrs	r3, r1
 8019872:	f303 0307 	ssat	r3, #8, r3
 8019876:	b25b      	sxtb	r3, r3
 8019878:	e758      	b.n	801972c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 801987a:	f1c9 0701 	rsb	r7, r9, #1
 801987e:	f1ae 0102 	sub.w	r1, lr, #2
 8019882:	fa03 f707 	lsl.w	r7, r3, r7
 8019886:	f307 071f 	ssat	r7, #32, r7
 801988a:	f1a5 0804 	sub.w	r8, r5, #4
 801988e:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8019892:	fb57 f713 	smmulr	r7, r7, r3
 8019896:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801989a:	443b      	add	r3, r7
 801989c:	1f27      	subs	r7, r4, #4
 801989e:	f303 0307 	ssat	r3, #8, r3
 80198a2:	b25b      	sxtb	r3, r3
 80198a4:	e72a      	b.n	80196fc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x164>
 80198a6:	f1c1 0101 	rsb	r1, r1, #1
 80198aa:	408a      	lsls	r2, r1
 80198ac:	f302 021f 	ssat	r2, #32, r2
 80198b0:	f8d8 3000 	ldr.w	r3, [r8]
 80198b4:	fb52 f313 	smmulr	r3, r2, r3
 80198b8:	683a      	ldr	r2, [r7, #0]
 80198ba:	4413      	add	r3, r2
 80198bc:	f303 0307 	ssat	r3, #8, r3
 80198c0:	b25b      	sxtb	r3, r3
 80198c2:	e733      	b.n	801972c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 80198c4:	9904      	ldr	r1, [sp, #16]
 80198c6:	e6d5      	b.n	8019674 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xdc>
 80198c8:	2101      	movs	r1, #1
 80198ca:	4613      	mov	r3, r2
 80198cc:	e67b      	b.n	80195c6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e>
 80198ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80198d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80198d2:	1a9b      	subs	r3, r3, r2
 80198d4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80198d6:	18d0      	adds	r0, r2, r3
 80198d8:	b013      	add	sp, #76	@ 0x4c
 80198da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198de:	2a00      	cmp	r2, #0
 80198e0:	dd0e      	ble.n	8019900 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x368>
 80198e2:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80198e4:	005b      	lsls	r3, r3, #1
 80198e6:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80198e8:	6809      	ldr	r1, [r1, #0]
 80198ea:	6800      	ldr	r0, [r0, #0]
 80198ec:	fb53 0301 	smmla	r3, r3, r1, r0
 80198f0:	4113      	asrs	r3, r2
 80198f2:	f303 0307 	ssat	r3, #8, r3
 80198f6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80198f8:	f802 3b01 	strb.w	r3, [r2], #1
 80198fc:	9223      	str	r2, [sp, #140]	@ 0x8c
 80198fe:	e786      	b.n	801980e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 8019900:	f1c2 0201 	rsb	r2, r2, #1
 8019904:	4093      	lsls	r3, r2
 8019906:	f303 031f 	ssat	r3, #32, r3
 801990a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801990c:	6812      	ldr	r2, [r2, #0]
 801990e:	fb53 f312 	smmulr	r3, r3, r2
 8019912:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019914:	6812      	ldr	r2, [r2, #0]
 8019916:	4413      	add	r3, r2
 8019918:	f303 0307 	ssat	r3, #8, r3
 801991c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801991e:	f802 3b01 	strb.w	r3, [r2], #1
 8019922:	9223      	str	r2, [sp, #140]	@ 0x8c
 8019924:	e773      	b.n	801980e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 8019926:	4606      	mov	r6, r0
 8019928:	e744      	b.n	80197b4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21c>
 801992a:	bf00      	nop
	...

08020000 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3>:
 8020000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020004:	b0a4      	sub	sp, #144	@ 0x90
 8020006:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
 8020008:	9313      	str	r3, [sp, #76]	@ 0x4c
 802000a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 802000c:	9011      	str	r0, [sp, #68]	@ 0x44
 802000e:	9112      	str	r1, [sp, #72]	@ 0x48
 8020010:	9210      	str	r2, [sp, #64]	@ 0x40
 8020012:	f013 0801 	ands.w	r8, r3, #1
 8020016:	f8cd 807c 	str.w	r8, [sp, #124]	@ 0x7c
 802001a:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 802001c:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
 802001e:	bf1c      	itt	ne
 8020020:	3402      	addne	r4, #2
 8020022:	3502      	addne	r5, #2
 8020024:	fb04 f405 	mul.w	r4, r4, r5
 8020028:	f013 0502 	ands.w	r5, r3, #2
 802002c:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 802002e:	951e      	str	r5, [sp, #120]	@ 0x78
 8020030:	f04f 0c01 	mov.w	ip, #1
 8020034:	bf19      	ittee	ne
 8020036:	940b      	strne	r4, [sp, #44]	@ 0x2c
 8020038:	f8cd c028 	strne.w	ip, [sp, #40]	@ 0x28
 802003c:	f8cd c02c 	streq.w	ip, [sp, #44]	@ 0x2c
 8020040:	970a      	streq	r7, [sp, #40]	@ 0x28
 8020042:	f003 0803 	and.w	r8, r3, #3
 8020046:	f1b8 0f03 	cmp.w	r8, #3
 802004a:	bf0c      	ite	eq
 802004c:	2302      	moveq	r3, #2
 802004e:	2300      	movne	r3, #0
 8020050:	930c      	str	r3, [sp, #48]	@ 0x30
 8020052:	2f01      	cmp	r7, #1
 8020054:	f340 8231 	ble.w	80204ba <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x4ba>
 8020058:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
 802005a:	eba6 0486 	sub.w	r4, r6, r6, lsl #2
 802005e:	eb05 0304 	add.w	r3, r5, r4
 8020062:	4433      	add	r3, r6
 8020064:	931b      	str	r3, [sp, #108]	@ 0x6c
 8020066:	f1c5 0302 	rsb	r3, r5, #2
 802006a:	eba3 0006 	sub.w	r0, r3, r6
 802006e:	eb04 0c43 	add.w	ip, r4, r3, lsl #1
 8020072:	44b4      	add	ip, r6
 8020074:	f8cd c070 	str.w	ip, [sp, #112]	@ 0x70
 8020078:	f1ac 0c03 	sub.w	ip, ip, #3
 802007c:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 8020080:	f006 0c03 	and.w	ip, r6, #3
 8020084:	f8cd c08c 	str.w	ip, [sp, #140]	@ 0x8c
 8020088:	eb0c 03cc 	add.w	r3, ip, ip, lsl #3
 802008c:	9321      	str	r3, [sp, #132]	@ 0x84
 802008e:	ea4f 03a6 	mov.w	r3, r6, asr #2
 8020092:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8020096:	f8cd c080 	str.w	ip, [sp, #128]	@ 0x80
 802009a:	eb06 0cc6 	add.w	ip, r6, r6, lsl #3
 802009e:	f8cd c088 	str.w	ip, [sp, #136]	@ 0x88
 80200a2:	f8dd b0bc 	ldr.w	fp, [sp, #188]	@ 0xbc
 80200a6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80200a8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80200ac:	eb03 0c8b 	add.w	ip, r3, fp, lsl #2
 80200b0:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
 80200b4:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 80200b6:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80200b8:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 80200ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80200bc:	910d      	str	r1, [sp, #52]	@ 0x34
 80200be:	920f      	str	r2, [sp, #60]	@ 0x3c
 80200c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80200c2:	f9b2 3000 	ldrsh.w	r3, [r2]
 80200c6:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80200ca:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80200ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80200d0:	e9d2 1200 	ldrd	r1, r2, [r2]
 80200d4:	e9cd 1200 	strd	r1, r2, [sp]
 80200d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80200da:	e9d2 1200 	ldrd	r1, r2, [r2]
 80200de:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80200e2:	2b00      	cmp	r3, #0
 80200e4:	bfcc      	ite	gt
 80200e6:	2000      	movgt	r0, #0
 80200e8:	f04f 30ff 	movle.w	r0, #4294967295
 80200ec:	2b15      	cmp	r3, #21
 80200ee:	bfc8      	it	gt
 80200f0:	2001      	movgt	r0, #1
 80200f2:	2c00      	cmp	r4, #0
 80200f4:	bfcc      	ite	gt
 80200f6:	2100      	movgt	r1, #0
 80200f8:	f04f 31ff 	movle.w	r1, #4294967295
 80200fc:	2c15      	cmp	r4, #21
 80200fe:	bfc8      	it	gt
 8020100:	2101      	movgt	r1, #1
 8020102:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020106:	f000 bc59 	b.w	80209bc <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9bc>
 802010a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 802010c:	2b00      	cmp	r3, #0
 802010e:	f040 8426 	bne.w	802095e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x95e>
 8020112:	4618      	mov	r0, r3
 8020114:	461a      	mov	r2, r3
 8020116:	9d35      	ldr	r5, [sp, #212]	@ 0xd4
 8020118:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802011a:	e9d4 1300 	ldrd	r1, r3, [r4]
 802011e:	4403      	add	r3, r0
 8020120:	440a      	add	r2, r1
 8020122:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8020126:	2d03      	cmp	r5, #3
 8020128:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802012a:	d103      	bne.n	8020134 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x134>
 802012c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 802012e:	f103 0303 	add.w	r3, r3, #3
 8020132:	441a      	add	r2, r3
 8020134:	9215      	str	r2, [sp, #84]	@ 0x54
 8020136:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 802013a:	f1b8 0f00 	cmp.w	r8, #0
 802013e:	f000 819d 	beq.w	802047c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x47c>
 8020142:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020144:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
 8020148:	9417      	str	r4, [sp, #92]	@ 0x5c
 802014a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 802014c:	105b      	asrs	r3, r3, #1
 802014e:	f000 8184 	beq.w	802045a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x45a>
 8020152:	9418      	str	r4, [sp, #96]	@ 0x60
 8020154:	9319      	str	r3, [sp, #100]	@ 0x64
 8020156:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020158:	9d38      	ldr	r5, [sp, #224]	@ 0xe0
 802015a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802015e:	4610      	mov	r0, r2
 8020160:	4619      	mov	r1, r3
 8020162:	2e04      	cmp	r6, #4
 8020164:	f340 8123 	ble.w	80203ae <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3ae>
 8020168:	ea4f 0ea6 	mov.w	lr, r6, asr #2
 802016c:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 8020170:	f8d4 8000 	ldr.w	r8, [r4]
 8020174:	fa2f f788 	sxtb16	r7, r8
 8020178:	fa2f f898 	sxtb16	r8, r8, ror #8
 802017c:	fb27 330b 	smlad	r3, r7, fp, r3
 8020180:	fb27 2209 	smlad	r2, r7, r9, r2
 8020184:	fb28 220a 	smlad	r2, r8, sl, r2
 8020188:	fb28 330c 	smlad	r3, r8, ip, r3
 802018c:	f854 8006 	ldr.w	r8, [r4, r6]
 8020190:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8020194:	fa2f f788 	sxtb16	r7, r8
 8020198:	fa2f f898 	sxtb16	r8, r8, ror #8
 802019c:	fb27 0009 	smlad	r0, r7, r9, r0
 80201a0:	f855 9b04 	ldr.w	r9, [r5], #4
 80201a4:	fb28 000a 	smlad	r0, r8, sl, r0
 80201a8:	f855 ab04 	ldr.w	sl, [r5], #4
 80201ac:	fb27 110b 	smlad	r1, r7, fp, r1
 80201b0:	f855 bb04 	ldr.w	fp, [r5], #4
 80201b4:	fb28 110c 	smlad	r1, r8, ip, r1
 80201b8:	f855 cb04 	ldr.w	ip, [r5], #4
 80201bc:	fb27 2209 	smlad	r2, r7, r9, r2
 80201c0:	fb27 330b 	smlad	r3, r7, fp, r3
 80201c4:	fb28 220a 	smlad	r2, r8, sl, r2
 80201c8:	fb28 330c 	smlad	r3, r8, ip, r3
 80201cc:	f8d4 8000 	ldr.w	r8, [r4]
 80201d0:	fa2f f788 	sxtb16	r7, r8
 80201d4:	fa2f f898 	sxtb16	r8, r8, ror #8
 80201d8:	fb27 0009 	smlad	r0, r7, r9, r0
 80201dc:	f855 9b04 	ldr.w	r9, [r5], #4
 80201e0:	fb28 000a 	smlad	r0, r8, sl, r0
 80201e4:	f855 ab04 	ldr.w	sl, [r5], #4
 80201e8:	fb27 110b 	smlad	r1, r7, fp, r1
 80201ec:	f855 bb04 	ldr.w	fp, [r5], #4
 80201f0:	fb28 110c 	smlad	r1, r8, ip, r1
 80201f4:	f855 cb04 	ldr.w	ip, [r5], #4
 80201f8:	fb27 2209 	smlad	r2, r7, r9, r2
 80201fc:	fb27 330b 	smlad	r3, r7, fp, r3
 8020200:	fb28 220a 	smlad	r2, r8, sl, r2
 8020204:	fb28 330c 	smlad	r3, r8, ip, r3
 8020208:	f854 8006 	ldr.w	r8, [r4, r6]
 802020c:	fa2f f788 	sxtb16	r7, r8
 8020210:	fa2f f898 	sxtb16	r8, r8, ror #8
 8020214:	fb27 0009 	smlad	r0, r7, r9, r0
 8020218:	fb27 110b 	smlad	r1, r7, fp, r1
 802021c:	f8dd 906c 	ldr.w	r9, [sp, #108]	@ 0x6c
 8020220:	fb28 000a 	smlad	r0, r8, sl, r0
 8020224:	fb28 110c 	smlad	r1, r8, ip, r1
 8020228:	444c      	add	r4, r9
 802022a:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 802022e:	f8d4 8000 	ldr.w	r8, [r4]
 8020232:	fa2f f788 	sxtb16	r7, r8
 8020236:	fa2f f898 	sxtb16	r8, r8, ror #8
 802023a:	fb27 330b 	smlad	r3, r7, fp, r3
 802023e:	fb27 2209 	smlad	r2, r7, r9, r2
 8020242:	fb28 220a 	smlad	r2, r8, sl, r2
 8020246:	fb28 330c 	smlad	r3, r8, ip, r3
 802024a:	f854 8006 	ldr.w	r8, [r4, r6]
 802024e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8020252:	fa2f f788 	sxtb16	r7, r8
 8020256:	fa2f f898 	sxtb16	r8, r8, ror #8
 802025a:	fb27 0009 	smlad	r0, r7, r9, r0
 802025e:	f855 9b04 	ldr.w	r9, [r5], #4
 8020262:	fb28 000a 	smlad	r0, r8, sl, r0
 8020266:	f855 ab04 	ldr.w	sl, [r5], #4
 802026a:	fb27 110b 	smlad	r1, r7, fp, r1
 802026e:	f855 bb04 	ldr.w	fp, [r5], #4
 8020272:	fb28 110c 	smlad	r1, r8, ip, r1
 8020276:	f855 cb04 	ldr.w	ip, [r5], #4
 802027a:	fb27 2209 	smlad	r2, r7, r9, r2
 802027e:	fb27 330b 	smlad	r3, r7, fp, r3
 8020282:	fb28 220a 	smlad	r2, r8, sl, r2
 8020286:	fb28 330c 	smlad	r3, r8, ip, r3
 802028a:	f8d4 8000 	ldr.w	r8, [r4]
 802028e:	fa2f f788 	sxtb16	r7, r8
 8020292:	fa2f f898 	sxtb16	r8, r8, ror #8
 8020296:	fb27 0009 	smlad	r0, r7, r9, r0
 802029a:	f855 9b04 	ldr.w	r9, [r5], #4
 802029e:	fb28 000a 	smlad	r0, r8, sl, r0
 80202a2:	f855 ab04 	ldr.w	sl, [r5], #4
 80202a6:	fb27 110b 	smlad	r1, r7, fp, r1
 80202aa:	f855 bb04 	ldr.w	fp, [r5], #4
 80202ae:	fb28 110c 	smlad	r1, r8, ip, r1
 80202b2:	f855 cb04 	ldr.w	ip, [r5], #4
 80202b6:	fb27 2209 	smlad	r2, r7, r9, r2
 80202ba:	fb27 330b 	smlad	r3, r7, fp, r3
 80202be:	fb28 220a 	smlad	r2, r8, sl, r2
 80202c2:	fb28 330c 	smlad	r3, r8, ip, r3
 80202c6:	f854 8006 	ldr.w	r8, [r4, r6]
 80202ca:	fa2f f788 	sxtb16	r7, r8
 80202ce:	fa2f f898 	sxtb16	r8, r8, ror #8
 80202d2:	fb27 0009 	smlad	r0, r7, r9, r0
 80202d6:	fb27 110b 	smlad	r1, r7, fp, r1
 80202da:	f8dd 906c 	ldr.w	r9, [sp, #108]	@ 0x6c
 80202de:	fb28 000a 	smlad	r0, r8, sl, r0
 80202e2:	fb28 110c 	smlad	r1, r8, ip, r1
 80202e6:	444c      	add	r4, r9
 80202e8:	e8b5 1e00 	ldmia.w	r5!, {r9, sl, fp, ip}
 80202ec:	f8d4 8000 	ldr.w	r8, [r4]
 80202f0:	fa2f f788 	sxtb16	r7, r8
 80202f4:	fa2f f898 	sxtb16	r8, r8, ror #8
 80202f8:	fb27 330b 	smlad	r3, r7, fp, r3
 80202fc:	fb27 2209 	smlad	r2, r7, r9, r2
 8020300:	fb28 220a 	smlad	r2, r8, sl, r2
 8020304:	fb28 330c 	smlad	r3, r8, ip, r3
 8020308:	f854 8006 	ldr.w	r8, [r4, r6]
 802030c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8020310:	fa2f f788 	sxtb16	r7, r8
 8020314:	fa2f f898 	sxtb16	r8, r8, ror #8
 8020318:	fb27 0009 	smlad	r0, r7, r9, r0
 802031c:	f855 9b04 	ldr.w	r9, [r5], #4
 8020320:	fb28 000a 	smlad	r0, r8, sl, r0
 8020324:	f855 ab04 	ldr.w	sl, [r5], #4
 8020328:	fb27 110b 	smlad	r1, r7, fp, r1
 802032c:	f855 bb04 	ldr.w	fp, [r5], #4
 8020330:	fb28 110c 	smlad	r1, r8, ip, r1
 8020334:	f855 cb04 	ldr.w	ip, [r5], #4
 8020338:	fb27 2209 	smlad	r2, r7, r9, r2
 802033c:	fb27 330b 	smlad	r3, r7, fp, r3
 8020340:	fb28 220a 	smlad	r2, r8, sl, r2
 8020344:	fb28 330c 	smlad	r3, r8, ip, r3
 8020348:	f8d4 8000 	ldr.w	r8, [r4]
 802034c:	fa2f f788 	sxtb16	r7, r8
 8020350:	fa2f f898 	sxtb16	r8, r8, ror #8
 8020354:	fb27 0009 	smlad	r0, r7, r9, r0
 8020358:	f855 9b04 	ldr.w	r9, [r5], #4
 802035c:	fb28 000a 	smlad	r0, r8, sl, r0
 8020360:	f855 ab04 	ldr.w	sl, [r5], #4
 8020364:	fb27 110b 	smlad	r1, r7, fp, r1
 8020368:	f855 bb04 	ldr.w	fp, [r5], #4
 802036c:	fb28 110c 	smlad	r1, r8, ip, r1
 8020370:	f855 cb04 	ldr.w	ip, [r5], #4
 8020374:	fb27 2209 	smlad	r2, r7, r9, r2
 8020378:	fb27 330b 	smlad	r3, r7, fp, r3
 802037c:	fb28 220a 	smlad	r2, r8, sl, r2
 8020380:	fb28 330c 	smlad	r3, r8, ip, r3
 8020384:	f854 8006 	ldr.w	r8, [r4, r6]
 8020388:	fa2f f788 	sxtb16	r7, r8
 802038c:	fa2f f898 	sxtb16	r8, r8, ror #8
 8020390:	fb27 0009 	smlad	r0, r7, r9, r0
 8020394:	fb27 110b 	smlad	r1, r7, fp, r1
 8020398:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 802039c:	fb28 000a 	smlad	r0, r8, sl, r0
 80203a0:	fb28 110c 	smlad	r1, r8, ip, r1
 80203a4:	f1be 0e01 	subs.w	lr, lr, #1
 80203a8:	444c      	add	r4, r9
 80203aa:	f47f aedf 	bne.w	802016c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x16c>
 80203ae:	f016 0703 	ands.w	r7, r6, #3
 80203b2:	f300 80ff 	bgt.w	80205b4 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5b4>
 80203b6:	f8dd e010 	ldr.w	lr, [sp, #16]
 80203ba:	f8dd a000 	ldr.w	sl, [sp]
 80203be:	f8dd b008 	ldr.w	fp, [sp, #8]
 80203c2:	f8dd c018 	ldr.w	ip, [sp, #24]
 80203c6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80203c8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80203ca:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 80203ce:	44a8      	add	r8, r5
 80203d0:	f1bc 0f00 	cmp.w	ip, #0
 80203d4:	f040 832d 	bne.w	8020a32 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa32>
 80203d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80203dc:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80203e0:	fb52 e20a 	smmla	r2, r2, sl, lr
 80203e4:	fb50 e00a 	smmla	r0, r0, sl, lr
 80203e8:	fa42 f20b 	asr.w	r2, r2, fp
 80203ec:	fa40 f00b 	asr.w	r0, r0, fp
 80203f0:	f302 0207 	ssat	r2, #8, r2
 80203f4:	f300 0007 	ssat	r0, #8, r0
 80203f8:	702a      	strb	r2, [r5, #0]
 80203fa:	55e8      	strb	r0, [r5, r7]
 80203fc:	f8dd e014 	ldr.w	lr, [sp, #20]
 8020400:	f8dd a004 	ldr.w	sl, [sp, #4]
 8020404:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020408:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802040c:	f1bc 0f00 	cmp.w	ip, #0
 8020410:	f040 8338 	bne.w	8020a84 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa84>
 8020414:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020418:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802041c:	fb53 e30a 	smmla	r3, r3, sl, lr
 8020420:	fb51 e10a 	smmla	r1, r1, sl, lr
 8020424:	fa43 f30b 	asr.w	r3, r3, fp
 8020428:	fa41 f10b 	asr.w	r1, r1, fp
 802042c:	f303 0307 	ssat	r3, #8, r3
 8020430:	f301 0107 	ssat	r1, #8, r1
 8020434:	f888 3000 	strb.w	r3, [r8]
 8020438:	f808 1007 	strb.w	r1, [r8, r7]
 802043c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802043e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020442:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
 8020444:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8020446:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 802044a:	9215      	str	r2, [sp, #84]	@ 0x54
 802044c:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8020450:	9518      	str	r5, [sp, #96]	@ 0x60
 8020452:	3b01      	subs	r3, #1
 8020454:	9319      	str	r3, [sp, #100]	@ 0x64
 8020456:	f73f ae7e 	bgt.w	8020156 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x156>
 802045a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 802045c:	f013 0301 	ands.w	r3, r3, #1
 8020460:	f040 8141 	bne.w	80206e6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x6e6>
 8020464:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020466:	441a      	add	r2, r3
 8020468:	9215      	str	r2, [sp, #84]	@ 0x54
 802046a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802046c:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 802046e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8020470:	440c      	add	r4, r1
 8020472:	9417      	str	r4, [sp, #92]	@ 0x5c
 8020474:	3b01      	subs	r3, #1
 8020476:	931a      	str	r3, [sp, #104]	@ 0x68
 8020478:	f47f ae67 	bne.w	802014a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x14a>
 802047c:	9922      	ldr	r1, [sp, #136]	@ 0x88
 802047e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020480:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8020484:	9212      	str	r2, [sp, #72]	@ 0x48
 8020486:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020488:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802048a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 802048e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8020490:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020492:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020494:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020496:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020498:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802049a:	f100 0008 	add.w	r0, r0, #8
 802049e:	900d      	str	r0, [sp, #52]	@ 0x34
 80204a0:	f102 0208 	add.w	r2, r2, #8
 80204a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80204a6:	f103 0308 	add.w	r3, r3, #8
 80204aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80204ac:	f104 0404 	add.w	r4, r4, #4
 80204b0:	42a5      	cmp	r5, r4
 80204b2:	940e      	str	r4, [sp, #56]	@ 0x38
 80204b4:	f47f ae04 	bne.w	80200c0 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xc0>
 80204b8:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80204ba:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80204bc:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 80204be:	9d31      	ldr	r5, [sp, #196]	@ 0xc4
 80204c0:	f013 0301 	ands.w	r3, r3, #1
 80204c4:	d071      	beq.n	80205aa <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5aa>
 80204c6:	2900      	cmp	r1, #0
 80204c8:	d06f      	beq.n	80205aa <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5aa>
 80204ca:	911a      	str	r1, [sp, #104]	@ 0x68
 80204cc:	2d00      	cmp	r5, #0
 80204ce:	d06c      	beq.n	80205aa <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5aa>
 80204d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80204d2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80204d4:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 80204d8:	6818      	ldr	r0, [r3, #0]
 80204da:	6821      	ldr	r1, [r4, #0]
 80204dc:	f9b8 b000 	ldrsh.w	fp, [r8]
 80204e0:	9100      	str	r1, [sp, #0]
 80204e2:	f1bb 0f00 	cmp.w	fp, #0
 80204e6:	bfcc      	ite	gt
 80204e8:	2200      	movgt	r2, #0
 80204ea:	f04f 32ff 	movle.w	r2, #4294967295
 80204ee:	f1bb 0f15 	cmp.w	fp, #21
 80204f2:	bfc8      	it	gt
 80204f4:	2201      	movgt	r2, #1
 80204f6:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80204f8:	f003 0303 	and.w	r3, r3, #3
 80204fc:	2b03      	cmp	r3, #3
 80204fe:	bf03      	ittte	eq
 8020500:	3703      	addeq	r7, #3
 8020502:	197f      	addeq	r7, r7, r5
 8020504:	2602      	moveq	r6, #2
 8020506:	2600      	movne	r6, #0
 8020508:	960b      	str	r6, [sp, #44]	@ 0x2c
 802050a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802050c:	f8dd a0cc 	ldr.w	sl, [sp, #204]	@ 0xcc
 8020510:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
 8020512:	681c      	ldr	r4, [r3, #0]
 8020514:	f8dd 90c0 	ldr.w	r9, [sp, #192]	@ 0xc0
 8020518:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802051a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802051c:	9410      	str	r4, [sp, #64]	@ 0x40
 802051e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020522:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 8020526:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8020528:	9119      	str	r1, [sp, #100]	@ 0x64
 802052a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802052c:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 8020530:	f1b9 0f00 	cmp.w	r9, #0
 8020534:	dd1a      	ble.n	802056c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x56c>
 8020536:	464d      	mov	r5, r9
 8020538:	f91c 301a 	ldrsb.w	r3, [ip, sl, lsl #1]
 802053c:	f918 4019 	ldrsb.w	r4, [r8, r9, lsl #1]
 8020540:	eba3 0306 	sub.w	r3, r3, r6
 8020544:	3d01      	subs	r5, #1
 8020546:	fb04 1103 	mla	r1, r4, r3, r1
 802054a:	f91c 300a 	ldrsb.w	r3, [ip, sl]
 802054e:	f918 4009 	ldrsb.w	r4, [r8, r9]
 8020552:	eba3 0306 	sub.w	r3, r3, r6
 8020556:	fb04 1103 	mla	r1, r4, r3, r1
 802055a:	f91c 3b01 	ldrsb.w	r3, [ip], #1
 802055e:	f918 4b01 	ldrsb.w	r4, [r8], #1
 8020562:	eba3 0306 	sub.w	r3, r3, r6
 8020566:	fb04 1103 	mla	r1, r4, r3, r1
 802056a:	d1e5      	bne.n	8020538 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x538>
 802056c:	9c00      	ldr	r4, [sp, #0]
 802056e:	2a00      	cmp	r2, #0
 8020570:	f040 82b1 	bne.w	8020ad6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xad6>
 8020574:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020578:	fb51 0104 	smmla	r1, r1, r4, r0
 802057c:	fa41 f10b 	asr.w	r1, r1, fp
 8020580:	f301 0107 	ssat	r1, #8, r1
 8020584:	7039      	strb	r1, [r7, #0]
 8020586:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020588:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 802058a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802058c:	4427      	add	r7, r4
 802058e:	ebac 0c41 	sub.w	ip, ip, r1, lsl #1
 8020592:	3b01      	subs	r3, #1
 8020594:	9319      	str	r3, [sp, #100]	@ 0x64
 8020596:	d1c8      	bne.n	802052a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x52a>
 8020598:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802059a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802059c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802059e:	440f      	add	r7, r1
 80205a0:	4454      	add	r4, sl
 80205a2:	9417      	str	r4, [sp, #92]	@ 0x5c
 80205a4:	3b01      	subs	r3, #1
 80205a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80205a8:	d1bb      	bne.n	8020522 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x522>
 80205aa:	f04f 0000 	mov.w	r0, #0
 80205ae:	b024      	add	sp, #144	@ 0x90
 80205b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205b4:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 80205b6:	2f00      	cmp	r7, #0
 80205b8:	f43f aefd 	beq.w	80203b6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3b6>
 80205bc:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 80205c0:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 80205c4:	f994 c000 	ldrsb.w	ip, [r4]
 80205c8:	f914 8006 	ldrsb.w	r8, [r4, r6]
 80205cc:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80205d0:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80205d4:	fb1b 220c 	smlabb	r2, fp, ip, r2
 80205d8:	fb1b 0008 	smlabb	r0, fp, r8, r0
 80205dc:	fb1a 330c 	smlabb	r3, sl, ip, r3
 80205e0:	fb1a 1108 	smlabb	r1, sl, r8, r1
 80205e4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80205e8:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80205ec:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80205f0:	f994 c000 	ldrsb.w	ip, [r4]
 80205f4:	fb1b 2208 	smlabb	r2, fp, r8, r2
 80205f8:	fb1b 000c 	smlabb	r0, fp, ip, r0
 80205fc:	fb1a 3308 	smlabb	r3, sl, r8, r3
 8020600:	fb1a 110c 	smlabb	r1, sl, ip, r1
 8020604:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8020608:	f935 bb02 	ldrsh.w	fp, [r5], #2
 802060c:	f935 ab02 	ldrsh.w	sl, [r5], #2
 8020610:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8020614:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8020618:	fb1a 330c 	smlabb	r3, sl, ip, r3
 802061c:	fb1a 1108 	smlabb	r1, sl, r8, r1
 8020620:	4474      	add	r4, lr
 8020622:	f994 c000 	ldrsb.w	ip, [r4]
 8020626:	f914 8006 	ldrsb.w	r8, [r4, r6]
 802062a:	f935 bb02 	ldrsh.w	fp, [r5], #2
 802062e:	f935 ab02 	ldrsh.w	sl, [r5], #2
 8020632:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8020636:	fb1b 0008 	smlabb	r0, fp, r8, r0
 802063a:	fb1a 330c 	smlabb	r3, sl, ip, r3
 802063e:	fb1a 1108 	smlabb	r1, sl, r8, r1
 8020642:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8020646:	f935 bb02 	ldrsh.w	fp, [r5], #2
 802064a:	f935 ab02 	ldrsh.w	sl, [r5], #2
 802064e:	f994 c000 	ldrsb.w	ip, [r4]
 8020652:	fb1b 2208 	smlabb	r2, fp, r8, r2
 8020656:	fb1b 000c 	smlabb	r0, fp, ip, r0
 802065a:	fb1a 3308 	smlabb	r3, sl, r8, r3
 802065e:	fb1a 110c 	smlabb	r1, sl, ip, r1
 8020662:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8020666:	f935 bb02 	ldrsh.w	fp, [r5], #2
 802066a:	f935 ab02 	ldrsh.w	sl, [r5], #2
 802066e:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8020672:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8020676:	fb1a 330c 	smlabb	r3, sl, ip, r3
 802067a:	fb1a 1108 	smlabb	r1, sl, r8, r1
 802067e:	4474      	add	r4, lr
 8020680:	f994 c000 	ldrsb.w	ip, [r4]
 8020684:	f914 8006 	ldrsb.w	r8, [r4, r6]
 8020688:	f935 bb02 	ldrsh.w	fp, [r5], #2
 802068c:	f935 ab02 	ldrsh.w	sl, [r5], #2
 8020690:	fb1b 220c 	smlabb	r2, fp, ip, r2
 8020694:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8020698:	fb1a 330c 	smlabb	r3, sl, ip, r3
 802069c:	fb1a 1108 	smlabb	r1, sl, r8, r1
 80206a0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80206a4:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80206a8:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80206ac:	f994 c000 	ldrsb.w	ip, [r4]
 80206b0:	fb1b 2208 	smlabb	r2, fp, r8, r2
 80206b4:	fb1b 000c 	smlabb	r0, fp, ip, r0
 80206b8:	fb1a 3308 	smlabb	r3, sl, r8, r3
 80206bc:	fb1a 110c 	smlabb	r1, sl, ip, r1
 80206c0:	f914 8006 	ldrsb.w	r8, [r4, r6]
 80206c4:	f935 bb02 	ldrsh.w	fp, [r5], #2
 80206c8:	f935 ab02 	ldrsh.w	sl, [r5], #2
 80206cc:	fb1b 0008 	smlabb	r0, fp, r8, r0
 80206d0:	fb1b 220c 	smlabb	r2, fp, ip, r2
 80206d4:	fb1a 330c 	smlabb	r3, sl, ip, r3
 80206d8:	fb1a 1108 	smlabb	r1, sl, r8, r1
 80206dc:	444c      	add	r4, r9
 80206de:	3f01      	subs	r7, #1
 80206e0:	f73f af70 	bgt.w	80205c4 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x5c4>
 80206e4:	e667      	b.n	80203b6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3b6>
 80206e6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80206e8:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80206ea:	2b01      	cmp	r3, #1
 80206ec:	bf1e      	ittt	ne
 80206ee:	9b1b      	ldrne	r3, [sp, #108]	@ 0x6c
 80206f0:	18c0      	addne	r0, r0, r3
 80206f2:	1b80      	subne	r0, r0, r6
 80206f4:	e9dd e508 	ldrd	lr, r5, [sp, #32]
 80206f8:	f8dd c0cc 	ldr.w	ip, [sp, #204]	@ 0xcc
 80206fc:	ea4f 0a4c 	mov.w	sl, ip, lsl #1
 8020700:	f1ca 0a04 	rsb	sl, sl, #4
 8020704:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8020706:	ea5f 0ba6 	movs.w	fp, r6, asr #2
 802070a:	f000 8091 	beq.w	8020830 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x830>
 802070e:	6802      	ldr	r2, [r0, #0]
 8020710:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8020714:	fa2f f182 	sxtb16	r1, r2
 8020718:	fa2f f292 	sxtb16	r2, r2, ror #8
 802071c:	fb21 ee04 	smlad	lr, r1, r4, lr
 8020720:	fb22 ee07 	smlad	lr, r2, r7, lr
 8020724:	fb22 5509 	smlad	r5, r2, r9, r5
 8020728:	fb21 5508 	smlad	r5, r1, r8, r5
 802072c:	5982      	ldr	r2, [r0, r6]
 802072e:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8020732:	fa2f f182 	sxtb16	r1, r2
 8020736:	fa2f f292 	sxtb16	r2, r2, ror #8
 802073a:	fb21 ee04 	smlad	lr, r1, r4, lr
 802073e:	fb22 ee07 	smlad	lr, r2, r7, lr
 8020742:	fb22 5509 	smlad	r5, r2, r9, r5
 8020746:	fb21 5508 	smlad	r5, r1, r8, r5
 802074a:	f850 2016 	ldr.w	r2, [r0, r6, lsl #1]
 802074e:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8020752:	fa2f f182 	sxtb16	r1, r2
 8020756:	fa2f f292 	sxtb16	r2, r2, ror #8
 802075a:	fb21 ee04 	smlad	lr, r1, r4, lr
 802075e:	fb22 ee07 	smlad	lr, r2, r7, lr
 8020762:	fb22 5509 	smlad	r5, r2, r9, r5
 8020766:	fb21 5508 	smlad	r5, r1, r8, r5
 802076a:	4460      	add	r0, ip
 802076c:	6802      	ldr	r2, [r0, #0]
 802076e:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8020772:	fa2f f182 	sxtb16	r1, r2
 8020776:	fa2f f292 	sxtb16	r2, r2, ror #8
 802077a:	fb21 ee04 	smlad	lr, r1, r4, lr
 802077e:	fb22 ee07 	smlad	lr, r2, r7, lr
 8020782:	fb22 5509 	smlad	r5, r2, r9, r5
 8020786:	fb21 5508 	smlad	r5, r1, r8, r5
 802078a:	5982      	ldr	r2, [r0, r6]
 802078c:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 8020790:	fa2f f182 	sxtb16	r1, r2
 8020794:	fa2f f292 	sxtb16	r2, r2, ror #8
 8020798:	fb21 ee04 	smlad	lr, r1, r4, lr
 802079c:	fb22 ee07 	smlad	lr, r2, r7, lr
 80207a0:	fb22 5509 	smlad	r5, r2, r9, r5
 80207a4:	fb21 5508 	smlad	r5, r1, r8, r5
 80207a8:	f850 2016 	ldr.w	r2, [r0, r6, lsl #1]
 80207ac:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80207b0:	fa2f f182 	sxtb16	r1, r2
 80207b4:	fa2f f292 	sxtb16	r2, r2, ror #8
 80207b8:	fb21 ee04 	smlad	lr, r1, r4, lr
 80207bc:	fb22 ee07 	smlad	lr, r2, r7, lr
 80207c0:	fb22 5509 	smlad	r5, r2, r9, r5
 80207c4:	fb21 5508 	smlad	r5, r1, r8, r5
 80207c8:	4460      	add	r0, ip
 80207ca:	6802      	ldr	r2, [r0, #0]
 80207cc:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80207d0:	fa2f f182 	sxtb16	r1, r2
 80207d4:	fa2f f292 	sxtb16	r2, r2, ror #8
 80207d8:	fb21 ee04 	smlad	lr, r1, r4, lr
 80207dc:	fb22 ee07 	smlad	lr, r2, r7, lr
 80207e0:	fb22 5509 	smlad	r5, r2, r9, r5
 80207e4:	fb21 5508 	smlad	r5, r1, r8, r5
 80207e8:	5982      	ldr	r2, [r0, r6]
 80207ea:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 80207ee:	fa2f f182 	sxtb16	r1, r2
 80207f2:	fa2f f292 	sxtb16	r2, r2, ror #8
 80207f6:	fb21 ee04 	smlad	lr, r1, r4, lr
 80207fa:	fb22 ee07 	smlad	lr, r2, r7, lr
 80207fe:	fb22 5509 	smlad	r5, r2, r9, r5
 8020802:	fb21 5508 	smlad	r5, r1, r8, r5
 8020806:	f850 2016 	ldr.w	r2, [r0, r6, lsl #1]
 802080a:	e8b3 0390 	ldmia.w	r3!, {r4, r7, r8, r9}
 802080e:	fa2f f182 	sxtb16	r1, r2
 8020812:	fa2f f292 	sxtb16	r2, r2, ror #8
 8020816:	fb21 ee04 	smlad	lr, r1, r4, lr
 802081a:	fb22 ee07 	smlad	lr, r2, r7, lr
 802081e:	fb22 5509 	smlad	r5, r2, r9, r5
 8020822:	fb21 5508 	smlad	r5, r1, r8, r5
 8020826:	4450      	add	r0, sl
 8020828:	f1bb 0b01 	subs.w	fp, fp, #1
 802082c:	f73f af6f 	bgt.w	802070e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x70e>
 8020830:	f016 0b03 	ands.w	fp, r6, #3
 8020834:	d05f      	beq.n	80208f6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x8f6>
 8020836:	f990 1000 	ldrsb.w	r1, [r0]
 802083a:	5782      	ldrsb	r2, [r0, r6]
 802083c:	f910 a016 	ldrsb.w	sl, [r0, r6, lsl #1]
 8020840:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8020844:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8020848:	f933 8b02 	ldrsh.w	r8, [r3], #2
 802084c:	f933 9b02 	ldrsh.w	r9, [r3], #2
 8020850:	fb11 ee04 	smlabb	lr, r1, r4, lr
 8020854:	fb11 5507 	smlabb	r5, r1, r7, r5
 8020858:	fb12 ee08 	smlabb	lr, r2, r8, lr
 802085c:	fb12 5509 	smlabb	r5, r2, r9, r5
 8020860:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8020864:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8020868:	fb1a ee04 	smlabb	lr, sl, r4, lr
 802086c:	fb1a 5507 	smlabb	r5, sl, r7, r5
 8020870:	4460      	add	r0, ip
 8020872:	f990 1000 	ldrsb.w	r1, [r0]
 8020876:	5782      	ldrsb	r2, [r0, r6]
 8020878:	f910 a016 	ldrsb.w	sl, [r0, r6, lsl #1]
 802087c:	f933 4b02 	ldrsh.w	r4, [r3], #2
 8020880:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8020884:	f933 8b02 	ldrsh.w	r8, [r3], #2
 8020888:	f933 9b02 	ldrsh.w	r9, [r3], #2
 802088c:	fb11 ee04 	smlabb	lr, r1, r4, lr
 8020890:	fb11 5507 	smlabb	r5, r1, r7, r5
 8020894:	fb12 ee08 	smlabb	lr, r2, r8, lr
 8020898:	fb12 5509 	smlabb	r5, r2, r9, r5
 802089c:	f933 4b02 	ldrsh.w	r4, [r3], #2
 80208a0:	f933 7b02 	ldrsh.w	r7, [r3], #2
 80208a4:	fb1a ee04 	smlabb	lr, sl, r4, lr
 80208a8:	fb1a 5507 	smlabb	r5, sl, r7, r5
 80208ac:	4460      	add	r0, ip
 80208ae:	f990 1000 	ldrsb.w	r1, [r0]
 80208b2:	5782      	ldrsb	r2, [r0, r6]
 80208b4:	f910 a016 	ldrsb.w	sl, [r0, r6, lsl #1]
 80208b8:	f933 4b02 	ldrsh.w	r4, [r3], #2
 80208bc:	f933 7b02 	ldrsh.w	r7, [r3], #2
 80208c0:	f933 8b02 	ldrsh.w	r8, [r3], #2
 80208c4:	f933 9b02 	ldrsh.w	r9, [r3], #2
 80208c8:	fb11 ee04 	smlabb	lr, r1, r4, lr
 80208cc:	fb11 5507 	smlabb	r5, r1, r7, r5
 80208d0:	fb12 ee08 	smlabb	lr, r2, r8, lr
 80208d4:	fb12 5509 	smlabb	r5, r2, r9, r5
 80208d8:	f933 4b02 	ldrsh.w	r4, [r3], #2
 80208dc:	f933 7b02 	ldrsh.w	r7, [r3], #2
 80208e0:	fb1a ee04 	smlabb	lr, sl, r4, lr
 80208e4:	fb1a 5507 	smlabb	r5, sl, r7, r5
 80208e8:	eba0 004c 	sub.w	r0, r0, ip, lsl #1
 80208ec:	f100 0001 	add.w	r0, r0, #1
 80208f0:	f1bb 0b01 	subs.w	fp, fp, #1
 80208f4:	dc9f      	bgt.n	8020836 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x836>
 80208f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80208f8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80208fa:	eb01 0203 	add.w	r2, r1, r3
 80208fe:	f8dd a000 	ldr.w	sl, [sp]
 8020902:	9c04      	ldr	r4, [sp, #16]
 8020904:	9b02      	ldr	r3, [sp, #8]
 8020906:	9806      	ldr	r0, [sp, #24]
 8020908:	2800      	cmp	r0, #0
 802090a:	f040 8118 	bne.w	8020b3e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb3e>
 802090e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8020912:	fb5e 4e0a 	smmla	lr, lr, sl, r4
 8020916:	fa4e fe03 	asr.w	lr, lr, r3
 802091a:	f30e 0e07 	ssat	lr, #8, lr
 802091e:	f881 e000 	strb.w	lr, [r1]
 8020922:	f8dd a004 	ldr.w	sl, [sp, #4]
 8020926:	9c05      	ldr	r4, [sp, #20]
 8020928:	9b03      	ldr	r3, [sp, #12]
 802092a:	9807      	ldr	r0, [sp, #28]
 802092c:	2800      	cmp	r0, #0
 802092e:	f040 80ec 	bne.w	8020b0a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb0a>
 8020932:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8020936:	fb55 450a 	smmla	r5, r5, sl, r4
 802093a:	fa45 f503 	asr.w	r5, r5, r3
 802093e:	f305 0507 	ssat	r5, #8, r5
 8020942:	7015      	strb	r5, [r2, #0]
 8020944:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020946:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 8020948:	2b00      	cmp	r3, #0
 802094a:	bf14      	ite	ne
 802094c:	2303      	movne	r3, #3
 802094e:	2301      	moveq	r3, #1
 8020950:	2d00      	cmp	r5, #0
 8020952:	bf08      	it	eq
 8020954:	9b2f      	ldreq	r3, [sp, #188]	@ 0xbc
 8020956:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8020958:	441a      	add	r2, r3
 802095a:	9215      	str	r2, [sp, #84]	@ 0x54
 802095c:	e585      	b.n	802046a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x46a>
 802095e:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8020960:	f04f 0300 	mov.w	r3, #0
 8020964:	461a      	mov	r2, r3
 8020966:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8020968:	b198      	cbz	r0, 8020992 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x992>
 802096a:	e8b1 1e00 	ldmia.w	r1!, {r9, sl, fp, ip}
 802096e:	fa02 f289 	sxtah	r2, r2, r9
 8020972:	fa02 f2a9 	sxtah	r2, r2, r9, ror #16
 8020976:	fa02 f28a 	sxtah	r2, r2, sl
 802097a:	fa02 f2aa 	sxtah	r2, r2, sl, ror #16
 802097e:	fa03 f38b 	sxtah	r3, r3, fp
 8020982:	fa03 f3ab 	sxtah	r3, r3, fp, ror #16
 8020986:	fa03 f38c 	sxtah	r3, r3, ip
 802098a:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 802098e:	3801      	subs	r0, #1
 8020990:	d1eb      	bne.n	802096a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x96a>
 8020992:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8020994:	b138      	cbz	r0, 80209a6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9a6>
 8020996:	f851 4b04 	ldr.w	r4, [r1], #4
 802099a:	fa02 f284 	sxtah	r2, r2, r4
 802099e:	fa03 f3a4 	sxtah	r3, r3, r4, ror #16
 80209a2:	3801      	subs	r0, #1
 80209a4:	d1f7      	bne.n	8020996 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x996>
 80209a6:	f1c2 0200 	rsb	r2, r2, #0
 80209aa:	f1c3 0300 	rsb	r3, r3, #0
 80209ae:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80209b0:	fb01 f202 	mul.w	r2, r1, r2
 80209b4:	fb01 f003 	mul.w	r0, r1, r3
 80209b8:	f7ff bbad 	b.w	8020116 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x116>
 80209bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80209be:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 80209c0:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 80209c2:	ea5f 0ba6 	movs.w	fp, r6, asr #2
 80209c6:	d019      	beq.n	80209fc <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9fc>
 80209c8:	f04f 0a09 	mov.w	sl, #9
 80209cc:	6805      	ldr	r5, [r0, #0]
 80209ce:	f850 8004 	ldr.w	r8, [r0, r4]
 80209d2:	fa2f f795 	sxtb16	r7, r5, ror #8
 80209d6:	fa2f f585 	sxtb16	r5, r5
 80209da:	fa2f f998 	sxtb16	r9, r8, ror #8
 80209de:	fa2f f888 	sxtb16	r8, r8
 80209e2:	e8a2 03a0 	stmia.w	r2!, {r5, r7, r8, r9}
 80209e6:	4430      	add	r0, r6
 80209e8:	f1ba 0a01 	subs.w	sl, sl, #1
 80209ec:	dcee      	bgt.n	80209cc <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9cc>
 80209ee:	eba0 0004 	sub.w	r0, r0, r4
 80209f2:	f100 0004 	add.w	r0, r0, #4
 80209f6:	f1bb 0b01 	subs.w	fp, fp, #1
 80209fa:	dce5      	bgt.n	80209c8 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x9c8>
 80209fc:	f016 0b03 	ands.w	fp, r6, #3
 8020a00:	f43f ab83 	beq.w	802010a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x10a>
 8020a04:	f04f 0a09 	mov.w	sl, #9
 8020a08:	f990 5000 	ldrsb.w	r5, [r0]
 8020a0c:	f910 8004 	ldrsb.w	r8, [r0, r4]
 8020a10:	f822 5b02 	strh.w	r5, [r2], #2
 8020a14:	f822 8b02 	strh.w	r8, [r2], #2
 8020a18:	4430      	add	r0, r6
 8020a1a:	f1ba 0a01 	subs.w	sl, sl, #1
 8020a1e:	dcf3      	bgt.n	8020a08 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa08>
 8020a20:	eba0 0004 	sub.w	r0, r0, r4
 8020a24:	f100 0001 	add.w	r0, r0, #1
 8020a28:	f1bb 0b01 	subs.w	fp, fp, #1
 8020a2c:	dcea      	bgt.n	8020a04 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa04>
 8020a2e:	f7ff bb6c 	b.w	802010a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x10a>
 8020a32:	f11c 0c01 	adds.w	ip, ip, #1
 8020a36:	d014      	beq.n	8020a62 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xa62>
 8020a38:	f04f 0c01 	mov.w	ip, #1
 8020a3c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8020a40:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8020a44:	fb52 c20a 	smmla	r2, r2, sl, ip
 8020a48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8020a4c:	fa42 f20b 	asr.w	r2, r2, fp
 8020a50:	4472      	add	r2, lr
 8020a52:	fb50 c00a 	smmla	r0, r0, sl, ip
 8020a56:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8020a5a:	fa40 f00b 	asr.w	r0, r0, fp
 8020a5e:	4470      	add	r0, lr
 8020a60:	e4c6      	b.n	80203f0 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3f0>
 8020a62:	f1cb 0c01 	rsb	ip, fp, #1
 8020a66:	fa02 f20c 	lsl.w	r2, r2, ip
 8020a6a:	f302 021f 	ssat	r2, #32, r2
 8020a6e:	fb52 f21a 	smmulr	r2, r2, sl
 8020a72:	fa00 f00c 	lsl.w	r0, r0, ip
 8020a76:	f300 001f 	ssat	r0, #32, r0
 8020a7a:	fb50 f01a 	smmulr	r0, r0, sl
 8020a7e:	4472      	add	r2, lr
 8020a80:	4470      	add	r0, lr
 8020a82:	e4b5      	b.n	80203f0 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x3f0>
 8020a84:	f11c 0c01 	adds.w	ip, ip, #1
 8020a88:	d014      	beq.n	8020ab4 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xab4>
 8020a8a:	f04f 0c01 	mov.w	ip, #1
 8020a8e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8020a92:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8020a96:	fb53 c30a 	smmla	r3, r3, sl, ip
 8020a9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020a9e:	fa43 f30b 	asr.w	r3, r3, fp
 8020aa2:	4473      	add	r3, lr
 8020aa4:	fb51 c10a 	smmla	r1, r1, sl, ip
 8020aa8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020aac:	fa41 f10b 	asr.w	r1, r1, fp
 8020ab0:	4471      	add	r1, lr
 8020ab2:	e4bb      	b.n	802042c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x42c>
 8020ab4:	f1cb 0c01 	rsb	ip, fp, #1
 8020ab8:	fa03 f30c 	lsl.w	r3, r3, ip
 8020abc:	f303 031f 	ssat	r3, #32, r3
 8020ac0:	fb53 f31a 	smmulr	r3, r3, sl
 8020ac4:	fa01 f10c 	lsl.w	r1, r1, ip
 8020ac8:	f301 011f 	ssat	r1, #32, r1
 8020acc:	fb51 f11a 	smmulr	r1, r1, sl
 8020ad0:	4473      	add	r3, lr
 8020ad2:	4471      	add	r1, lr
 8020ad4:	e4aa      	b.n	802042c <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x42c>
 8020ad6:	1c53      	adds	r3, r2, #1
 8020ad8:	d00d      	beq.n	8020af6 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xaf6>
 8020ada:	f04f 0301 	mov.w	r3, #1
 8020ade:	fa03 f30b 	lsl.w	r3, r3, fp
 8020ae2:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8020ae6:	fb51 3104 	smmla	r1, r1, r4, r3
 8020aea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020aee:	fa41 f10b 	asr.w	r1, r1, fp
 8020af2:	4401      	add	r1, r0
 8020af4:	e544      	b.n	8020580 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x580>
 8020af6:	f1cb 0301 	rsb	r3, fp, #1
 8020afa:	fa01 f103 	lsl.w	r1, r1, r3
 8020afe:	f301 011f 	ssat	r1, #32, r1
 8020b02:	fb51 f114 	smmulr	r1, r1, r4
 8020b06:	4401      	add	r1, r0
 8020b08:	e53a      	b.n	8020580 <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x580>
 8020b0a:	3001      	adds	r0, #1
 8020b0c:	d00d      	beq.n	8020b2a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb2a>
 8020b0e:	f04f 0001 	mov.w	r0, #1
 8020b12:	fa00 f003 	lsl.w	r0, r0, r3
 8020b16:	ea4f 00a0 	mov.w	r0, r0, asr #2
 8020b1a:	fb55 050a 	smmla	r5, r5, sl, r0
 8020b1e:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8020b22:	fa45 f503 	asr.w	r5, r5, r3
 8020b26:	4425      	add	r5, r4
 8020b28:	e709      	b.n	802093e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x93e>
 8020b2a:	f1c3 0001 	rsb	r0, r3, #1
 8020b2e:	fa05 f500 	lsl.w	r5, r5, r0
 8020b32:	f305 051f 	ssat	r5, #32, r5
 8020b36:	fb55 f51a 	smmulr	r5, r5, sl
 8020b3a:	4425      	add	r5, r4
 8020b3c:	e6ff      	b.n	802093e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x93e>
 8020b3e:	3001      	adds	r0, #1
 8020b40:	d00d      	beq.n	8020b5e <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0xb5e>
 8020b42:	f04f 0001 	mov.w	r0, #1
 8020b46:	fa00 f003 	lsl.w	r0, r0, r3
 8020b4a:	ea4f 00a0 	mov.w	r0, r0, asr #2
 8020b4e:	fb5e 0e0a 	smmla	lr, lr, sl, r0
 8020b52:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8020b56:	fa4e fe03 	asr.w	lr, lr, r3
 8020b5a:	44a6      	add	lr, r4
 8020b5c:	e6dd      	b.n	802091a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x91a>
 8020b5e:	f1c3 0001 	rsb	r0, r3, #1
 8020b62:	fa0e fe00 	lsl.w	lr, lr, r0
 8020b66:	f30e 0e1f 	ssat	lr, #32, lr
 8020b6a:	fb5e fe1a 	smmulr	lr, lr, sl
 8020b6e:	44a6      	add	lr, r4
 8020b70:	e6d3      	b.n	802091a <st_sssa8_ch_nn_mat_mult_deep_conv2d_3x3+0x91a>
 8020b72:	bf00      	nop

08020b74 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8020b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b78:	b086      	sub	sp, #24
 8020b7a:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 8020b7e:	9100      	str	r1, [sp, #0]
 8020b80:	9203      	str	r2, [sp, #12]
 8020b82:	2f00      	cmp	r7, #0
 8020b84:	9305      	str	r3, [sp, #20]
 8020b86:	bf18      	it	ne
 8020b88:	2301      	movne	r3, #1
 8020b8a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020b8c:	fb04 3303 	mla	r3, r4, r3, r3
 8020b90:	9304      	str	r3, [sp, #16]
 8020b92:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020b94:	bf14      	ite	ne
 8020b96:	462f      	movne	r7, r5
 8020b98:	2701      	moveq	r7, #1
 8020b9a:	9701      	str	r7, [sp, #4]
 8020b9c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8020ba0:	085b      	lsrs	r3, r3, #1
 8020ba2:	f000 809f 	beq.w	8020ce4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x170>
 8020ba6:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 8020baa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020bb0:	9302      	str	r3, [sp, #8]
 8020bb2:	f8dd e048 	ldr.w	lr, [sp, #72]	@ 0x48
 8020bb6:	9f03      	ldr	r7, [sp, #12]
 8020bb8:	ea5f 089e 	movs.w	r8, lr, lsr #2
 8020bbc:	f8dd c000 	ldr.w	ip, [sp]
 8020bc0:	f857 6b04 	ldr.w	r6, [r7], #4
 8020bc4:	f857 3b04 	ldr.w	r3, [r7], #4
 8020bc8:	9703      	str	r7, [sp, #12]
 8020bca:	461a      	mov	r2, r3
 8020bcc:	4631      	mov	r1, r6
 8020bce:	d022      	beq.n	8020c16 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa2>
 8020bd0:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 8020bd4:	f85c 9b04 	ldr.w	r9, [ip], #4
 8020bd8:	f850 ab04 	ldr.w	sl, [r0], #4
 8020bdc:	fb2a 6609 	smlad	r6, sl, r9, r6
 8020be0:	f850 5b04 	ldr.w	r5, [r0], #4
 8020be4:	fb2a 1107 	smlad	r1, sl, r7, r1
 8020be8:	f850 ab04 	ldr.w	sl, [r0], #4
 8020bec:	fb25 2207 	smlad	r2, r5, r7, r2
 8020bf0:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 8020bf4:	fb25 3309 	smlad	r3, r5, r9, r3
 8020bf8:	f85c 9b04 	ldr.w	r9, [ip], #4
 8020bfc:	fb2a 6609 	smlad	r6, sl, r9, r6
 8020c00:	fb2a 1107 	smlad	r1, sl, r7, r1
 8020c04:	f850 5b04 	ldr.w	r5, [r0], #4
 8020c08:	fb25 3309 	smlad	r3, r5, r9, r3
 8020c0c:	f1b8 0801 	subs.w	r8, r8, #1
 8020c10:	fb25 2207 	smlad	r2, r5, r7, r2
 8020c14:	d1dc      	bne.n	8020bd0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c>
 8020c16:	f00e 0703 	and.w	r7, lr, #3
 8020c1a:	b18f      	cbz	r7, 8020c40 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xcc>
 8020c1c:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
 8020c20:	f93c ab02 	ldrsh.w	sl, [ip], #2
 8020c24:	f930 5b02 	ldrsh.w	r5, [r0], #2
 8020c28:	fb0a 6605 	mla	r6, sl, r5, r6
 8020c2c:	f930 9b02 	ldrsh.w	r9, [r0], #2
 8020c30:	fb09 330a 	mla	r3, r9, sl, r3
 8020c34:	fb08 1105 	mla	r1, r8, r5, r1
 8020c38:	3f01      	subs	r7, #1
 8020c3a:	fb09 2208 	mla	r2, r9, r8, r2
 8020c3e:	dced      	bgt.n	8020c1c <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 8020c40:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8020c44:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8020c46:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 8020c4a:	f857 cb04 	ldr.w	ip, [r7], #4
 8020c4e:	f85b 5b04 	ldr.w	r5, [fp], #4
 8020c52:	f1c4 0915 	rsb	r9, r4, #21
 8020c56:	ea99 0904 	eors.w	r9, r9, r4
 8020c5a:	f340 80c8 	ble.w	8020dee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x27a>
 8020c5e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8020c62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020c66:	fb56 c605 	smmla	r6, r6, r5, ip
 8020c6a:	fb51 c105 	smmla	r1, r1, r5, ip
 8020c6e:	fa46 f604 	asr.w	r6, r6, r4
 8020c72:	fa41 f104 	asr.w	r1, r1, r4
 8020c76:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 8020c7a:	f857 cb04 	ldr.w	ip, [r7], #4
 8020c7e:	f85b 5b04 	ldr.w	r5, [fp], #4
 8020c82:	f1c4 0915 	rsb	r9, r4, #21
 8020c86:	ea99 0904 	eors.w	r9, r9, r4
 8020c8a:	f340 8099 	ble.w	8020dc0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24c>
 8020c8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020c92:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8020c96:	fb53 c305 	smmla	r3, r3, r5, ip
 8020c9a:	fb52 c205 	smmla	r2, r2, r5, ip
 8020c9e:	fa43 f304 	asr.w	r3, r3, r4
 8020ca2:	fa42 f204 	asr.w	r2, r2, r4
 8020ca6:	f306 0607 	ssat	r6, #8, r6
 8020caa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8020cae:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8020cb0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8020cb4:	7026      	strb	r6, [r4, #0]
 8020cb6:	44a0      	add	r8, r4
 8020cb8:	f301 0107 	ssat	r1, #8, r1
 8020cbc:	f888 1000 	strb.w	r1, [r8]
 8020cc0:	f303 0307 	ssat	r3, #8, r3
 8020cc4:	f804 3009 	strb.w	r3, [r4, r9]
 8020cc8:	f302 0207 	ssat	r2, #8, r2
 8020ccc:	f808 2009 	strb.w	r2, [r8, r9]
 8020cd0:	eb04 0249 	add.w	r2, r4, r9, lsl #1
 8020cd4:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020cd6:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
 8020cda:	9c02      	ldr	r4, [sp, #8]
 8020cdc:	9715      	str	r7, [sp, #84]	@ 0x54
 8020cde:	45a2      	cmp	sl, r4
 8020ce0:	f47f af67 	bne.w	8020bb2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e>
 8020ce4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020ce6:	f013 0301 	ands.w	r3, r3, #1
 8020cea:	d054      	beq.n	8020d96 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x222>
 8020cec:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 8020cf0:	9b03      	ldr	r3, [sp, #12]
 8020cf2:	f8dd c000 	ldr.w	ip, [sp]
 8020cf6:	6819      	ldr	r1, [r3, #0]
 8020cf8:	ea5f 079e 	movs.w	r7, lr, lsr #2
 8020cfc:	eb0c 044e 	add.w	r4, ip, lr, lsl #1
 8020d00:	460e      	mov	r6, r1
 8020d02:	d015      	beq.n	8020d30 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 8020d04:	f85c 501e 	ldr.w	r5, [ip, lr, lsl #1]
 8020d08:	f85c 8b04 	ldr.w	r8, [ip], #4
 8020d0c:	f850 ab04 	ldr.w	sl, [r0], #4
 8020d10:	f850 3b04 	ldr.w	r3, [r0], #4
 8020d14:	fb2a 6608 	smlad	r6, sl, r8, r6
 8020d18:	fb2a 1105 	smlad	r1, sl, r5, r1
 8020d1c:	f85c a01e 	ldr.w	sl, [ip, lr, lsl #1]
 8020d20:	f85c 8b04 	ldr.w	r8, [ip], #4
 8020d24:	fb23 6608 	smlad	r6, r3, r8, r6
 8020d28:	fb23 110a 	smlad	r1, r3, sl, r1
 8020d2c:	3f01      	subs	r7, #1
 8020d2e:	d1e9      	bne.n	8020d04 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x190>
 8020d30:	f01e 0703 	ands.w	r7, lr, #3
 8020d34:	d00b      	beq.n	8020d4e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 8020d36:	f83c 301e 	ldrh.w	r3, [ip, lr, lsl #1]
 8020d3a:	f83c 9b02 	ldrh.w	r9, [ip], #2
 8020d3e:	f930 ab02 	ldrsh.w	sl, [r0], #2
 8020d42:	fb19 660a 	smlabb	r6, r9, sl, r6
 8020d46:	3f01      	subs	r7, #1
 8020d48:	fb13 110a 	smlabb	r1, r3, sl, r1
 8020d4c:	dcf3      	bgt.n	8020d36 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c2>
 8020d4e:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8020d52:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8020d54:	f9ba 4000 	ldrsh.w	r4, [sl]
 8020d58:	f8d7 c000 	ldr.w	ip, [r7]
 8020d5c:	f8db 5000 	ldr.w	r5, [fp]
 8020d60:	f1c4 0915 	rsb	r9, r4, #21
 8020d64:	ea99 0904 	eors.w	r9, r9, r4
 8020d68:	dd58      	ble.n	8020e1c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2a8>
 8020d6a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8020d6e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020d72:	fb56 c605 	smmla	r6, r6, r5, ip
 8020d76:	fb51 c105 	smmla	r1, r1, r5, ip
 8020d7a:	fa46 f604 	asr.w	r6, r6, r4
 8020d7e:	fa41 f104 	asr.w	r1, r1, r4
 8020d82:	f306 0607 	ssat	r6, #8, r6
 8020d86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020d88:	9c04      	ldr	r4, [sp, #16]
 8020d8a:	7016      	strb	r6, [r2, #0]
 8020d8c:	f301 0107 	ssat	r1, #8, r1
 8020d90:	5511      	strb	r1, [r2, r4]
 8020d92:	9b01      	ldr	r3, [sp, #4]
 8020d94:	441a      	add	r2, r3
 8020d96:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8020d98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020d9a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020d9c:	b133      	cbz	r3, 8020dac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 8020d9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020da0:	f104 0002 	add.w	r0, r4, #2
 8020da4:	fb03 0011 	mls	r0, r3, r1, r0
 8020da8:	4410      	add	r0, r2
 8020daa:	e006      	b.n	8020dba <st_sssa8_ch_nn_mat_mult_kernel_opt+0x246>
 8020dac:	eba2 0001 	sub.w	r0, r2, r1
 8020db0:	9a05      	ldr	r2, [sp, #20]
 8020db2:	f104 0402 	add.w	r4, r4, #2
 8020db6:	fb02 0004 	mla	r0, r2, r4, r0
 8020dba:	b006      	add	sp, #24
 8020dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dc0:	2c00      	cmp	r4, #0
 8020dc2:	dd42      	ble.n	8020e4a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8020dc4:	f04f 0901 	mov.w	r9, #1
 8020dc8:	fa09 f904 	lsl.w	r9, r9, r4
 8020dcc:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8020dd0:	fb53 9305 	smmla	r3, r3, r5, r9
 8020dd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020dd8:	fa43 f304 	asr.w	r3, r3, r4
 8020ddc:	4463      	add	r3, ip
 8020dde:	fb52 9205 	smmla	r2, r2, r5, r9
 8020de2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8020de6:	fa42 f204 	asr.w	r2, r2, r4
 8020dea:	4462      	add	r2, ip
 8020dec:	e75b      	b.n	8020ca6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 8020dee:	2c00      	cmp	r4, #0
 8020df0:	dd3c      	ble.n	8020e6c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2f8>
 8020df2:	f04f 0901 	mov.w	r9, #1
 8020df6:	fa09 f904 	lsl.w	r9, r9, r4
 8020dfa:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8020dfe:	fb56 9605 	smmla	r6, r6, r5, r9
 8020e02:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8020e06:	fa46 f604 	asr.w	r6, r6, r4
 8020e0a:	4466      	add	r6, ip
 8020e0c:	fb51 9105 	smmla	r1, r1, r5, r9
 8020e10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020e14:	fa41 f104 	asr.w	r1, r1, r4
 8020e18:	4461      	add	r1, ip
 8020e1a:	e72c      	b.n	8020c76 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 8020e1c:	2c00      	cmp	r4, #0
 8020e1e:	dd36      	ble.n	8020e8e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 8020e20:	f04f 0901 	mov.w	r9, #1
 8020e24:	fa09 f904 	lsl.w	r9, r9, r4
 8020e28:	ea4f 09a9 	mov.w	r9, r9, asr #2
 8020e2c:	fb56 9605 	smmla	r6, r6, r5, r9
 8020e30:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8020e34:	fa46 f604 	asr.w	r6, r6, r4
 8020e38:	4466      	add	r6, ip
 8020e3a:	fb51 9105 	smmla	r1, r1, r5, r9
 8020e3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8020e42:	fa41 f104 	asr.w	r1, r1, r4
 8020e46:	4461      	add	r1, ip
 8020e48:	e79b      	b.n	8020d82 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
 8020e4a:	f1c4 0901 	rsb	r9, r4, #1
 8020e4e:	fa03 f309 	lsl.w	r3, r3, r9
 8020e52:	f303 031f 	ssat	r3, #32, r3
 8020e56:	fb53 f315 	smmulr	r3, r3, r5
 8020e5a:	fa02 f209 	lsl.w	r2, r2, r9
 8020e5e:	f302 021f 	ssat	r2, #32, r2
 8020e62:	fb52 f215 	smmulr	r2, r2, r5
 8020e66:	4463      	add	r3, ip
 8020e68:	4462      	add	r2, ip
 8020e6a:	e71c      	b.n	8020ca6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 8020e6c:	f1c4 0901 	rsb	r9, r4, #1
 8020e70:	fa06 f609 	lsl.w	r6, r6, r9
 8020e74:	f306 061f 	ssat	r6, #32, r6
 8020e78:	fb56 f615 	smmulr	r6, r6, r5
 8020e7c:	fa01 f109 	lsl.w	r1, r1, r9
 8020e80:	f301 011f 	ssat	r1, #32, r1
 8020e84:	fb51 f115 	smmulr	r1, r1, r5
 8020e88:	4466      	add	r6, ip
 8020e8a:	4461      	add	r1, ip
 8020e8c:	e6f3      	b.n	8020c76 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 8020e8e:	f1c4 0901 	rsb	r9, r4, #1
 8020e92:	fa06 f609 	lsl.w	r6, r6, r9
 8020e96:	f306 061f 	ssat	r6, #32, r6
 8020e9a:	fb56 f615 	smmulr	r6, r6, r5
 8020e9e:	fa01 f109 	lsl.w	r1, r1, r9
 8020ea2:	f301 011f 	ssat	r1, #32, r1
 8020ea6:	fb51 f115 	smmulr	r1, r1, r5
 8020eaa:	4466      	add	r6, ip
 8020eac:	4461      	add	r1, ip
 8020eae:	e768      	b.n	8020d82 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>

08020eb0 <ai_array_to_buffer_fmt>:
 8020eb0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8020eb4:	2b02      	cmp	r3, #2
 8020eb6:	d055      	beq.n	8020f64 <ai_array_to_buffer_fmt+0xb4>
 8020eb8:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8020ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8020f70 <ai_array_to_buffer_fmt+0xc0>)
 8020ebe:	4293      	cmp	r3, r2
 8020ec0:	d010      	beq.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020ec2:	dc21      	bgt.n	8020f08 <ai_array_to_buffer_fmt+0x58>
 8020ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8020f74 <ai_array_to_buffer_fmt+0xc4>)
 8020ec6:	4293      	cmp	r3, r2
 8020ec8:	d00c      	beq.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020eca:	dd0f      	ble.n	8020eec <ai_array_to_buffer_fmt+0x3c>
 8020ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8020f78 <ai_array_to_buffer_fmt+0xc8>)
 8020ece:	4293      	cmp	r3, r2
 8020ed0:	d008      	beq.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020ed2:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8020ed6:	4293      	cmp	r3, r2
 8020ed8:	d004      	beq.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020eda:	4a28      	ldr	r2, [pc, #160]	@ (8020f7c <ai_array_to_buffer_fmt+0xcc>)
 8020edc:	4293      	cmp	r3, r2
 8020ede:	bf0c      	ite	eq
 8020ee0:	4613      	moveq	r3, r2
 8020ee2:	2340      	movne	r3, #64	@ 0x40
 8020ee4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8020ee8:	4318      	orrs	r0, r3
 8020eea:	4770      	bx	lr
 8020eec:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8020ef0:	4293      	cmp	r3, r2
 8020ef2:	d0f7      	beq.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020ef4:	dd2c      	ble.n	8020f50 <ai_array_to_buffer_fmt+0xa0>
 8020ef6:	4a22      	ldr	r2, [pc, #136]	@ (8020f80 <ai_array_to_buffer_fmt+0xd0>)
 8020ef8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8020efc:	4293      	cmp	r3, r2
 8020efe:	bf0c      	ite	eq
 8020f00:	4613      	moveq	r3, r2
 8020f02:	2340      	movne	r3, #64	@ 0x40
 8020f04:	4318      	orrs	r0, r3
 8020f06:	4770      	bx	lr
 8020f08:	4a1e      	ldr	r2, [pc, #120]	@ (8020f84 <ai_array_to_buffer_fmt+0xd4>)
 8020f0a:	4293      	cmp	r3, r2
 8020f0c:	d0ea      	beq.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020f0e:	dd10      	ble.n	8020f32 <ai_array_to_buffer_fmt+0x82>
 8020f10:	4a1d      	ldr	r2, [pc, #116]	@ (8020f88 <ai_array_to_buffer_fmt+0xd8>)
 8020f12:	4293      	cmp	r3, r2
 8020f14:	d0e6      	beq.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020f16:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8020f1a:	4293      	cmp	r3, r2
 8020f1c:	d0e2      	beq.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020f1e:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8020f22:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8020f26:	4293      	cmp	r3, r2
 8020f28:	bf0c      	ite	eq
 8020f2a:	4613      	moveq	r3, r2
 8020f2c:	2340      	movne	r3, #64	@ 0x40
 8020f2e:	4318      	orrs	r0, r3
 8020f30:	4770      	bx	lr
 8020f32:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8020f36:	4293      	cmp	r3, r2
 8020f38:	d0d4      	beq.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020f3a:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8020f3e:	4293      	cmp	r3, r2
 8020f40:	d0d0      	beq.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020f42:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8020f46:	4293      	cmp	r3, r2
 8020f48:	bf0c      	ite	eq
 8020f4a:	4613      	moveq	r3, r2
 8020f4c:	2340      	movne	r3, #64	@ 0x40
 8020f4e:	e7c9      	b.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020f50:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8020f54:	4293      	cmp	r3, r2
 8020f56:	d0c5      	beq.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020f58:	3280      	adds	r2, #128	@ 0x80
 8020f5a:	4293      	cmp	r3, r2
 8020f5c:	bf0c      	ite	eq
 8020f5e:	4613      	moveq	r3, r2
 8020f60:	2340      	movne	r3, #64	@ 0x40
 8020f62:	e7bf      	b.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020f64:	4b09      	ldr	r3, [pc, #36]	@ (8020f8c <ai_array_to_buffer_fmt+0xdc>)
 8020f66:	4003      	ands	r3, r0
 8020f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8020f6c:	e7ba      	b.n	8020ee4 <ai_array_to_buffer_fmt+0x34>
 8020f6e:	bf00      	nop
 8020f70:	00821040 	.word	0x00821040
 8020f74:	00040840 	.word	0x00040840
 8020f78:	00041040 	.word	0x00041040
 8020f7c:	0004084f 	.word	0x0004084f
 8020f80:	00040447 	.word	0x00040447
 8020f84:	00840447 	.word	0x00840447
 8020f88:	0084084f 	.word	0x0084084f
 8020f8c:	00803fff 	.word	0x00803fff

08020f90 <ai_array_get_byte_size>:
 8020f90:	b321      	cbz	r1, 8020fdc <ai_array_get_byte_size+0x4c>
 8020f92:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8020f96:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8020f9a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8020f9e:	fb03 f101 	mul.w	r1, r3, r1
 8020fa2:	b500      	push	{lr}
 8020fa4:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 8020fa8:	3107      	adds	r1, #7
 8020faa:	11c0      	asrs	r0, r0, #7
 8020fac:	fa42 f20e 	asr.w	r2, r2, lr
 8020fb0:	f021 0107 	bic.w	r1, r1, #7
 8020fb4:	07d2      	lsls	r2, r2, #31
 8020fb6:	fa21 f10c 	lsr.w	r1, r1, ip
 8020fba:	d505      	bpl.n	8020fc8 <ai_array_get_byte_size+0x38>
 8020fbc:	2300      	movs	r3, #0
 8020fbe:	3107      	adds	r1, #7
 8020fc0:	4419      	add	r1, r3
 8020fc2:	08c8      	lsrs	r0, r1, #3
 8020fc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8020fc8:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8020fcc:	3107      	adds	r1, #7
 8020fce:	fa40 f00c 	asr.w	r0, r0, ip
 8020fd2:	4083      	lsls	r3, r0
 8020fd4:	4419      	add	r1, r3
 8020fd6:	08c8      	lsrs	r0, r1, #3
 8020fd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8020fdc:	4608      	mov	r0, r1
 8020fde:	4770      	bx	lr

08020fe0 <ai_array_get_data_byte_size>:
 8020fe0:	b169      	cbz	r1, 8020ffe <ai_array_get_data_byte_size+0x1e>
 8020fe2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8020fe6:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8020fea:	fb03 f101 	mul.w	r1, r3, r1
 8020fee:	1dcb      	adds	r3, r1, #7
 8020ff0:	f023 0307 	bic.w	r3, r3, #7
 8020ff4:	fa23 f000 	lsr.w	r0, r3, r0
 8020ff8:	3007      	adds	r0, #7
 8020ffa:	08c0      	lsrs	r0, r0, #3
 8020ffc:	4770      	bx	lr
 8020ffe:	4608      	mov	r0, r1
 8021000:	4770      	bx	lr
 8021002:	bf00      	nop

08021004 <ai_version_get>:
 8021004:	0212      	lsls	r2, r2, #8
 8021006:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802100a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 802100e:	4770      	bx	lr

08021010 <get_tensor_byte_size>:
 8021010:	b430      	push	{r4, r5}
 8021012:	6985      	ldr	r5, [r0, #24]
 8021014:	68c4      	ldr	r4, [r0, #12]
 8021016:	6941      	ldr	r1, [r0, #20]
 8021018:	4b06      	ldr	r3, [pc, #24]	@ (8021034 <get_tensor_byte_size+0x24>)
 802101a:	6828      	ldr	r0, [r5, #0]
 802101c:	4a06      	ldr	r2, [pc, #24]	@ (8021038 <get_tensor_byte_size+0x28>)
 802101e:	4003      	ands	r3, r0
 8021020:	68c9      	ldr	r1, [r1, #12]
 8021022:	68e0      	ldr	r0, [r4, #12]
 8021024:	4293      	cmp	r3, r2
 8021026:	fb01 f000 	mul.w	r0, r1, r0
 802102a:	d101      	bne.n	8021030 <get_tensor_byte_size+0x20>
 802102c:	3007      	adds	r0, #7
 802102e:	08c0      	lsrs	r0, r0, #3
 8021030:	bc30      	pop	{r4, r5}
 8021032:	4770      	bx	lr
 8021034:	017fffff 	.word	0x017fffff
 8021038:	000400c0 	.word	0x000400c0

0802103c <core_tensor_clone>:
 802103c:	680b      	ldr	r3, [r1, #0]
 802103e:	6882      	ldr	r2, [r0, #8]
 8021040:	6003      	str	r3, [r0, #0]
 8021042:	684b      	ldr	r3, [r1, #4]
 8021044:	6043      	str	r3, [r0, #4]
 8021046:	698b      	ldr	r3, [r1, #24]
 8021048:	6183      	str	r3, [r0, #24]
 802104a:	688b      	ldr	r3, [r1, #8]
 802104c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8021050:	f363 221f 	bfi	r2, r3, #8, #24
 8021054:	b410      	push	{r4}
 8021056:	6082      	str	r2, [r0, #8]
 8021058:	b15b      	cbz	r3, 8021072 <core_tensor_clone+0x36>
 802105a:	2300      	movs	r3, #0
 802105c:	68cc      	ldr	r4, [r1, #12]
 802105e:	68c2      	ldr	r2, [r0, #12]
 8021060:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8021064:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8021068:	3301      	adds	r3, #1
 802106a:	6882      	ldr	r2, [r0, #8]
 802106c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8021070:	d3f4      	bcc.n	802105c <core_tensor_clone+0x20>
 8021072:	690b      	ldr	r3, [r1, #16]
 8021074:	6902      	ldr	r2, [r0, #16]
 8021076:	f3c3 2317 	ubfx	r3, r3, #8, #24
 802107a:	f363 221f 	bfi	r2, r3, #8, #24
 802107e:	6102      	str	r2, [r0, #16]
 8021080:	b15b      	cbz	r3, 802109a <core_tensor_clone+0x5e>
 8021082:	2300      	movs	r3, #0
 8021084:	694c      	ldr	r4, [r1, #20]
 8021086:	6942      	ldr	r2, [r0, #20]
 8021088:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 802108c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8021090:	3301      	adds	r3, #1
 8021092:	6902      	ldr	r2, [r0, #16]
 8021094:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8021098:	d3f4      	bcc.n	8021084 <core_tensor_clone+0x48>
 802109a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802109e:	4770      	bx	lr

080210a0 <core_array_clone>:
 80210a0:	4684      	mov	ip, r0
 80210a2:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80210a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80210a8:	4770      	bx	lr
 80210aa:	bf00      	nop

080210ac <_lite_kernel_nl_softmax_is8os8>:
 80210ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210b0:	b08f      	sub	sp, #60	@ 0x3c
 80210b2:	461f      	mov	r7, r3
 80210b4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80210b6:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 80210ba:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 80210be:	920c      	str	r2, [sp, #48]	@ 0x30
 80210c0:	e9cd 1009 	strd	r1, r0, [sp, #36]	@ 0x24
 80210c4:	f280 8408 	bge.w	80218d8 <_lite_kernel_nl_softmax_is8os8+0x82c>
 80210c8:	4613      	mov	r3, r2
 80210ca:	f44f 7980 	mov.w	r9, #256	@ 0x100
 80210ce:	fb07 f303 	mul.w	r3, r7, r3
 80210d2:	2b01      	cmp	r3, #1
 80210d4:	f240 840c 	bls.w	80218f0 <_lite_kernel_nl_softmax_is8os8+0x844>
 80210d8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80210da:	f04f 0b00 	mov.w	fp, #0
 80210de:	f8df e47c 	ldr.w	lr, [pc, #1148]	@ 802155c <_lite_kernel_nl_softmax_is8os8+0x4b0>
 80210e2:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 80210e6:	3b04      	subs	r3, #4
 80210e8:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 80210ec:	9301      	str	r3, [sp, #4]
 80210ee:	e9cd 9702 	strd	r9, r7, [sp, #8]
 80210f2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80210f4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80210f6:	fa0b f203 	lsl.w	r2, fp, r3
 80210fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80210fc:	4252      	negs	r2, r2
 80210fe:	4053      	eors	r3, r2
 8021100:	0fdb      	lsrs	r3, r3, #31
 8021102:	2b00      	cmp	r3, #0
 8021104:	bf0b      	itete	eq
 8021106:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 802110a:	4673      	movne	r3, lr
 802110c:	2100      	moveq	r1, #0
 802110e:	f04f 31ff 	movne.w	r1, #4294967295
 8021112:	fbc0 3102 	smlal	r3, r1, r0, r2
 8021116:	2900      	cmp	r1, #0
 8021118:	da04      	bge.n	8021124 <_lite_kernel_nl_softmax_is8os8+0x78>
 802111a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 802111e:	189b      	adds	r3, r3, r2
 8021120:	f141 0100 	adc.w	r1, r1, #0
 8021124:	0fdb      	lsrs	r3, r3, #31
 8021126:	f04f 0c00 	mov.w	ip, #0
 802112a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 802112e:	4641      	mov	r1, r8
 8021130:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8021134:	0154      	lsls	r4, r2, #5
 8021136:	1ad2      	subs	r2, r2, r3
 8021138:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 802113c:	fbc4 1c04 	smlal	r1, ip, r4, r4
 8021140:	f1bc 0f00 	cmp.w	ip, #0
 8021144:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8021148:	da05      	bge.n	8021156 <_lite_kernel_nl_softmax_is8os8+0xaa>
 802114a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 802114e:	1808      	adds	r0, r1, r0
 8021150:	4601      	mov	r1, r0
 8021152:	f14c 0c00 	adc.w	ip, ip, #0
 8021156:	0fc9      	lsrs	r1, r1, #31
 8021158:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 802115c:	ea4f 7cec 	mov.w	ip, ip, asr #31
 8021160:	fba1 0701 	umull	r0, r7, r1, r1
 8021164:	fb01 f90c 	mul.w	r9, r1, ip
 8021168:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 802116c:	eb47 0749 	adc.w	r7, r7, r9, lsl #1
 8021170:	2f00      	cmp	r7, #0
 8021172:	da06      	bge.n	8021182 <_lite_kernel_nl_softmax_is8os8+0xd6>
 8021174:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8021178:	eb10 0909 	adds.w	r9, r0, r9
 802117c:	4648      	mov	r0, r9
 802117e:	f147 0700 	adc.w	r7, r7, #0
 8021182:	0fc0      	lsrs	r0, r0, #31
 8021184:	fb01 f505 	mul.w	r5, r1, r5
 8021188:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 802118c:	fb04 550c 	mla	r5, r4, ip, r5
 8021190:	1087      	asrs	r7, r0, #2
 8021192:	f000 0003 	and.w	r0, r0, #3
 8021196:	bf54      	ite	pl
 8021198:	f04f 0901 	movpl.w	r9, #1
 802119c:	f04f 0902 	movmi.w	r9, #2
 80211a0:	4581      	cmp	r9, r0
 80211a2:	ea81 0004 	eor.w	r0, r1, r4
 80211a6:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80211aa:	bfb8      	it	lt
 80211ac:	3701      	addlt	r7, #1
 80211ae:	2800      	cmp	r0, #0
 80211b0:	fba1 0a04 	umull	r0, sl, r1, r4
 80211b4:	bf0b      	itete	eq
 80211b6:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 80211ba:	46f4      	movne	ip, lr
 80211bc:	f04f 0900 	moveq.w	r9, #0
 80211c0:	f04f 39ff 	movne.w	r9, #4294967295
 80211c4:	4455      	add	r5, sl
 80211c6:	eb10 000c 	adds.w	r0, r0, ip
 80211ca:	eb45 0509 	adc.w	r5, r5, r9
 80211ce:	2d00      	cmp	r5, #0
 80211d0:	da06      	bge.n	80211e0 <_lite_kernel_nl_softmax_is8os8+0x134>
 80211d2:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80211d6:	eb10 0c0c 	adds.w	ip, r0, ip
 80211da:	4660      	mov	r0, ip
 80211dc:	f145 0500 	adc.w	r5, r5, #0
 80211e0:	0fc0      	lsrs	r0, r0, #31
 80211e2:	4ed5      	ldr	r6, [pc, #852]	@ (8021538 <_lite_kernel_nl_softmax_is8os8+0x48c>)
 80211e4:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 80211e8:	4438      	add	r0, r7
 80211ea:	0fc5      	lsrs	r5, r0, #31
 80211ec:	2d00      	cmp	r5, #0
 80211ee:	bf0b      	itete	eq
 80211f0:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 80211f4:	4675      	movne	r5, lr
 80211f6:	2700      	moveq	r7, #0
 80211f8:	f04f 37ff 	movne.w	r7, #4294967295
 80211fc:	fbc0 5706 	smlal	r5, r7, r0, r6
 8021200:	2f00      	cmp	r7, #0
 8021202:	da05      	bge.n	8021210 <_lite_kernel_nl_softmax_is8os8+0x164>
 8021204:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8021208:	1828      	adds	r0, r5, r0
 802120a:	4605      	mov	r5, r0
 802120c:	f147 0700 	adc.w	r7, r7, #0
 8021210:	0fed      	lsrs	r5, r5, #31
 8021212:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 8021216:	4429      	add	r1, r5
 8021218:	07cf      	lsls	r7, r1, #31
 802121a:	ea4f 0061 	mov.w	r0, r1, asr #1
 802121e:	d502      	bpl.n	8021226 <_lite_kernel_nl_softmax_is8os8+0x17a>
 8021220:	2800      	cmp	r0, #0
 8021222:	bfa8      	it	ge
 8021224:	3001      	addge	r0, #1
 8021226:	4404      	add	r4, r0
 8021228:	4dc4      	ldr	r5, [pc, #784]	@ (802153c <_lite_kernel_nl_softmax_is8os8+0x490>)
 802122a:	0fe1      	lsrs	r1, r4, #31
 802122c:	2900      	cmp	r1, #0
 802122e:	bf0b      	itete	eq
 8021230:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 8021234:	4670      	movne	r0, lr
 8021236:	2100      	moveq	r1, #0
 8021238:	f04f 31ff 	movne.w	r1, #4294967295
 802123c:	fbc4 0105 	smlal	r0, r1, r4, r5
 8021240:	2900      	cmp	r1, #0
 8021242:	da05      	bge.n	8021250 <_lite_kernel_nl_softmax_is8os8+0x1a4>
 8021244:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8021248:	1904      	adds	r4, r0, r4
 802124a:	4620      	mov	r0, r4
 802124c:	f141 0100 	adc.w	r1, r1, #0
 8021250:	0fc0      	lsrs	r0, r0, #31
 8021252:	f3c2 6400 	ubfx	r4, r2, #24, #1
 8021256:	4eba      	ldr	r6, [pc, #744]	@ (8021540 <_lite_kernel_nl_softmax_is8os8+0x494>)
 8021258:	4645      	mov	r5, r8
 802125a:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 802125e:	2100      	movs	r1, #0
 8021260:	3c01      	subs	r4, #1
 8021262:	fab3 f383 	clz	r3, r3
 8021266:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
 802126a:	460f      	mov	r7, r1
 802126c:	468c      	mov	ip, r1
 802126e:	095b      	lsrs	r3, r3, #5
 8021270:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
 8021274:	f10b 0b01 	add.w	fp, fp, #1
 8021278:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 802127c:	fbc0 5706 	smlal	r5, r7, r0, r6
 8021280:	0fed      	lsrs	r5, r5, #31
 8021282:	4004      	ands	r4, r0
 8021284:	f342 6000 	sbfx	r0, r2, #24, #1
 8021288:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 802128c:	4ead      	ldr	r6, [pc, #692]	@ (8021544 <_lite_kernel_nl_softmax_is8os8+0x498>)
 802128e:	460f      	mov	r7, r1
 8021290:	4028      	ands	r0, r5
 8021292:	4645      	mov	r5, r8
 8021294:	4060      	eors	r0, r4
 8021296:	f3c2 6440 	ubfx	r4, r2, #25, #1
 802129a:	fbc0 5706 	smlal	r5, r7, r0, r6
 802129e:	3c01      	subs	r4, #1
 80212a0:	0fed      	lsrs	r5, r5, #31
 80212a2:	4ea9      	ldr	r6, [pc, #676]	@ (8021548 <_lite_kernel_nl_softmax_is8os8+0x49c>)
 80212a4:	4004      	ands	r4, r0
 80212a6:	f342 6040 	sbfx	r0, r2, #25, #1
 80212aa:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 80212ae:	460f      	mov	r7, r1
 80212b0:	4028      	ands	r0, r5
 80212b2:	4645      	mov	r5, r8
 80212b4:	4060      	eors	r0, r4
 80212b6:	f3c2 6480 	ubfx	r4, r2, #26, #1
 80212ba:	fbc0 5706 	smlal	r5, r7, r0, r6
 80212be:	3c01      	subs	r4, #1
 80212c0:	0fed      	lsrs	r5, r5, #31
 80212c2:	4ea2      	ldr	r6, [pc, #648]	@ (802154c <_lite_kernel_nl_softmax_is8os8+0x4a0>)
 80212c4:	4004      	ands	r4, r0
 80212c6:	f342 6080 	sbfx	r0, r2, #26, #1
 80212ca:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 80212ce:	460f      	mov	r7, r1
 80212d0:	4028      	ands	r0, r5
 80212d2:	f3c2 65c0 	ubfx	r5, r2, #27, #1
 80212d6:	4060      	eors	r0, r4
 80212d8:	4644      	mov	r4, r8
 80212da:	3d01      	subs	r5, #1
 80212dc:	fbc0 4706 	smlal	r4, r7, r0, r6
 80212e0:	0fe4      	lsrs	r4, r4, #31
 80212e2:	4005      	ands	r5, r0
 80212e4:	f342 60c0 	sbfx	r0, r2, #27, #1
 80212e8:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
 80212ec:	4e98      	ldr	r6, [pc, #608]	@ (8021550 <_lite_kernel_nl_softmax_is8os8+0x4a4>)
 80212ee:	460f      	mov	r7, r1
 80212f0:	4020      	ands	r0, r4
 80212f2:	ea85 0400 	eor.w	r4, r5, r0
 80212f6:	f3c2 7000 	ubfx	r0, r2, #28, #1
 80212fa:	4645      	mov	r5, r8
 80212fc:	3801      	subs	r0, #1
 80212fe:	fbc4 5706 	smlal	r5, r7, r4, r6
 8021302:	0fed      	lsrs	r5, r5, #31
 8021304:	4020      	ands	r0, r4
 8021306:	f342 7400 	sbfx	r4, r2, #28, #1
 802130a:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 802130e:	4f91      	ldr	r7, [pc, #580]	@ (8021554 <_lite_kernel_nl_softmax_is8os8+0x4a8>)
 8021310:	402c      	ands	r4, r5
 8021312:	4645      	mov	r5, r8
 8021314:	4060      	eors	r0, r4
 8021316:	f3c2 7440 	ubfx	r4, r2, #29, #1
 802131a:	fbc0 5c07 	smlal	r5, ip, r0, r7
 802131e:	3c01      	subs	r4, #1
 8021320:	0fed      	lsrs	r5, r5, #31
 8021322:	4004      	ands	r4, r0
 8021324:	f342 7040 	sbfx	r0, r2, #29, #1
 8021328:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
 802132c:	4028      	ands	r0, r5
 802132e:	4645      	mov	r5, r8
 8021330:	4060      	eors	r0, r4
 8021332:	24f2      	movs	r4, #242	@ 0xf2
 8021334:	fbc0 5104 	smlal	r5, r1, r0, r4
 8021338:	0fed      	lsrs	r5, r5, #31
 802133a:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
 802133e:	f3c2 7180 	ubfx	r1, r2, #30, #1
 8021342:	f342 7280 	sbfx	r2, r2, #30, #1
 8021346:	3901      	subs	r1, #1
 8021348:	402a      	ands	r2, r5
 802134a:	4001      	ands	r1, r0
 802134c:	404a      	eors	r2, r1
 802134e:	1e59      	subs	r1, r3, #1
 8021350:	425b      	negs	r3, r3
 8021352:	400a      	ands	r2, r1
 8021354:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8021358:	4053      	eors	r3, r2
 802135a:	9a01      	ldr	r2, [sp, #4]
 802135c:	f842 3f04 	str.w	r3, [r2, #4]!
 8021360:	9b02      	ldr	r3, [sp, #8]
 8021362:	9201      	str	r2, [sp, #4]
 8021364:	455b      	cmp	r3, fp
 8021366:	f63f aec4 	bhi.w	80210f2 <_lite_kernel_nl_softmax_is8os8+0x46>
 802136a:	4699      	mov	r9, r3
 802136c:	9f03      	ldr	r7, [sp, #12]
 802136e:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 8021372:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021374:	2b00      	cmp	r3, #0
 8021376:	f000 823b 	beq.w	80217f0 <_lite_kernel_nl_softmax_is8os8+0x744>
 802137a:	fb0a f307 	mul.w	r3, sl, r7
 802137e:	930d      	str	r3, [sp, #52]	@ 0x34
 8021380:	2f00      	cmp	r7, #0
 8021382:	f000 8235 	beq.w	80217f0 <_lite_kernel_nl_softmax_is8os8+0x744>
 8021386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021388:	46c8      	mov	r8, r9
 802138a:	46be      	mov	lr, r7
 802138c:	443b      	add	r3, r7
 802138e:	9308      	str	r3, [sp, #32]
 8021390:	2300      	movs	r3, #0
 8021392:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021396:	4651      	mov	r1, sl
 8021398:	46c2      	mov	sl, r8
 802139a:	9303      	str	r3, [sp, #12]
 802139c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802139e:	9302      	str	r3, [sp, #8]
 80213a0:	9b02      	ldr	r3, [sp, #8]
 80213a2:	2901      	cmp	r1, #1
 80213a4:	f993 2000 	ldrsb.w	r2, [r3]
 80213a8:	f240 8254 	bls.w	8021854 <_lite_kernel_nl_softmax_is8os8+0x7a8>
 80213ac:	eb03 000e 	add.w	r0, r3, lr
 80213b0:	2301      	movs	r3, #1
 80213b2:	f990 4000 	ldrsb.w	r4, [r0]
 80213b6:	3301      	adds	r3, #1
 80213b8:	4470      	add	r0, lr
 80213ba:	42a2      	cmp	r2, r4
 80213bc:	bfb8      	it	lt
 80213be:	4622      	movlt	r2, r4
 80213c0:	4299      	cmp	r1, r3
 80213c2:	d1f6      	bne.n	80213b2 <_lite_kernel_nl_softmax_is8os8+0x306>
 80213c4:	2500      	movs	r5, #0
 80213c6:	9802      	ldr	r0, [sp, #8]
 80213c8:	f240 7cff 	movw	ip, #2047	@ 0x7ff
 80213cc:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80213ce:	462b      	mov	r3, r5
 80213d0:	f990 4000 	ldrsb.w	r4, [r0]
 80213d4:	3301      	adds	r3, #1
 80213d6:	4470      	add	r0, lr
 80213d8:	1b14      	subs	r4, r2, r4
 80213da:	4554      	cmp	r4, sl
 80213dc:	da0c      	bge.n	80213f8 <_lite_kernel_nl_softmax_is8os8+0x34c>
 80213de:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80213e2:	1326      	asrs	r6, r4, #12
 80213e4:	f3c4 040b 	ubfx	r4, r4, #0, #12
 80213e8:	bf54      	ite	pl
 80213ea:	46e0      	movpl	r8, ip
 80213ec:	f44f 6800 	movmi.w	r8, #2048	@ 0x800
 80213f0:	4544      	cmp	r4, r8
 80213f2:	bfc8      	it	gt
 80213f4:	3601      	addgt	r6, #1
 80213f6:	4435      	add	r5, r6
 80213f8:	4299      	cmp	r1, r3
 80213fa:	d8e9      	bhi.n	80213d0 <_lite_kernel_nl_softmax_is8os8+0x324>
 80213fc:	2d00      	cmp	r5, #0
 80213fe:	f000 822c 	beq.w	802185a <_lite_kernel_nl_softmax_is8os8+0x7ae>
 8021402:	fab5 f385 	clz	r3, r5
 8021406:	409d      	lsls	r5, r3
 8021408:	9306      	str	r3, [sp, #24]
 802140a:	f1c3 0323 	rsb	r3, r3, #35	@ 0x23
 802140e:	9301      	str	r3, [sp, #4]
 8021410:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8021414:	17de      	asrs	r6, r3, #31
 8021416:	f1b6 3fff 	cmp.w	r6, #4294967295
 802141a:	bf08      	it	eq
 802141c:	2d00      	cmpeq	r5, #0
 802141e:	f000 8220 	beq.w	8021862 <_lite_kernel_nl_softmax_is8os8+0x7b6>
 8021422:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 8021426:	484c      	ldr	r0, [pc, #304]	@ (8021558 <_lite_kernel_nl_softmax_is8os8+0x4ac>)
 8021428:	f146 0600 	adc.w	r6, r6, #0
 802142c:	085b      	lsrs	r3, r3, #1
 802142e:	ea43 73c6 	orr.w	r3, r3, r6, lsl #31
 8021432:	1076      	asrs	r6, r6, #1
 8021434:	425d      	negs	r5, r3
 8021436:	469b      	mov	fp, r3
 8021438:	fb00 5506 	mla	r5, r0, r6, r5
 802143c:	fba3 0400 	umull	r0, r4, r3, r0
 8021440:	442c      	add	r4, r5
 8021442:	4d46      	ldr	r5, [pc, #280]	@ (802155c <_lite_kernel_nl_softmax_is8os8+0x4b0>)
 8021444:	1940      	adds	r0, r0, r5
 8021446:	f164 0400 	sbc.w	r4, r4, #0
 802144a:	2c00      	cmp	r4, #0
 802144c:	da05      	bge.n	802145a <_lite_kernel_nl_softmax_is8os8+0x3ae>
 802144e:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8021452:	1945      	adds	r5, r0, r5
 8021454:	4628      	mov	r0, r5
 8021456:	f144 0400 	adc.w	r4, r4, #0
 802145a:	0fc0      	lsrs	r0, r0, #31
 802145c:	ea40 0544 	orr.w	r5, r0, r4, lsl #1
 8021460:	f105 3c5a 	add.w	ip, r5, #1515870810	@ 0x5a5a5a5a
 8021464:	ea4f 70ec 	mov.w	r0, ip, asr #31
 8021468:	4667      	mov	r7, ip
 802146a:	fb03 f900 	mul.w	r9, r3, r0
 802146e:	9004      	str	r0, [sp, #16]
 8021470:	fba3 080c 	umull	r0, r8, r3, ip
 8021474:	fb0c 9906 	mla	r9, ip, r6, r9
 8021478:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 802147c:	eb49 0808 	adc.w	r8, r9, r8
 8021480:	f1b8 0f00 	cmp.w	r8, #0
 8021484:	da06      	bge.n	8021494 <_lite_kernel_nl_softmax_is8os8+0x3e8>
 8021486:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 802148a:	eb10 0909 	adds.w	r9, r0, r9
 802148e:	4648      	mov	r0, r9
 8021490:	f148 0800 	adc.w	r8, r8, #0
 8021494:	0fc0      	lsrs	r0, r0, #31
 8021496:	4c31      	ldr	r4, [pc, #196]	@ (802155c <_lite_kernel_nl_softmax_is8os8+0x4b0>)
 8021498:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
 802149c:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 80214a0:	ea80 080c 	eor.w	r8, r0, ip
 80214a4:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 80214a8:	f1b8 0f00 	cmp.w	r8, #0
 80214ac:	bf15      	itete	ne
 80214ae:	46a0      	movne	r8, r4
 80214b0:	2400      	moveq	r4, #0
 80214b2:	f04f 34ff 	movne.w	r4, #4294967295
 80214b6:	f04f 4880 	moveq.w	r8, #1073741824	@ 0x40000000
 80214ba:	9405      	str	r4, [sp, #20]
 80214bc:	9c04      	ldr	r4, [sp, #16]
 80214be:	ea4f 79e0 	mov.w	r9, r0, asr #31
 80214c2:	fb00 f404 	mul.w	r4, r0, r4
 80214c6:	fb07 4409 	mla	r4, r7, r9, r4
 80214ca:	fba0 0707 	umull	r0, r7, r0, r7
 80214ce:	eb10 0008 	adds.w	r0, r0, r8
 80214d2:	443c      	add	r4, r7
 80214d4:	9f05      	ldr	r7, [sp, #20]
 80214d6:	eb44 0707 	adc.w	r7, r4, r7
 80214da:	2f00      	cmp	r7, #0
 80214dc:	da05      	bge.n	80214ea <_lite_kernel_nl_softmax_is8os8+0x43e>
 80214de:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80214e2:	1904      	adds	r4, r0, r4
 80214e4:	4620      	mov	r0, r4
 80214e6:	f147 0700 	adc.w	r7, r7, #0
 80214ea:	0fc0      	lsrs	r0, r0, #31
 80214ec:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 80214f0:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
 80214f4:	f340 809d 	ble.w	8021632 <_lite_kernel_nl_softmax_is8os8+0x586>
 80214f8:	eb0c 0480 	add.w	r4, ip, r0, lsl #2
 80214fc:	ea8b 0004 	eor.w	r0, fp, r4
 8021500:	17e5      	asrs	r5, r4, #31
 8021502:	0fc0      	lsrs	r0, r0, #31
 8021504:	fb03 f705 	mul.w	r7, r3, r5
 8021508:	2800      	cmp	r0, #0
 802150a:	4814      	ldr	r0, [pc, #80]	@ (802155c <_lite_kernel_nl_softmax_is8os8+0x4b0>)
 802150c:	fb04 7706 	mla	r7, r4, r6, r7
 8021510:	bf14      	ite	ne
 8021512:	4684      	movne	ip, r0
 8021514:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 8021518:	fba3 0904 	umull	r0, r9, r3, r4
 802151c:	bf0c      	ite	eq
 802151e:	f04f 0800 	moveq.w	r8, #0
 8021522:	f04f 38ff 	movne.w	r8, #4294967295
 8021526:	444f      	add	r7, r9
 8021528:	eb10 000c 	adds.w	r0, r0, ip
 802152c:	eb47 0708 	adc.w	r7, r7, r8
 8021530:	2f00      	cmp	r7, #0
 8021532:	da1c      	bge.n	802156e <_lite_kernel_nl_softmax_is8os8+0x4c2>
 8021534:	e014      	b.n	8021560 <_lite_kernel_nl_softmax_is8os8+0x4b4>
 8021536:	bf00      	nop
 8021538:	2aaaaaab 	.word	0x2aaaaaab
 802153c:	70f5a894 	.word	0x70f5a894
 8021540:	63afbe7b 	.word	0x63afbe7b
 8021544:	4da2cbf2 	.word	0x4da2cbf2
 8021548:	2f16ac6c 	.word	0x2f16ac6c
 802154c:	1152aaa4 	.word	0x1152aaa4
 8021550:	02582ab7 	.word	0x02582ab7
 8021554:	000afe11 	.word	0x000afe11
 8021558:	c3c3c3c4 	.word	0xc3c3c3c4
 802155c:	c0000001 	.word	0xc0000001
 8021560:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8021564:	eb10 0c0c 	adds.w	ip, r0, ip
 8021568:	4660      	mov	r0, ip
 802156a:	f147 0700 	adc.w	r7, r7, #0
 802156e:	0fc0      	lsrs	r0, r0, #31
 8021570:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8021574:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 8021578:	ea84 0700 	eor.w	r7, r4, r0
 802157c:	0fff      	lsrs	r7, r7, #31
 802157e:	2f00      	cmp	r7, #0
 8021580:	4fbf      	ldr	r7, [pc, #764]	@ (8021880 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 8021582:	bf06      	itte	eq
 8021584:	f04f 0c00 	moveq.w	ip, #0
 8021588:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 802158c:	f04f 3cff 	movne.w	ip, #4294967295
 8021590:	fb00 f505 	mul.w	r5, r0, r5
 8021594:	ea4f 78e0 	mov.w	r8, r0, asr #31
 8021598:	fb04 5508 	mla	r5, r4, r8, r5
 802159c:	fba0 0804 	umull	r0, r8, r0, r4
 80215a0:	19c0      	adds	r0, r0, r7
 80215a2:	4445      	add	r5, r8
 80215a4:	eb45 050c 	adc.w	r5, r5, ip
 80215a8:	2d00      	cmp	r5, #0
 80215aa:	da05      	bge.n	80215b8 <_lite_kernel_nl_softmax_is8os8+0x50c>
 80215ac:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80215b0:	19c7      	adds	r7, r0, r7
 80215b2:	4638      	mov	r0, r7
 80215b4:	f145 0500 	adc.w	r5, r5, #0
 80215b8:	0fc0      	lsrs	r0, r0, #31
 80215ba:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 80215be:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 80215c2:	db65      	blt.n	8021690 <_lite_kernel_nl_softmax_is8os8+0x5e4>
 80215c4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80215c8:	1960      	adds	r0, r4, r5
 80215ca:	ea9b 0f00 	teq	fp, r0
 80215ce:	f140 813d 	bpl.w	802184c <_lite_kernel_nl_softmax_is8os8+0x7a0>
 80215d2:	4dab      	ldr	r5, [pc, #684]	@ (8021880 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 80215d4:	f04f 37ff 	mov.w	r7, #4294967295
 80215d8:	17c4      	asrs	r4, r0, #31
 80215da:	fb03 fc04 	mul.w	ip, r3, r4
 80215de:	fb00 c606 	mla	r6, r0, r6, ip
 80215e2:	fba3 3c00 	umull	r3, ip, r3, r0
 80215e6:	195b      	adds	r3, r3, r5
 80215e8:	4466      	add	r6, ip
 80215ea:	eb46 0607 	adc.w	r6, r6, r7
 80215ee:	2e00      	cmp	r6, #0
 80215f0:	da05      	bge.n	80215fe <_lite_kernel_nl_softmax_is8os8+0x552>
 80215f2:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80215f6:	195d      	adds	r5, r3, r5
 80215f8:	462b      	mov	r3, r5
 80215fa:	f146 0600 	adc.w	r6, r6, #0
 80215fe:	0fdb      	lsrs	r3, r3, #31
 8021600:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8021604:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8021608:	ea80 0503 	eor.w	r5, r0, r3
 802160c:	0fed      	lsrs	r5, r5, #31
 802160e:	2d00      	cmp	r5, #0
 8021610:	4d9b      	ldr	r5, [pc, #620]	@ (8021880 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 8021612:	bf06      	itte	eq
 8021614:	2600      	moveq	r6, #0
 8021616:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 802161a:	f04f 36ff 	movne.w	r6, #4294967295
 802161e:	4298      	cmp	r0, r3
 8021620:	d15d      	bne.n	80216de <_lite_kernel_nl_softmax_is8os8+0x632>
 8021622:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8021626:	d15a      	bne.n	80216de <_lite_kernel_nl_softmax_is8os8+0x632>
 8021628:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 802162c:	4406      	add	r6, r0
 802162e:	0076      	lsls	r6, r6, #1
 8021630:	e075      	b.n	802171e <_lite_kernel_nl_softmax_is8os8+0x672>
 8021632:	4c94      	ldr	r4, [pc, #592]	@ (8021884 <_lite_kernel_nl_softmax_is8os8+0x7d8>)
 8021634:	192c      	adds	r4, r5, r4
 8021636:	ea9b 0f04 	teq	fp, r4
 802163a:	f140 8127 	bpl.w	802188c <_lite_kernel_nl_softmax_is8os8+0x7e0>
 802163e:	17e0      	asrs	r0, r4, #31
 8021640:	fb04 f506 	mul.w	r5, r4, r6
 8021644:	fb03 5500 	mla	r5, r3, r0, r5
 8021648:	fba4 0703 	umull	r0, r7, r4, r3
 802164c:	442f      	add	r7, r5
 802164e:	4d8c      	ldr	r5, [pc, #560]	@ (8021880 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 8021650:	1940      	adds	r0, r0, r5
 8021652:	f167 0700 	sbc.w	r7, r7, #0
 8021656:	2f00      	cmp	r7, #0
 8021658:	da05      	bge.n	8021666 <_lite_kernel_nl_softmax_is8os8+0x5ba>
 802165a:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 802165e:	1945      	adds	r5, r0, r5
 8021660:	4628      	mov	r0, r5
 8021662:	f147 0700 	adc.w	r7, r7, #0
 8021666:	0fc0      	lsrs	r0, r0, #31
 8021668:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 802166c:	f04f 37ff 	mov.w	r7, #4294967295
 8021670:	f1c0 5500 	rsb	r5, r0, #536870912	@ 0x20000000
 8021674:	4882      	ldr	r0, [pc, #520]	@ (8021880 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 8021676:	fbc5 0704 	smlal	r0, r7, r5, r4
 802167a:	2f00      	cmp	r7, #0
 802167c:	da05      	bge.n	802168a <_lite_kernel_nl_softmax_is8os8+0x5de>
 802167e:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8021682:	1945      	adds	r5, r0, r5
 8021684:	4628      	mov	r0, r5
 8021686:	f147 0700 	adc.w	r7, r7, #0
 802168a:	0fc0      	lsrs	r0, r0, #31
 802168c:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 8021690:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
 8021694:	ea4f 0580 	mov.w	r5, r0, lsl #2
 8021698:	dc96      	bgt.n	80215c8 <_lite_kernel_nl_softmax_is8os8+0x51c>
 802169a:	f104 4000 	add.w	r0, r4, #2147483648	@ 0x80000000
 802169e:	ea90 0f0b 	teq	r0, fp
 80216a2:	f140 80d3 	bpl.w	802184c <_lite_kernel_nl_softmax_is8os8+0x7a0>
 80216a6:	fb00 f606 	mul.w	r6, r0, r6
 80216aa:	17c4      	asrs	r4, r0, #31
 80216ac:	fb03 6604 	mla	r6, r3, r4, r6
 80216b0:	fba0 3503 	umull	r3, r5, r0, r3
 80216b4:	4435      	add	r5, r6
 80216b6:	4e72      	ldr	r6, [pc, #456]	@ (8021880 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 80216b8:	199b      	adds	r3, r3, r6
 80216ba:	f165 0500 	sbc.w	r5, r5, #0
 80216be:	2d00      	cmp	r5, #0
 80216c0:	da05      	bge.n	80216ce <_lite_kernel_nl_softmax_is8os8+0x622>
 80216c2:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80216c6:	199e      	adds	r6, r3, r6
 80216c8:	4633      	mov	r3, r6
 80216ca:	f145 0500 	adc.w	r5, r5, #0
 80216ce:	0fdb      	lsrs	r3, r3, #31
 80216d0:	f04f 36ff 	mov.w	r6, #4294967295
 80216d4:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 80216d8:	4d69      	ldr	r5, [pc, #420]	@ (8021880 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 80216da:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 80216de:	fb03 f404 	mul.w	r4, r3, r4
 80216e2:	17df      	asrs	r7, r3, #31
 80216e4:	fb00 4407 	mla	r4, r0, r7, r4
 80216e8:	fba3 3700 	umull	r3, r7, r3, r0
 80216ec:	195b      	adds	r3, r3, r5
 80216ee:	443c      	add	r4, r7
 80216f0:	eb44 0406 	adc.w	r4, r4, r6
 80216f4:	2c00      	cmp	r4, #0
 80216f6:	da04      	bge.n	8021702 <_lite_kernel_nl_softmax_is8os8+0x656>
 80216f8:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80216fc:	195b      	adds	r3, r3, r5
 80216fe:	f144 0400 	adc.w	r4, r4, #0
 8021702:	0fdb      	lsrs	r3, r3, #31
 8021704:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8021708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802170c:	f2c0 8092 	blt.w	8021834 <_lite_kernel_nl_softmax_is8os8+0x788>
 8021710:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8021714:	18c6      	adds	r6, r0, r3
 8021716:	f1b6 4f80 	cmp.w	r6, #1073741824	@ 0x40000000
 802171a:	db88      	blt.n	802162e <_lite_kernel_nl_softmax_is8os8+0x582>
 802171c:	461e      	mov	r6, r3
 802171e:	9b01      	ldr	r3, [sp, #4]
 8021720:	2b1f      	cmp	r3, #31
 8021722:	dd05      	ble.n	8021730 <_lite_kernel_nl_softmax_is8os8+0x684>
 8021724:	9b06      	ldr	r3, [sp, #24]
 8021726:	f1c3 0304 	rsb	r3, r3, #4
 802172a:	411e      	asrs	r6, r3
 802172c:	231f      	movs	r3, #31
 802172e:	9301      	str	r3, [sp, #4]
 8021730:	2900      	cmp	r1, #0
 8021732:	d040      	beq.n	80217b6 <_lite_kernel_nl_softmax_is8os8+0x70a>
 8021734:	9801      	ldr	r0, [sp, #4]
 8021736:	f04f 0c01 	mov.w	ip, #1
 802173a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802173e:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8021742:	fa0c fc00 	lsl.w	ip, ip, r0
 8021746:	fa43 f000 	asr.w	r0, r3, r0
 802174a:	9307      	str	r3, [sp, #28]
 802174c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021750:	9005      	str	r0, [sp, #20]
 8021752:	2000      	movs	r0, #0
 8021754:	ea4f 096c 	mov.w	r9, ip, asr #1
 8021758:	ea0c 0703 	and.w	r7, ip, r3
 802175c:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8021760:	f109 0301 	add.w	r3, r9, #1
 8021764:	9706      	str	r7, [sp, #24]
 8021766:	9304      	str	r3, [sp, #16]
 8021768:	f995 3000 	ldrsb.w	r3, [r5]
 802176c:	1ad3      	subs	r3, r2, r3
 802176e:	4553      	cmp	r3, sl
 8021770:	da41      	bge.n	80217f6 <_lite_kernel_nl_softmax_is8os8+0x74a>
 8021772:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8021774:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 8021778:	ea87 0306 	eor.w	r3, r7, r6
 802177c:	0fdb      	lsrs	r3, r3, #31
 802177e:	2b00      	cmp	r3, #0
 8021780:	4b3f      	ldr	r3, [pc, #252]	@ (8021880 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 8021782:	bf06      	itte	eq
 8021784:	f04f 0b00 	moveq.w	fp, #0
 8021788:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 802178c:	f04f 3bff 	movne.w	fp, #4294967295
 8021790:	42b7      	cmp	r7, r6
 8021792:	d133      	bne.n	80217fc <_lite_kernel_nl_softmax_is8os8+0x750>
 8021794:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
 8021798:	d130      	bne.n	80217fc <_lite_kernel_nl_softmax_is8os8+0x750>
 802179a:	e9dd 3b05 	ldrd	r3, fp, [sp, #20]
 802179e:	45d9      	cmp	r9, fp
 80217a0:	da00      	bge.n	80217a4 <_lite_kernel_nl_softmax_is8os8+0x6f8>
 80217a2:	3301      	adds	r3, #1
 80217a4:	2bfe      	cmp	r3, #254	@ 0xfe
 80217a6:	dd40      	ble.n	802182a <_lite_kernel_nl_softmax_is8os8+0x77e>
 80217a8:	237f      	movs	r3, #127	@ 0x7f
 80217aa:	7023      	strb	r3, [r4, #0]
 80217ac:	3001      	adds	r0, #1
 80217ae:	4475      	add	r5, lr
 80217b0:	4474      	add	r4, lr
 80217b2:	4281      	cmp	r1, r0
 80217b4:	d1d8      	bne.n	8021768 <_lite_kernel_nl_softmax_is8os8+0x6bc>
 80217b6:	9a03      	ldr	r2, [sp, #12]
 80217b8:	9b02      	ldr	r3, [sp, #8]
 80217ba:	3201      	adds	r2, #1
 80217bc:	3301      	adds	r3, #1
 80217be:	9203      	str	r2, [sp, #12]
 80217c0:	9a08      	ldr	r2, [sp, #32]
 80217c2:	9302      	str	r3, [sp, #8]
 80217c4:	4293      	cmp	r3, r2
 80217c6:	f47f adeb 	bne.w	80213a0 <_lite_kernel_nl_softmax_is8os8+0x2f4>
 80217ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80217cc:	46d0      	mov	r8, sl
 80217ce:	468a      	mov	sl, r1
 80217d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80217d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80217d4:	4411      	add	r1, r2
 80217d6:	3301      	adds	r3, #1
 80217d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80217da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80217dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80217de:	4411      	add	r1, r2
 80217e0:	910a      	str	r1, [sp, #40]	@ 0x28
 80217e2:	9908      	ldr	r1, [sp, #32]
 80217e4:	4411      	add	r1, r2
 80217e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80217e8:	429a      	cmp	r2, r3
 80217ea:	9108      	str	r1, [sp, #32]
 80217ec:	f47f add2 	bne.w	8021394 <_lite_kernel_nl_softmax_is8os8+0x2e8>
 80217f0:	b00f      	add	sp, #60	@ 0x3c
 80217f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217f6:	f884 8000 	strb.w	r8, [r4]
 80217fa:	e7d7      	b.n	80217ac <_lite_kernel_nl_softmax_is8os8+0x700>
 80217fc:	fbc6 3b07 	smlal	r3, fp, r6, r7
 8021800:	f1bb 0f00 	cmp.w	fp, #0
 8021804:	da03      	bge.n	802180e <_lite_kernel_nl_softmax_is8os8+0x762>
 8021806:	9f07      	ldr	r7, [sp, #28]
 8021808:	19db      	adds	r3, r3, r7
 802180a:	f14b 0b00 	adc.w	fp, fp, #0
 802180e:	0fdb      	lsrs	r3, r3, #31
 8021810:	9f01      	ldr	r7, [sp, #4]
 8021812:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 8021816:	ea03 0b0c 	and.w	fp, r3, ip
 802181a:	413b      	asrs	r3, r7
 802181c:	d5bf      	bpl.n	802179e <_lite_kernel_nl_softmax_is8os8+0x6f2>
 802181e:	9f04      	ldr	r7, [sp, #16]
 8021820:	45bb      	cmp	fp, r7
 8021822:	dcbe      	bgt.n	80217a2 <_lite_kernel_nl_softmax_is8os8+0x6f6>
 8021824:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8021828:	e7bf      	b.n	80217aa <_lite_kernel_nl_softmax_is8os8+0x6fe>
 802182a:	2b00      	cmp	r3, #0
 802182c:	ddfa      	ble.n	8021824 <_lite_kernel_nl_softmax_is8os8+0x778>
 802182e:	3b80      	subs	r3, #128	@ 0x80
 8021830:	b25b      	sxtb	r3, r3
 8021832:	e7ba      	b.n	80217aa <_lite_kernel_nl_softmax_is8os8+0x6fe>
 8021834:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8021838:	dc45      	bgt.n	80218c6 <_lite_kernel_nl_softmax_is8os8+0x81a>
 802183a:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 802183e:	0046      	lsls	r6, r0, #1
 8021840:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8021844:	bfd8      	it	le
 8021846:	f04f 4600 	movle.w	r6, #2147483648	@ 0x80000000
 802184a:	e768      	b.n	802171e <_lite_kernel_nl_softmax_is8os8+0x672>
 802184c:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
 8021850:	2700      	movs	r7, #0
 8021852:	e6c1      	b.n	80215d8 <_lite_kernel_nl_softmax_is8os8+0x52c>
 8021854:	2900      	cmp	r1, #0
 8021856:	f47f adb5 	bne.w	80213c4 <_lite_kernel_nl_softmax_is8os8+0x318>
 802185a:	2303      	movs	r3, #3
 802185c:	9301      	str	r3, [sp, #4]
 802185e:	2320      	movs	r3, #32
 8021860:	9306      	str	r3, [sp, #24]
 8021862:	f04f 3bff 	mov.w	fp, #4294967295
 8021866:	2500      	movs	r5, #0
 8021868:	f04f 375a 	mov.w	r7, #1515870810	@ 0x5a5a5a5a
 802186c:	4806      	ldr	r0, [pc, #24]	@ (8021888 <_lite_kernel_nl_softmax_is8os8+0x7dc>)
 802186e:	465b      	mov	r3, fp
 8021870:	465e      	mov	r6, fp
 8021872:	46bc      	mov	ip, r7
 8021874:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 8021878:	9504      	str	r5, [sp, #16]
 802187a:	9505      	str	r5, [sp, #20]
 802187c:	e61e      	b.n	80214bc <_lite_kernel_nl_softmax_is8os8+0x410>
 802187e:	bf00      	nop
 8021880:	c0000001 	.word	0xc0000001
 8021884:	da5a5a5a 	.word	0xda5a5a5a
 8021888:	20000001 	.word	0x20000001
 802188c:	fba4 0703 	umull	r0, r7, r4, r3
 8021890:	17e5      	asrs	r5, r4, #31
 8021892:	fb04 fc06 	mul.w	ip, r4, r6
 8021896:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 802189a:	fb03 cc05 	mla	ip, r3, r5, ip
 802189e:	eb4c 0707 	adc.w	r7, ip, r7
 80218a2:	2f00      	cmp	r7, #0
 80218a4:	da06      	bge.n	80218b4 <_lite_kernel_nl_softmax_is8os8+0x808>
 80218a6:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80218aa:	eb10 0c0c 	adds.w	ip, r0, ip
 80218ae:	4660      	mov	r0, ip
 80218b0:	f147 0700 	adc.w	r7, r7, #0
 80218b4:	0fc0      	lsrs	r0, r0, #31
 80218b6:	f04f 3cff 	mov.w	ip, #4294967295
 80218ba:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 80218be:	4fcb      	ldr	r7, [pc, #812]	@ (8021bec <_lite_kernel_nl_softmax_is8os8+0xb40>)
 80218c0:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 80218c4:	e664      	b.n	8021590 <_lite_kernel_nl_softmax_is8os8+0x4e4>
 80218c6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80218ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80218ce:	f2c0 818b 	blt.w	8021be8 <_lite_kernel_nl_softmax_is8os8+0xb3c>
 80218d2:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80218d6:	e722      	b.n	802171e <_lite_kernel_nl_softmax_is8os8+0x672>
 80218d8:	f1c3 0900 	rsb	r9, r3, #0
 80218dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80218de:	fb07 f303 	mul.w	r3, r7, r3
 80218e2:	2b01      	cmp	r3, #1
 80218e4:	d904      	bls.n	80218f0 <_lite_kernel_nl_softmax_is8os8+0x844>
 80218e6:	f1b9 0f00 	cmp.w	r9, #0
 80218ea:	f47f abf5 	bne.w	80210d8 <_lite_kernel_nl_softmax_is8os8+0x2c>
 80218ee:	e540      	b.n	8021372 <_lite_kernel_nl_softmax_is8os8+0x2c6>
 80218f0:	fb03 f10a 	mul.w	r1, r3, sl
 80218f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80218f6:	2901      	cmp	r1, #1
 80218f8:	f993 2000 	ldrsb.w	r2, [r3]
 80218fc:	9102      	str	r1, [sp, #8]
 80218fe:	9203      	str	r2, [sp, #12]
 8021900:	f240 816c 	bls.w	8021bdc <_lite_kernel_nl_softmax_is8os8+0xb30>
 8021904:	1e58      	subs	r0, r3, #1
 8021906:	1841      	adds	r1, r0, r1
 8021908:	f913 4f01 	ldrsb.w	r4, [r3, #1]!
 802190c:	42a2      	cmp	r2, r4
 802190e:	bfb8      	it	lt
 8021910:	4622      	movlt	r2, r4
 8021912:	428b      	cmp	r3, r1
 8021914:	d1f8      	bne.n	8021908 <_lite_kernel_nl_softmax_is8os8+0x85c>
 8021916:	9203      	str	r2, [sp, #12]
 8021918:	4605      	mov	r5, r0
 802191a:	9704      	str	r7, [sp, #16]
 802191c:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 8021920:	9b03      	ldr	r3, [sp, #12]
 8021922:	9501      	str	r5, [sp, #4]
 8021924:	f915 cf01 	ldrsb.w	ip, [r5, #1]!
 8021928:	eba3 0c0c 	sub.w	ip, r3, ip
 802192c:	45cc      	cmp	ip, r9
 802192e:	f080 8148 	bcs.w	8021bc2 <_lite_kernel_nl_softmax_is8os8+0xb16>
 8021932:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8021934:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8021936:	fa0c f203 	lsl.w	r2, ip, r3
 802193a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802193c:	4252      	negs	r2, r2
 802193e:	4053      	eors	r3, r2
 8021940:	0fdb      	lsrs	r3, r3, #31
 8021942:	2b00      	cmp	r3, #0
 8021944:	4ba9      	ldr	r3, [pc, #676]	@ (8021bec <_lite_kernel_nl_softmax_is8os8+0xb40>)
 8021946:	bf06      	itte	eq
 8021948:	2100      	moveq	r1, #0
 802194a:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 802194e:	f04f 31ff 	movne.w	r1, #4294967295
 8021952:	fbc2 3100 	smlal	r3, r1, r2, r0
 8021956:	2900      	cmp	r1, #0
 8021958:	da05      	bge.n	8021966 <_lite_kernel_nl_softmax_is8os8+0x8ba>
 802195a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 802195e:	189a      	adds	r2, r3, r2
 8021960:	4613      	mov	r3, r2
 8021962:	f141 0100 	adc.w	r1, r1, #0
 8021966:	0fdb      	lsrs	r3, r3, #31
 8021968:	2400      	movs	r4, #0
 802196a:	ea43 0241 	orr.w	r2, r3, r1, lsl #1
 802196e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8021972:	f042 417f 	orr.w	r1, r2, #4278190080	@ 0xff000000
 8021976:	014f      	lsls	r7, r1, #5
 8021978:	1a89      	subs	r1, r1, r2
 802197a:	f107 5780 	add.w	r7, r7, #268435456	@ 0x10000000
 802197e:	fbc7 3407 	smlal	r3, r4, r7, r7
 8021982:	2c00      	cmp	r4, #0
 8021984:	ea4f 78e7 	mov.w	r8, r7, asr #31
 8021988:	da05      	bge.n	8021996 <_lite_kernel_nl_softmax_is8os8+0x8ea>
 802198a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 802198e:	1818      	adds	r0, r3, r0
 8021990:	4603      	mov	r3, r0
 8021992:	f144 0400 	adc.w	r4, r4, #0
 8021996:	0fdb      	lsrs	r3, r3, #31
 8021998:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 802199c:	17e4      	asrs	r4, r4, #31
 802199e:	fba3 0e03 	umull	r0, lr, r3, r3
 80219a2:	fb03 fa04 	mul.w	sl, r3, r4
 80219a6:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 80219aa:	eb4e 0e4a 	adc.w	lr, lr, sl, lsl #1
 80219ae:	f1be 0f00 	cmp.w	lr, #0
 80219b2:	da06      	bge.n	80219c2 <_lite_kernel_nl_softmax_is8os8+0x916>
 80219b4:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 80219b8:	eb10 0a0a 	adds.w	sl, r0, sl
 80219bc:	4650      	mov	r0, sl
 80219be:	f14e 0e00 	adc.w	lr, lr, #0
 80219c2:	0fc0      	lsrs	r0, r0, #31
 80219c4:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
 80219c8:	ea5f 0ea0 	movs.w	lr, r0, asr #2
 80219cc:	f000 0003 	and.w	r0, r0, #3
 80219d0:	bf54      	ite	pl
 80219d2:	f04f 0a01 	movpl.w	sl, #1
 80219d6:	f04f 0a02 	movmi.w	sl, #2
 80219da:	4550      	cmp	r0, sl
 80219dc:	fb07 f004 	mul.w	r0, r7, r4
 80219e0:	ea87 0403 	eor.w	r4, r7, r3
 80219e4:	bfc8      	it	gt
 80219e6:	f10e 0e01 	addgt.w	lr, lr, #1
 80219ea:	fb03 0008 	mla	r0, r3, r8, r0
 80219ee:	0fe4      	lsrs	r4, r4, #31
 80219f0:	2c00      	cmp	r4, #0
 80219f2:	4c7e      	ldr	r4, [pc, #504]	@ (8021bec <_lite_kernel_nl_softmax_is8os8+0xb40>)
 80219f4:	bf0c      	ite	eq
 80219f6:	f04f 4880 	moveq.w	r8, #1073741824	@ 0x40000000
 80219fa:	46a0      	movne	r8, r4
 80219fc:	fba7 4b03 	umull	r4, fp, r7, r3
 8021a00:	bf0c      	ite	eq
 8021a02:	f04f 0a00 	moveq.w	sl, #0
 8021a06:	f04f 3aff 	movne.w	sl, #4294967295
 8021a0a:	4458      	add	r0, fp
 8021a0c:	eb14 0408 	adds.w	r4, r4, r8
 8021a10:	eb40 000a 	adc.w	r0, r0, sl
 8021a14:	2800      	cmp	r0, #0
 8021a16:	da06      	bge.n	8021a26 <_lite_kernel_nl_softmax_is8os8+0x97a>
 8021a18:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
 8021a1c:	eb14 0808 	adds.w	r8, r4, r8
 8021a20:	4644      	mov	r4, r8
 8021a22:	f140 0000 	adc.w	r0, r0, #0
 8021a26:	0fe4      	lsrs	r4, r4, #31
 8021a28:	4e71      	ldr	r6, [pc, #452]	@ (8021bf0 <_lite_kernel_nl_softmax_is8os8+0xb44>)
 8021a2a:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
 8021a2e:	eb0e 0004 	add.w	r0, lr, r4
 8021a32:	0fc4      	lsrs	r4, r0, #31
 8021a34:	2c00      	cmp	r4, #0
 8021a36:	4c6d      	ldr	r4, [pc, #436]	@ (8021bec <_lite_kernel_nl_softmax_is8os8+0xb40>)
 8021a38:	bf06      	itte	eq
 8021a3a:	f04f 0e00 	moveq.w	lr, #0
 8021a3e:	f04f 4480 	moveq.w	r4, #1073741824	@ 0x40000000
 8021a42:	f04f 3eff 	movne.w	lr, #4294967295
 8021a46:	fbc0 4e06 	smlal	r4, lr, r0, r6
 8021a4a:	f1be 0f00 	cmp.w	lr, #0
 8021a4e:	da05      	bge.n	8021a5c <_lite_kernel_nl_softmax_is8os8+0x9b0>
 8021a50:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8021a54:	1820      	adds	r0, r4, r0
 8021a56:	4604      	mov	r4, r0
 8021a58:	f14e 0e00 	adc.w	lr, lr, #0
 8021a5c:	0fe4      	lsrs	r4, r4, #31
 8021a5e:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
 8021a62:	4423      	add	r3, r4
 8021a64:	07de      	lsls	r6, r3, #31
 8021a66:	ea4f 0463 	mov.w	r4, r3, asr #1
 8021a6a:	d502      	bpl.n	8021a72 <_lite_kernel_nl_softmax_is8os8+0x9c6>
 8021a6c:	2c00      	cmp	r4, #0
 8021a6e:	bfa8      	it	ge
 8021a70:	3401      	addge	r4, #1
 8021a72:	443c      	add	r4, r7
 8021a74:	4e5f      	ldr	r6, [pc, #380]	@ (8021bf4 <_lite_kernel_nl_softmax_is8os8+0xb48>)
 8021a76:	0fe3      	lsrs	r3, r4, #31
 8021a78:	2b00      	cmp	r3, #0
 8021a7a:	4b5c      	ldr	r3, [pc, #368]	@ (8021bec <_lite_kernel_nl_softmax_is8os8+0xb40>)
 8021a7c:	bf0b      	itete	eq
 8021a7e:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 8021a82:	4618      	movne	r0, r3
 8021a84:	2300      	moveq	r3, #0
 8021a86:	f04f 33ff 	movne.w	r3, #4294967295
 8021a8a:	fbc4 0306 	smlal	r0, r3, r4, r6
 8021a8e:	2b00      	cmp	r3, #0
 8021a90:	da05      	bge.n	8021a9e <_lite_kernel_nl_softmax_is8os8+0x9f2>
 8021a92:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8021a96:	1904      	adds	r4, r0, r4
 8021a98:	4620      	mov	r0, r4
 8021a9a:	f143 0300 	adc.w	r3, r3, #0
 8021a9e:	0fc0      	lsrs	r0, r0, #31
 8021aa0:	2400      	movs	r4, #0
 8021aa2:	f3c1 6700 	ubfx	r7, r1, #24, #1
 8021aa6:	4e54      	ldr	r6, [pc, #336]	@ (8021bf8 <_lite_kernel_nl_softmax_is8os8+0xb4c>)
 8021aa8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8021aac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8021ab0:	46a0      	mov	r8, r4
 8021ab2:	3f01      	subs	r7, #1
 8021ab4:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
 8021ab8:	469e      	mov	lr, r3
 8021aba:	fab2 f282 	clz	r2, r2
 8021abe:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
 8021ac2:	0952      	lsrs	r2, r2, #5
 8021ac4:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 8021ac8:	fbc0 e806 	smlal	lr, r8, r0, r6
 8021acc:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8021ad0:	4007      	ands	r7, r0
 8021ad2:	f341 6000 	sbfx	r0, r1, #24, #1
 8021ad6:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 8021ada:	4e48      	ldr	r6, [pc, #288]	@ (8021bfc <_lite_kernel_nl_softmax_is8os8+0xb50>)
 8021adc:	46a0      	mov	r8, r4
 8021ade:	ea00 000e 	and.w	r0, r0, lr
 8021ae2:	469e      	mov	lr, r3
 8021ae4:	4078      	eors	r0, r7
 8021ae6:	f3c1 6740 	ubfx	r7, r1, #25, #1
 8021aea:	fbc0 e806 	smlal	lr, r8, r0, r6
 8021aee:	3f01      	subs	r7, #1
 8021af0:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8021af4:	4e42      	ldr	r6, [pc, #264]	@ (8021c00 <_lite_kernel_nl_softmax_is8os8+0xb54>)
 8021af6:	4007      	ands	r7, r0
 8021af8:	f341 6040 	sbfx	r0, r1, #25, #1
 8021afc:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 8021b00:	46a0      	mov	r8, r4
 8021b02:	ea00 000e 	and.w	r0, r0, lr
 8021b06:	469e      	mov	lr, r3
 8021b08:	4078      	eors	r0, r7
 8021b0a:	f3c1 6780 	ubfx	r7, r1, #26, #1
 8021b0e:	fbc0 e806 	smlal	lr, r8, r0, r6
 8021b12:	3f01      	subs	r7, #1
 8021b14:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8021b18:	4e3a      	ldr	r6, [pc, #232]	@ (8021c04 <_lite_kernel_nl_softmax_is8os8+0xb58>)
 8021b1a:	4007      	ands	r7, r0
 8021b1c:	f341 6080 	sbfx	r0, r1, #26, #1
 8021b20:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 8021b24:	46a0      	mov	r8, r4
 8021b26:	ea00 000e 	and.w	r0, r0, lr
 8021b2a:	469e      	mov	lr, r3
 8021b2c:	4078      	eors	r0, r7
 8021b2e:	f3c1 67c0 	ubfx	r7, r1, #27, #1
 8021b32:	fbc0 e806 	smlal	lr, r8, r0, r6
 8021b36:	3f01      	subs	r7, #1
 8021b38:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8021b3c:	4e32      	ldr	r6, [pc, #200]	@ (8021c08 <_lite_kernel_nl_softmax_is8os8+0xb5c>)
 8021b3e:	4007      	ands	r7, r0
 8021b40:	f341 60c0 	sbfx	r0, r1, #27, #1
 8021b44:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 8021b48:	46a0      	mov	r8, r4
 8021b4a:	ea00 000e 	and.w	r0, r0, lr
 8021b4e:	469e      	mov	lr, r3
 8021b50:	4078      	eors	r0, r7
 8021b52:	f3c1 7700 	ubfx	r7, r1, #28, #1
 8021b56:	fbc0 e806 	smlal	lr, r8, r0, r6
 8021b5a:	3f01      	subs	r7, #1
 8021b5c:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8021b60:	4e2a      	ldr	r6, [pc, #168]	@ (8021c0c <_lite_kernel_nl_softmax_is8os8+0xb60>)
 8021b62:	4007      	ands	r7, r0
 8021b64:	f341 7000 	sbfx	r0, r1, #28, #1
 8021b68:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 8021b6c:	46a0      	mov	r8, r4
 8021b6e:	ea00 000e 	and.w	r0, r0, lr
 8021b72:	469e      	mov	lr, r3
 8021b74:	4078      	eors	r0, r7
 8021b76:	f3c1 7740 	ubfx	r7, r1, #29, #1
 8021b7a:	fbc0 e806 	smlal	lr, r8, r0, r6
 8021b7e:	3f01      	subs	r7, #1
 8021b80:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8021b84:	4007      	ands	r7, r0
 8021b86:	f341 7040 	sbfx	r0, r1, #29, #1
 8021b8a:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 8021b8e:	ea00 000e 	and.w	r0, r0, lr
 8021b92:	4078      	eors	r0, r7
 8021b94:	27f2      	movs	r7, #242	@ 0xf2
 8021b96:	fbc0 3407 	smlal	r3, r4, r0, r7
 8021b9a:	0fdb      	lsrs	r3, r3, #31
 8021b9c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8021ba0:	f3c1 7480 	ubfx	r4, r1, #30, #1
 8021ba4:	f341 7180 	sbfx	r1, r1, #30, #1
 8021ba8:	3c01      	subs	r4, #1
 8021baa:	4019      	ands	r1, r3
 8021bac:	1e53      	subs	r3, r2, #1
 8021bae:	4004      	ands	r4, r0
 8021bb0:	4252      	negs	r2, r2
 8021bb2:	4061      	eors	r1, r4
 8021bb4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8021bb8:	400b      	ands	r3, r1
 8021bba:	4053      	eors	r3, r2
 8021bbc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8021bbe:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8021bc2:	9b01      	ldr	r3, [sp, #4]
 8021bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021bc6:	3302      	adds	r3, #2
 8021bc8:	1a9b      	subs	r3, r3, r2
 8021bca:	9a02      	ldr	r2, [sp, #8]
 8021bcc:	429a      	cmp	r2, r3
 8021bce:	f63f aea7 	bhi.w	8021920 <_lite_kernel_nl_softmax_is8os8+0x874>
 8021bd2:	9f04      	ldr	r7, [sp, #16]
 8021bd4:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 8021bd8:	f7ff bbcb 	b.w	8021372 <_lite_kernel_nl_softmax_is8os8+0x2c6>
 8021bdc:	2900      	cmp	r1, #0
 8021bde:	f43f abc8 	beq.w	8021372 <_lite_kernel_nl_softmax_is8os8+0x2c6>
 8021be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021be4:	1e58      	subs	r0, r3, #1
 8021be6:	e697      	b.n	8021918 <_lite_kernel_nl_softmax_is8os8+0x86c>
 8021be8:	005e      	lsls	r6, r3, #1
 8021bea:	e629      	b.n	8021840 <_lite_kernel_nl_softmax_is8os8+0x794>
 8021bec:	c0000001 	.word	0xc0000001
 8021bf0:	2aaaaaab 	.word	0x2aaaaaab
 8021bf4:	70f5a894 	.word	0x70f5a894
 8021bf8:	63afbe7b 	.word	0x63afbe7b
 8021bfc:	4da2cbf2 	.word	0x4da2cbf2
 8021c00:	2f16ac6c 	.word	0x2f16ac6c
 8021c04:	1152aaa4 	.word	0x1152aaa4
 8021c08:	02582ab7 	.word	0x02582ab7
 8021c0c:	000afe11 	.word	0x000afe11

08021c10 <_lite_kernel_nl_softmax_iu8ou8>:
 8021c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c14:	b09d      	sub	sp, #116	@ 0x74
 8021c16:	4698      	mov	r8, r3
 8021c18:	e9cd 0117 	strd	r0, r1, [sp, #92]	@ 0x5c
 8021c1c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021c1e:	921b      	str	r2, [sp, #108]	@ 0x6c
 8021c20:	2a00      	cmp	r2, #0
 8021c22:	f000 83d8 	beq.w	80223d6 <_lite_kernel_nl_softmax_iu8ou8+0x7c6>
 8021c26:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021c28:	fb02 f208 	mul.w	r2, r2, r8
 8021c2c:	921a      	str	r2, [sp, #104]	@ 0x68
 8021c2e:	f1b8 0f00 	cmp.w	r8, #0
 8021c32:	f000 83d0 	beq.w	80223d6 <_lite_kernel_nl_softmax_iu8ou8+0x7c6>
 8021c36:	2200      	movs	r2, #0
 8021c38:	3b04      	subs	r3, #4
 8021c3a:	f8cd 8004 	str.w	r8, [sp, #4]
 8021c3e:	9219      	str	r2, [sp, #100]	@ 0x64
 8021c40:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021c42:	9314      	str	r3, [sp, #80]	@ 0x50
 8021c44:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021c48:	9316      	str	r3, [sp, #88]	@ 0x58
 8021c4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021c4c:	9a01      	ldr	r2, [sp, #4]
 8021c4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021c50:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021c52:	9312      	str	r3, [sp, #72]	@ 0x48
 8021c54:	4413      	add	r3, r2
 8021c56:	9315      	str	r3, [sp, #84]	@ 0x54
 8021c58:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021c5a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021c5c:	7819      	ldrb	r1, [r3, #0]
 8021c5e:	2a01      	cmp	r2, #1
 8021c60:	9110      	str	r1, [sp, #64]	@ 0x40
 8021c62:	f240 83cf 	bls.w	8022404 <_lite_kernel_nl_softmax_iu8ou8+0x7f4>
 8021c66:	9c01      	ldr	r4, [sp, #4]
 8021c68:	4615      	mov	r5, r2
 8021c6a:	191a      	adds	r2, r3, r4
 8021c6c:	2301      	movs	r3, #1
 8021c6e:	7810      	ldrb	r0, [r2, #0]
 8021c70:	3301      	adds	r3, #1
 8021c72:	4422      	add	r2, r4
 8021c74:	4281      	cmp	r1, r0
 8021c76:	bfb8      	it	lt
 8021c78:	4601      	movlt	r1, r0
 8021c7a:	429d      	cmp	r5, r3
 8021c7c:	d1f7      	bne.n	8021c6e <_lite_kernel_nl_softmax_iu8ou8+0x5e>
 8021c7e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021c80:	9110      	str	r1, [sp, #64]	@ 0x40
 8021c82:	440b      	add	r3, r1
 8021c84:	9303      	str	r3, [sp, #12]
 8021c86:	2300      	movs	r3, #0
 8021c88:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 8021c8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021c8e:	469b      	mov	fp, r3
 8021c90:	46d4      	mov	ip, sl
 8021c92:	4699      	mov	r9, r3
 8021c94:	9302      	str	r3, [sp, #8]
 8021c96:	9200      	str	r2, [sp, #0]
 8021c98:	e103      	b.n	8021ea2 <_lite_kernel_nl_softmax_iu8ou8+0x292>
 8021c9a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021c9c:	1a9b      	subs	r3, r3, r2
 8021c9e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8021ca0:	4093      	lsls	r3, r2
 8021ca2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8021ca4:	405a      	eors	r2, r3
 8021ca6:	0fd2      	lsrs	r2, r2, #31
 8021ca8:	2a00      	cmp	r2, #0
 8021caa:	4ac6      	ldr	r2, [pc, #792]	@ (8021fc4 <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 8021cac:	bf0b      	itete	eq
 8021cae:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8021cb2:	4611      	movne	r1, r2
 8021cb4:	2200      	moveq	r2, #0
 8021cb6:	f04f 32ff 	movne.w	r2, #4294967295
 8021cba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8021cbe:	f040 80f8 	bne.w	8021eb2 <_lite_kernel_nl_softmax_iu8ou8+0x2a2>
 8021cc2:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8021cc4:	4298      	cmp	r0, r3
 8021cc6:	f040 80f4 	bne.w	8021eb2 <_lite_kernel_nl_softmax_iu8ou8+0x2a2>
 8021cca:	4bbf      	ldr	r3, [pc, #764]	@ (8021fc8 <_lite_kernel_nl_softmax_iu8ou8+0x3b8>)
 8021ccc:	2200      	movs	r2, #0
 8021cce:	f04f 36ff 	mov.w	r6, #4294967295
 8021cd2:	4dbe      	ldr	r5, [pc, #760]	@ (8021fcc <_lite_kernel_nl_softmax_iu8ou8+0x3bc>)
 8021cd4:	930e      	str	r3, [sp, #56]	@ 0x38
 8021cd6:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8021cda:	4bbd      	ldr	r3, [pc, #756]	@ (8021fd0 <_lite_kernel_nl_softmax_iu8ou8+0x3c0>)
 8021cdc:	4696      	mov	lr, r2
 8021cde:	4637      	mov	r7, r6
 8021ce0:	46b3      	mov	fp, r6
 8021ce2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021ce4:	46b0      	mov	r8, r6
 8021ce6:	4bbb      	ldr	r3, [pc, #748]	@ (8021fd4 <_lite_kernel_nl_softmax_iu8ou8+0x3c4>)
 8021ce8:	4614      	mov	r4, r2
 8021cea:	4692      	mov	sl, r2
 8021cec:	2001      	movs	r0, #1
 8021cee:	9207      	str	r2, [sp, #28]
 8021cf0:	9204      	str	r2, [sp, #16]
 8021cf2:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8021cf6:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 8021cfa:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8021cfe:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8021d02:	4282      	cmp	r2, r0
 8021d04:	4aaf      	ldr	r2, [pc, #700]	@ (8021fc4 <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 8021d06:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021d08:	bfc8      	it	gt
 8021d0a:	3101      	addgt	r1, #1
 8021d0c:	f1be 0f00 	cmp.w	lr, #0
 8021d10:	bf06      	itte	eq
 8021d12:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8021d16:	f04f 0e00 	moveq.w	lr, #0
 8021d1a:	f04f 3eff 	movne.w	lr, #4294967295
 8021d1e:	1882      	adds	r2, r0, r2
 8021d20:	eb43 0e0e 	adc.w	lr, r3, lr
 8021d24:	f1be 0f00 	cmp.w	lr, #0
 8021d28:	da05      	bge.n	8021d36 <_lite_kernel_nl_softmax_iu8ou8+0x126>
 8021d2a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8021d2e:	18d3      	adds	r3, r2, r3
 8021d30:	461a      	mov	r2, r3
 8021d32:	f14e 0e00 	adc.w	lr, lr, #0
 8021d36:	0fd2      	lsrs	r2, r2, #31
 8021d38:	48a7      	ldr	r0, [pc, #668]	@ (8021fd8 <_lite_kernel_nl_softmax_iu8ou8+0x3c8>)
 8021d3a:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
 8021d3e:	440a      	add	r2, r1
 8021d40:	0fd3      	lsrs	r3, r2, #31
 8021d42:	2b00      	cmp	r3, #0
 8021d44:	4b9f      	ldr	r3, [pc, #636]	@ (8021fc4 <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 8021d46:	bf06      	itte	eq
 8021d48:	2100      	moveq	r1, #0
 8021d4a:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8021d4e:	f04f 31ff 	movne.w	r1, #4294967295
 8021d52:	fbc2 3100 	smlal	r3, r1, r2, r0
 8021d56:	2900      	cmp	r1, #0
 8021d58:	da05      	bge.n	8021d66 <_lite_kernel_nl_softmax_iu8ou8+0x156>
 8021d5a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8021d5e:	189a      	adds	r2, r3, r2
 8021d60:	4613      	mov	r3, r2
 8021d62:	f141 0100 	adc.w	r1, r1, #0
 8021d66:	0fdb      	lsrs	r3, r3, #31
 8021d68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021d6a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8021d6e:	441a      	add	r2, r3
 8021d70:	07d0      	lsls	r0, r2, #31
 8021d72:	ea4f 0362 	mov.w	r3, r2, asr #1
 8021d76:	d502      	bpl.n	8021d7e <_lite_kernel_nl_softmax_iu8ou8+0x16e>
 8021d78:	2b00      	cmp	r3, #0
 8021d7a:	bfa8      	it	ge
 8021d7c:	3301      	addge	r3, #1
 8021d7e:	442b      	add	r3, r5
 8021d80:	4896      	ldr	r0, [pc, #600]	@ (8021fdc <_lite_kernel_nl_softmax_iu8ou8+0x3cc>)
 8021d82:	0fda      	lsrs	r2, r3, #31
 8021d84:	2a00      	cmp	r2, #0
 8021d86:	4a8f      	ldr	r2, [pc, #572]	@ (8021fc4 <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 8021d88:	bf06      	itte	eq
 8021d8a:	2100      	moveq	r1, #0
 8021d8c:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8021d90:	f04f 31ff 	movne.w	r1, #4294967295
 8021d94:	fbc3 2100 	smlal	r2, r1, r3, r0
 8021d98:	2900      	cmp	r1, #0
 8021d9a:	da05      	bge.n	8021da8 <_lite_kernel_nl_softmax_iu8ou8+0x198>
 8021d9c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8021da0:	18d3      	adds	r3, r2, r3
 8021da2:	461a      	mov	r2, r3
 8021da4:	f141 0100 	adc.w	r1, r1, #0
 8021da8:	0fd2      	lsrs	r2, r2, #31
 8021daa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8021dae:	488c      	ldr	r0, [pc, #560]	@ (8021fe0 <_lite_kernel_nl_softmax_iu8ou8+0x3d0>)
 8021db0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8021db4:	2100      	movs	r1, #0
 8021db6:	461d      	mov	r5, r3
 8021db8:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
 8021dbc:	468e      	mov	lr, r1
 8021dbe:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
 8021dc2:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 8021dc6:	fbc2 5e00 	smlal	r5, lr, r2, r0
 8021dca:	0fed      	lsrs	r5, r5, #31
 8021dcc:	ea08 0802 	and.w	r8, r8, r2
 8021dd0:	4884      	ldr	r0, [pc, #528]	@ (8021fe4 <_lite_kernel_nl_softmax_iu8ou8+0x3d4>)
 8021dd2:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
 8021dd6:	461a      	mov	r2, r3
 8021dd8:	402c      	ands	r4, r5
 8021dda:	460d      	mov	r5, r1
 8021ddc:	ea88 0404 	eor.w	r4, r8, r4
 8021de0:	fbc4 2500 	smlal	r2, r5, r4, r0
 8021de4:	0fd2      	lsrs	r2, r2, #31
 8021de6:	9807      	ldr	r0, [sp, #28]
 8021de8:	4027      	ands	r7, r4
 8021dea:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8021dee:	460c      	mov	r4, r1
 8021df0:	4d7d      	ldr	r5, [pc, #500]	@ (8021fe8 <_lite_kernel_nl_softmax_iu8ou8+0x3d8>)
 8021df2:	4010      	ands	r0, r2
 8021df4:	461a      	mov	r2, r3
 8021df6:	4078      	eors	r0, r7
 8021df8:	4f7c      	ldr	r7, [pc, #496]	@ (8021fec <_lite_kernel_nl_softmax_iu8ou8+0x3dc>)
 8021dfa:	fbc0 2405 	smlal	r2, r4, r0, r5
 8021dfe:	0fd2      	lsrs	r2, r2, #31
 8021e00:	ea0b 0b00 	and.w	fp, fp, r0
 8021e04:	4d7a      	ldr	r5, [pc, #488]	@ (8021ff0 <_lite_kernel_nl_softmax_iu8ou8+0x3e0>)
 8021e06:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8021e0a:	460c      	mov	r4, r1
 8021e0c:	ea0a 0a02 	and.w	sl, sl, r2
 8021e10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021e12:	ea8b 0a0a 	eor.w	sl, fp, sl
 8021e16:	ea02 000a 	and.w	r0, r2, sl
 8021e1a:	461a      	mov	r2, r3
 8021e1c:	fbca 2405 	smlal	r2, r4, sl, r5
 8021e20:	0fd2      	lsrs	r2, r2, #31
 8021e22:	460d      	mov	r5, r1
 8021e24:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8021e28:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021e2a:	4014      	ands	r4, r2
 8021e2c:	4622      	mov	r2, r4
 8021e2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021e30:	4042      	eors	r2, r0
 8021e32:	4618      	mov	r0, r3
 8021e34:	fbc2 0507 	smlal	r0, r5, r2, r7
 8021e38:	0fc0      	lsrs	r0, r0, #31
 8021e3a:	4014      	ands	r4, r2
 8021e3c:	9a06      	ldr	r2, [sp, #24]
 8021e3e:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8021e42:	4f6c      	ldr	r7, [pc, #432]	@ (8021ff4 <_lite_kernel_nl_softmax_iu8ou8+0x3e4>)
 8021e44:	460d      	mov	r5, r1
 8021e46:	4002      	ands	r2, r0
 8021e48:	4618      	mov	r0, r3
 8021e4a:	4062      	eors	r2, r4
 8021e4c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021e4e:	fbc2 0507 	smlal	r0, r5, r2, r7
 8021e52:	0fc0      	lsrs	r0, r0, #31
 8021e54:	4014      	ands	r4, r2
 8021e56:	9a05      	ldr	r2, [sp, #20]
 8021e58:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 8021e5c:	4002      	ands	r2, r0
 8021e5e:	20f2      	movs	r0, #242	@ 0xf2
 8021e60:	4062      	eors	r2, r4
 8021e62:	fbc2 3100 	smlal	r3, r1, r2, r0
 8021e66:	0fdb      	lsrs	r3, r3, #31
 8021e68:	4032      	ands	r2, r6
 8021e6a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8021e6e:	9904      	ldr	r1, [sp, #16]
 8021e70:	4019      	ands	r1, r3
 8021e72:	9b08      	ldr	r3, [sp, #32]
 8021e74:	404a      	eors	r2, r1
 8021e76:	401a      	ands	r2, r3
 8021e78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021e7a:	405a      	eors	r2, r3
 8021e7c:	1313      	asrs	r3, r2, #12
 8021e7e:	0511      	lsls	r1, r2, #20
 8021e80:	9902      	ldr	r1, [sp, #8]
 8021e82:	bf48      	it	mi
 8021e84:	3301      	addmi	r3, #1
 8021e86:	4419      	add	r1, r3
 8021e88:	9102      	str	r1, [sp, #8]
 8021e8a:	9b00      	ldr	r3, [sp, #0]
 8021e8c:	f109 0901 	add.w	r9, r9, #1
 8021e90:	f843 2f04 	str.w	r2, [r3, #4]!
 8021e94:	9300      	str	r3, [sp, #0]
 8021e96:	9b01      	ldr	r3, [sp, #4]
 8021e98:	449c      	add	ip, r3
 8021e9a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021e9c:	454b      	cmp	r3, r9
 8021e9e:	f240 80ab 	bls.w	8021ff8 <_lite_kernel_nl_softmax_iu8ou8+0x3e8>
 8021ea2:	f89c 3000 	ldrb.w	r3, [ip]
 8021ea6:	9a03      	ldr	r2, [sp, #12]
 8021ea8:	429a      	cmp	r2, r3
 8021eaa:	f77f aef6 	ble.w	8021c9a <_lite_kernel_nl_softmax_iu8ou8+0x8a>
 8021eae:	2200      	movs	r2, #0
 8021eb0:	e7eb      	b.n	8021e8a <_lite_kernel_nl_softmax_iu8ou8+0x27a>
 8021eb2:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8021eb4:	fbc3 1200 	smlal	r1, r2, r3, r0
 8021eb8:	2a00      	cmp	r2, #0
 8021eba:	da04      	bge.n	8021ec6 <_lite_kernel_nl_softmax_iu8ou8+0x2b6>
 8021ebc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8021ec0:	18c9      	adds	r1, r1, r3
 8021ec2:	f142 0200 	adc.w	r2, r2, #0
 8021ec6:	0fc9      	lsrs	r1, r1, #31
 8021ec8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8021ecc:	2600      	movs	r6, #0
 8021ece:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 8021ed2:	f041 477f 	orr.w	r7, r1, #4278190080	@ 0xff000000
 8021ed6:	017d      	lsls	r5, r7, #5
 8021ed8:	1a7f      	subs	r7, r7, r1
 8021eda:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 8021ede:	fbc5 3605 	smlal	r3, r6, r5, r5
 8021ee2:	2e00      	cmp	r6, #0
 8021ee4:	da05      	bge.n	8021ef2 <_lite_kernel_nl_softmax_iu8ou8+0x2e2>
 8021ee6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8021eea:	189a      	adds	r2, r3, r2
 8021eec:	4613      	mov	r3, r2
 8021eee:	f146 0600 	adc.w	r6, r6, #0
 8021ef2:	0fdb      	lsrs	r3, r3, #31
 8021ef4:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8021ef8:	17f6      	asrs	r6, r6, #31
 8021efa:	fba3 2003 	umull	r2, r0, r3, r3
 8021efe:	fb03 f406 	mul.w	r4, r3, r6
 8021f02:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8021f06:	930e      	str	r3, [sp, #56]	@ 0x38
 8021f08:	eb40 0044 	adc.w	r0, r0, r4, lsl #1
 8021f0c:	2800      	cmp	r0, #0
 8021f0e:	da05      	bge.n	8021f1c <_lite_kernel_nl_softmax_iu8ou8+0x30c>
 8021f10:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8021f14:	1914      	adds	r4, r2, r4
 8021f16:	4622      	mov	r2, r4
 8021f18:	f140 0000 	adc.w	r0, r0, #0
 8021f1c:	0fd2      	lsrs	r2, r2, #31
 8021f1e:	f3c7 6400 	ubfx	r4, r7, #24, #1
 8021f22:	fb05 f606 	mul.w	r6, r5, r6
 8021f26:	ea83 0e05 	eor.w	lr, r3, r5
 8021f2a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8021f2e:	9411      	str	r4, [sp, #68]	@ 0x44
 8021f30:	17e8      	asrs	r0, r5, #31
 8021f32:	fab1 f181 	clz	r1, r1
 8021f36:	f3c7 7b80 	ubfx	fp, r7, #30, #1
 8021f3a:	f3c7 7a40 	ubfx	sl, r7, #29, #1
 8021f3e:	fb03 6600 	mla	r6, r3, r0, r6
 8021f42:	0949      	lsrs	r1, r1, #5
 8021f44:	fba5 4303 	umull	r4, r3, r5, r3
 8021f48:	f3c7 7000 	ubfx	r0, r7, #28, #1
 8021f4c:	f3c7 6880 	ubfx	r8, r7, #26, #1
 8021f50:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 8021f54:	940f      	str	r4, [sp, #60]	@ 0x3c
 8021f56:	f347 64c0 	sbfx	r4, r7, #27, #1
 8021f5a:	4433      	add	r3, r6
 8021f5c:	424e      	negs	r6, r1
 8021f5e:	940c      	str	r4, [sp, #48]	@ 0x30
 8021f60:	3901      	subs	r1, #1
 8021f62:	f1cb 0400 	rsb	r4, fp, #0
 8021f66:	9006      	str	r0, [sp, #24]
 8021f68:	9108      	str	r1, [sp, #32]
 8021f6a:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 8021f6e:	9404      	str	r4, [sp, #16]
 8021f70:	f10a 34ff 	add.w	r4, sl, #4294967295
 8021f74:	f3c7 6040 	ubfx	r0, r7, #25, #1
 8021f78:	910d      	str	r1, [sp, #52]	@ 0x34
 8021f7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021f7c:	f3c7 61c0 	ubfx	r1, r7, #27, #1
 8021f80:	f1ca 0400 	rsb	r4, sl, #0
 8021f84:	9f06      	ldr	r7, [sp, #24]
 8021f86:	3901      	subs	r1, #1
 8021f88:	f10b 36ff 	add.w	r6, fp, #4294967295
 8021f8c:	9405      	str	r4, [sp, #20]
 8021f8e:	1e7c      	subs	r4, r7, #1
 8021f90:	9109      	str	r1, [sp, #36]	@ 0x24
 8021f92:	1091      	asrs	r1, r2, #2
 8021f94:	940a      	str	r4, [sp, #40]	@ 0x28
 8021f96:	f1c7 0400 	rsb	r4, r7, #0
 8021f9a:	f100 37ff 	add.w	r7, r0, #4294967295
 8021f9e:	f1c0 0000 	rsb	r0, r0, #0
 8021fa2:	f108 3bff 	add.w	fp, r8, #4294967295
 8021fa6:	f1c8 0a00 	rsb	sl, r8, #0
 8021faa:	9007      	str	r0, [sp, #28]
 8021fac:	f002 0203 	and.w	r2, r2, #3
 8021fb0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8021fb2:	9406      	str	r4, [sp, #24]
 8021fb4:	f100 38ff 	add.w	r8, r0, #4294967295
 8021fb8:	f1c0 0400 	rsb	r4, r0, #0
 8021fbc:	bf54      	ite	pl
 8021fbe:	2001      	movpl	r0, #1
 8021fc0:	2002      	movmi	r0, #2
 8021fc2:	e69e      	b.n	8021d02 <_lite_kernel_nl_softmax_iu8ou8+0xf2>
 8021fc4:	c0000001 	.word	0xc0000001
 8021fc8:	01fffff8 	.word	0x01fffff8
 8021fcc:	0fffffe0 	.word	0x0fffffe0
 8021fd0:	40000100 	.word	0x40000100
 8021fd4:	001fffff 	.word	0x001fffff
 8021fd8:	2aaaaaab 	.word	0x2aaaaaab
 8021fdc:	70f5a894 	.word	0x70f5a894
 8021fe0:	63afbe7b 	.word	0x63afbe7b
 8021fe4:	4da2cbf2 	.word	0x4da2cbf2
 8021fe8:	2f16ac6c 	.word	0x2f16ac6c
 8021fec:	02582ab7 	.word	0x02582ab7
 8021ff0:	1152aaa4 	.word	0x1152aaa4
 8021ff4:	000afe11 	.word	0x000afe11
 8021ff8:	9b02      	ldr	r3, [sp, #8]
 8021ffa:	2b00      	cmp	r3, #0
 8021ffc:	f000 8203 	beq.w	8022406 <_lite_kernel_nl_softmax_iu8ou8+0x7f6>
 8022000:	fab3 f983 	clz	r9, r3
 8022004:	fa03 f209 	lsl.w	r2, r3, r9
 8022008:	f1c9 0a23 	rsb	sl, r9, #35	@ 0x23
 802200c:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 8022010:	17d9      	asrs	r1, r3, #31
 8022012:	f1b1 3fff 	cmp.w	r1, #4294967295
 8022016:	bf08      	it	eq
 8022018:	2a00      	cmpeq	r2, #0
 802201a:	f000 81f8 	beq.w	802240e <_lite_kernel_nl_softmax_iu8ou8+0x7fe>
 802201e:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 8022022:	4ac3      	ldr	r2, [pc, #780]	@ (8022330 <_lite_kernel_nl_softmax_iu8ou8+0x720>)
 8022024:	4dc3      	ldr	r5, [pc, #780]	@ (8022334 <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 8022026:	f141 0100 	adc.w	r1, r1, #0
 802202a:	085b      	lsrs	r3, r3, #1
 802202c:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 8022030:	1049      	asrs	r1, r1, #1
 8022032:	4258      	negs	r0, r3
 8022034:	469c      	mov	ip, r3
 8022036:	fb02 0001 	mla	r0, r2, r1, r0
 802203a:	fba3 2402 	umull	r2, r4, r3, r2
 802203e:	1952      	adds	r2, r2, r5
 8022040:	4420      	add	r0, r4
 8022042:	f160 0000 	sbc.w	r0, r0, #0
 8022046:	2800      	cmp	r0, #0
 8022048:	da05      	bge.n	8022056 <_lite_kernel_nl_softmax_iu8ou8+0x446>
 802204a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 802204e:	1914      	adds	r4, r2, r4
 8022050:	4622      	mov	r2, r4
 8022052:	f140 0000 	adc.w	r0, r0, #0
 8022056:	0fd2      	lsrs	r2, r2, #31
 8022058:	ea42 0440 	orr.w	r4, r2, r0, lsl #1
 802205c:	f104 365a 	add.w	r6, r4, #1515870810	@ 0x5a5a5a5a
 8022060:	17f0      	asrs	r0, r6, #31
 8022062:	fba3 2706 	umull	r2, r7, r3, r6
 8022066:	4635      	mov	r5, r6
 8022068:	fb03 fe00 	mul.w	lr, r3, r0
 802206c:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8022070:	fb06 ee01 	mla	lr, r6, r1, lr
 8022074:	eb4e 0707 	adc.w	r7, lr, r7
 8022078:	2f00      	cmp	r7, #0
 802207a:	da06      	bge.n	802208a <_lite_kernel_nl_softmax_iu8ou8+0x47a>
 802207c:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8022080:	eb12 0e0e 	adds.w	lr, r2, lr
 8022084:	4672      	mov	r2, lr
 8022086:	f147 0700 	adc.w	r7, r7, #0
 802208a:	0fd2      	lsrs	r2, r2, #31
 802208c:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 8022090:	4fa8      	ldr	r7, [pc, #672]	@ (8022334 <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 8022092:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 8022096:	ea82 0e06 	eor.w	lr, r2, r6
 802209a:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 802209e:	f1be 0f00 	cmp.w	lr, #0
 80220a2:	bf06      	itte	eq
 80220a4:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 80220a8:	f04f 0800 	moveq.w	r8, #0
 80220ac:	f04f 38ff 	movne.w	r8, #4294967295
 80220b0:	fb02 f000 	mul.w	r0, r2, r0
 80220b4:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 80220b8:	fb05 000e 	mla	r0, r5, lr, r0
 80220bc:	fba2 2505 	umull	r2, r5, r2, r5
 80220c0:	19d2      	adds	r2, r2, r7
 80220c2:	4428      	add	r0, r5
 80220c4:	eb40 0508 	adc.w	r5, r0, r8
 80220c8:	2d00      	cmp	r5, #0
 80220ca:	da05      	bge.n	80220d8 <_lite_kernel_nl_softmax_iu8ou8+0x4c8>
 80220cc:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80220d0:	1810      	adds	r0, r2, r0
 80220d2:	4602      	mov	r2, r0
 80220d4:	f145 0500 	adc.w	r5, r5, #0
 80220d8:	0fd2      	lsrs	r2, r2, #31
 80220da:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80220de:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 80220e2:	dd7f      	ble.n	80221e4 <_lite_kernel_nl_softmax_iu8ou8+0x5d4>
 80220e4:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 80220e8:	4e92      	ldr	r6, [pc, #584]	@ (8022334 <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 80220ea:	ea80 020c 	eor.w	r2, r0, ip
 80220ee:	17c4      	asrs	r4, r0, #31
 80220f0:	fb00 f501 	mul.w	r5, r0, r1
 80220f4:	0fd2      	lsrs	r2, r2, #31
 80220f6:	fb03 5504 	mla	r5, r3, r4, r5
 80220fa:	2a00      	cmp	r2, #0
 80220fc:	fba0 2e03 	umull	r2, lr, r0, r3
 8022100:	bf06      	itte	eq
 8022102:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 8022106:	2700      	moveq	r7, #0
 8022108:	f04f 37ff 	movne.w	r7, #4294967295
 802210c:	4475      	add	r5, lr
 802210e:	1992      	adds	r2, r2, r6
 8022110:	eb45 0507 	adc.w	r5, r5, r7
 8022114:	2d00      	cmp	r5, #0
 8022116:	da05      	bge.n	8022124 <_lite_kernel_nl_softmax_iu8ou8+0x514>
 8022118:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 802211c:	1996      	adds	r6, r2, r6
 802211e:	4632      	mov	r2, r6
 8022120:	f145 0500 	adc.w	r5, r5, #0
 8022124:	0fd2      	lsrs	r2, r2, #31
 8022126:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 802212a:	4d82      	ldr	r5, [pc, #520]	@ (8022334 <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 802212c:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 8022130:	ea80 0602 	eor.w	r6, r0, r2
 8022134:	0ff6      	lsrs	r6, r6, #31
 8022136:	2e00      	cmp	r6, #0
 8022138:	bf06      	itte	eq
 802213a:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 802213e:	2600      	moveq	r6, #0
 8022140:	f04f 36ff 	movne.w	r6, #4294967295
 8022144:	fb02 f404 	mul.w	r4, r2, r4
 8022148:	17d7      	asrs	r7, r2, #31
 802214a:	fb00 4407 	mla	r4, r0, r7, r4
 802214e:	fba2 2700 	umull	r2, r7, r2, r0
 8022152:	1952      	adds	r2, r2, r5
 8022154:	443c      	add	r4, r7
 8022156:	eb44 0406 	adc.w	r4, r4, r6
 802215a:	2c00      	cmp	r4, #0
 802215c:	da05      	bge.n	802216a <_lite_kernel_nl_softmax_iu8ou8+0x55a>
 802215e:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8022162:	1955      	adds	r5, r2, r5
 8022164:	462a      	mov	r2, r5
 8022166:	f144 0400 	adc.w	r4, r4, #0
 802216a:	0fd2      	lsrs	r2, r2, #31
 802216c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8022170:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8022174:	db65      	blt.n	8022242 <_lite_kernel_nl_softmax_iu8ou8+0x632>
 8022176:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 802217a:	1902      	adds	r2, r0, r4
 802217c:	ea92 0f0c 	teq	r2, ip
 8022180:	f140 813c 	bpl.w	80223fc <_lite_kernel_nl_softmax_iu8ou8+0x7ec>
 8022184:	4c6b      	ldr	r4, [pc, #428]	@ (8022334 <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 8022186:	f04f 35ff 	mov.w	r5, #4294967295
 802218a:	fb02 f101 	mul.w	r1, r2, r1
 802218e:	17d0      	asrs	r0, r2, #31
 8022190:	fb03 1100 	mla	r1, r3, r0, r1
 8022194:	fba2 3603 	umull	r3, r6, r2, r3
 8022198:	191b      	adds	r3, r3, r4
 802219a:	4431      	add	r1, r6
 802219c:	eb41 0105 	adc.w	r1, r1, r5
 80221a0:	2900      	cmp	r1, #0
 80221a2:	da05      	bge.n	80221b0 <_lite_kernel_nl_softmax_iu8ou8+0x5a0>
 80221a4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80221a8:	191c      	adds	r4, r3, r4
 80221aa:	4623      	mov	r3, r4
 80221ac:	f141 0100 	adc.w	r1, r1, #0
 80221b0:	0fdb      	lsrs	r3, r3, #31
 80221b2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80221b6:	495f      	ldr	r1, [pc, #380]	@ (8022334 <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 80221b8:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 80221bc:	ea83 0402 	eor.w	r4, r3, r2
 80221c0:	0fe4      	lsrs	r4, r4, #31
 80221c2:	2c00      	cmp	r4, #0
 80221c4:	bf06      	itte	eq
 80221c6:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 80221ca:	2400      	moveq	r4, #0
 80221cc:	f04f 34ff 	movne.w	r4, #4294967295
 80221d0:	4293      	cmp	r3, r2
 80221d2:	d15d      	bne.n	8022290 <_lite_kernel_nl_softmax_iu8ou8+0x680>
 80221d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80221d8:	d15a      	bne.n	8022290 <_lite_kernel_nl_softmax_iu8ou8+0x680>
 80221da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80221de:	4411      	add	r1, r2
 80221e0:	0049      	lsls	r1, r1, #1
 80221e2:	e076      	b.n	80222d2 <_lite_kernel_nl_softmax_iu8ou8+0x6c2>
 80221e4:	4854      	ldr	r0, [pc, #336]	@ (8022338 <_lite_kernel_nl_softmax_iu8ou8+0x728>)
 80221e6:	4420      	add	r0, r4
 80221e8:	ea90 0f0c 	teq	r0, ip
 80221ec:	f140 811d 	bpl.w	802242a <_lite_kernel_nl_softmax_iu8ou8+0x81a>
 80221f0:	17c2      	asrs	r2, r0, #31
 80221f2:	fb00 f401 	mul.w	r4, r0, r1
 80221f6:	4d4f      	ldr	r5, [pc, #316]	@ (8022334 <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 80221f8:	fb03 4402 	mla	r4, r3, r2, r4
 80221fc:	fba0 2603 	umull	r2, r6, r0, r3
 8022200:	1952      	adds	r2, r2, r5
 8022202:	4434      	add	r4, r6
 8022204:	f164 0500 	sbc.w	r5, r4, #0
 8022208:	2d00      	cmp	r5, #0
 802220a:	da05      	bge.n	8022218 <_lite_kernel_nl_softmax_iu8ou8+0x608>
 802220c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8022210:	1914      	adds	r4, r2, r4
 8022212:	4622      	mov	r2, r4
 8022214:	f145 0500 	adc.w	r5, r5, #0
 8022218:	0fd2      	lsrs	r2, r2, #31
 802221a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 802221e:	f04f 35ff 	mov.w	r5, #4294967295
 8022222:	f1c2 5400 	rsb	r4, r2, #536870912	@ 0x20000000
 8022226:	4a43      	ldr	r2, [pc, #268]	@ (8022334 <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 8022228:	fbc0 2504 	smlal	r2, r5, r0, r4
 802222c:	2d00      	cmp	r5, #0
 802222e:	da05      	bge.n	802223c <_lite_kernel_nl_softmax_iu8ou8+0x62c>
 8022230:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8022234:	1914      	adds	r4, r2, r4
 8022236:	4622      	mov	r2, r4
 8022238:	f145 0500 	adc.w	r5, r5, #0
 802223c:	0fd2      	lsrs	r2, r2, #31
 802223e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8022242:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 8022246:	ea4f 0482 	mov.w	r4, r2, lsl #2
 802224a:	dc96      	bgt.n	802217a <_lite_kernel_nl_softmax_iu8ou8+0x56a>
 802224c:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8022250:	ea92 0f0c 	teq	r2, ip
 8022254:	f140 80d2 	bpl.w	80223fc <_lite_kernel_nl_softmax_iu8ou8+0x7ec>
 8022258:	fb02 f101 	mul.w	r1, r2, r1
 802225c:	17d0      	asrs	r0, r2, #31
 802225e:	fb03 1100 	mla	r1, r3, r0, r1
 8022262:	fba2 4303 	umull	r4, r3, r2, r3
 8022266:	4419      	add	r1, r3
 8022268:	4b32      	ldr	r3, [pc, #200]	@ (8022334 <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 802226a:	18e3      	adds	r3, r4, r3
 802226c:	f161 0100 	sbc.w	r1, r1, #0
 8022270:	2900      	cmp	r1, #0
 8022272:	da05      	bge.n	8022280 <_lite_kernel_nl_softmax_iu8ou8+0x670>
 8022274:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8022278:	191c      	adds	r4, r3, r4
 802227a:	4623      	mov	r3, r4
 802227c:	f141 0100 	adc.w	r1, r1, #0
 8022280:	0fdb      	lsrs	r3, r3, #31
 8022282:	f04f 34ff 	mov.w	r4, #4294967295
 8022286:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 802228a:	492a      	ldr	r1, [pc, #168]	@ (8022334 <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 802228c:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8022290:	fb03 f000 	mul.w	r0, r3, r0
 8022294:	17dd      	asrs	r5, r3, #31
 8022296:	fb02 0005 	mla	r0, r2, r5, r0
 802229a:	fba3 3502 	umull	r3, r5, r3, r2
 802229e:	185b      	adds	r3, r3, r1
 80222a0:	4428      	add	r0, r5
 80222a2:	eb40 0004 	adc.w	r0, r0, r4
 80222a6:	2800      	cmp	r0, #0
 80222a8:	da05      	bge.n	80222b6 <_lite_kernel_nl_softmax_iu8ou8+0x6a6>
 80222aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80222ae:	1859      	adds	r1, r3, r1
 80222b0:	460b      	mov	r3, r1
 80222b2:	f140 0000 	adc.w	r0, r0, #0
 80222b6:	0fdb      	lsrs	r3, r3, #31
 80222b8:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80222bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80222c0:	f2c0 8090 	blt.w	80223e4 <_lite_kernel_nl_softmax_iu8ou8+0x7d4>
 80222c4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80222c8:	18d1      	adds	r1, r2, r3
 80222ca:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80222ce:	db87      	blt.n	80221e0 <_lite_kernel_nl_softmax_iu8ou8+0x5d0>
 80222d0:	4619      	mov	r1, r3
 80222d2:	f1ba 0f1f 	cmp.w	sl, #31
 80222d6:	dd04      	ble.n	80222e2 <_lite_kernel_nl_softmax_iu8ou8+0x6d2>
 80222d8:	f1c9 0304 	rsb	r3, r9, #4
 80222dc:	f04f 0a1f 	mov.w	sl, #31
 80222e0:	4119      	asrs	r1, r3
 80222e2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80222e4:	2b00      	cmp	r3, #0
 80222e6:	d05e      	beq.n	80223a6 <_lite_kernel_nl_softmax_iu8ou8+0x796>
 80222e8:	2501      	movs	r5, #1
 80222ea:	f1a1 4e00 	sub.w	lr, r1, #2147483648	@ 0x80000000
 80222ee:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80222f2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80222f4:	fa05 f50a 	lsl.w	r5, r5, sl
 80222f8:	fabe fe8e 	clz	lr, lr
 80222fc:	fa47 f90a 	asr.w	r9, r7, sl
 8022300:	9703      	str	r7, [sp, #12]
 8022302:	3d01      	subs	r5, #1
 8022304:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022308:	f8cd 9008 	str.w	r9, [sp, #8]
 802230c:	ea05 0307 	and.w	r3, r5, r7
 8022310:	ea4f 0c65 	mov.w	ip, r5, asr #1
 8022314:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8022316:	f10c 0801 	add.w	r8, ip, #1
 802231a:	9300      	str	r3, [sp, #0]
 802231c:	4673      	mov	r3, lr
 802231e:	4e05      	ldr	r6, [pc, #20]	@ (8022334 <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 8022320:	4647      	mov	r7, r8
 8022322:	46ae      	mov	lr, r5
 8022324:	f8dd 9058 	ldr.w	r9, [sp, #88]	@ 0x58
 8022328:	461d      	mov	r5, r3
 802232a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802232e:	e012      	b.n	8022356 <_lite_kernel_nl_softmax_iu8ou8+0x746>
 8022330:	c3c3c3c4 	.word	0xc3c3c3c4
 8022334:	c0000001 	.word	0xc0000001
 8022338:	da5a5a5a 	.word	0xda5a5a5a
 802233c:	b1dd      	cbz	r5, 8022376 <_lite_kernel_nl_softmax_iu8ou8+0x766>
 802233e:	9b02      	ldr	r3, [sp, #8]
 8022340:	9a00      	ldr	r2, [sp, #0]
 8022342:	4594      	cmp	ip, r2
 8022344:	da00      	bge.n	8022348 <_lite_kernel_nl_softmax_iu8ou8+0x738>
 8022346:	3301      	adds	r3, #1
 8022348:	2bfe      	cmp	r3, #254	@ 0xfe
 802234a:	dd47      	ble.n	80223dc <_lite_kernel_nl_softmax_iu8ou8+0x7cc>
 802234c:	23ff      	movs	r3, #255	@ 0xff
 802234e:	45a1      	cmp	r9, r4
 8022350:	7003      	strb	r3, [r0, #0]
 8022352:	4440      	add	r0, r8
 8022354:	d027      	beq.n	80223a6 <_lite_kernel_nl_softmax_iu8ou8+0x796>
 8022356:	f854 2f04 	ldr.w	r2, [r4, #4]!
 802235a:	ea81 0302 	eor.w	r3, r1, r2
 802235e:	0fdb      	lsrs	r3, r3, #31
 8022360:	2b00      	cmp	r3, #0
 8022362:	bf0b      	itete	eq
 8022364:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8022368:	4633      	movne	r3, r6
 802236a:	f04f 0b00 	moveq.w	fp, #0
 802236e:	f04f 3bff 	movne.w	fp, #4294967295
 8022372:	4291      	cmp	r1, r2
 8022374:	d0e2      	beq.n	802233c <_lite_kernel_nl_softmax_iu8ou8+0x72c>
 8022376:	fbc2 3b01 	smlal	r3, fp, r2, r1
 802237a:	f1bb 0f00 	cmp.w	fp, #0
 802237e:	da03      	bge.n	8022388 <_lite_kernel_nl_softmax_iu8ou8+0x778>
 8022380:	9a03      	ldr	r2, [sp, #12]
 8022382:	189b      	adds	r3, r3, r2
 8022384:	f14b 0b00 	adc.w	fp, fp, #0
 8022388:	0fdb      	lsrs	r3, r3, #31
 802238a:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 802238e:	ea0e 0203 	and.w	r2, lr, r3
 8022392:	fa53 f30a 	asrs.w	r3, r3, sl
 8022396:	d5d4      	bpl.n	8022342 <_lite_kernel_nl_softmax_iu8ou8+0x732>
 8022398:	4297      	cmp	r7, r2
 802239a:	dbd4      	blt.n	8022346 <_lite_kernel_nl_softmax_iu8ou8+0x736>
 802239c:	2300      	movs	r3, #0
 802239e:	45a1      	cmp	r9, r4
 80223a0:	7003      	strb	r3, [r0, #0]
 80223a2:	4440      	add	r0, r8
 80223a4:	d1d7      	bne.n	8022356 <_lite_kernel_nl_softmax_iu8ou8+0x746>
 80223a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80223a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80223aa:	3201      	adds	r2, #1
 80223ac:	3301      	adds	r3, #1
 80223ae:	9213      	str	r2, [sp, #76]	@ 0x4c
 80223b0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80223b2:	9312      	str	r3, [sp, #72]	@ 0x48
 80223b4:	4293      	cmp	r3, r2
 80223b6:	f47f ac4f 	bne.w	8021c58 <_lite_kernel_nl_softmax_iu8ou8+0x48>
 80223ba:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80223bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80223be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80223c0:	440a      	add	r2, r1
 80223c2:	3301      	adds	r3, #1
 80223c4:	9218      	str	r2, [sp, #96]	@ 0x60
 80223c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80223c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80223ca:	440a      	add	r2, r1
 80223cc:	9217      	str	r2, [sp, #92]	@ 0x5c
 80223ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80223d0:	429a      	cmp	r2, r3
 80223d2:	f47f ac3a 	bne.w	8021c4a <_lite_kernel_nl_softmax_iu8ou8+0x3a>
 80223d6:	b01d      	add	sp, #116	@ 0x74
 80223d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223dc:	2b00      	cmp	r3, #0
 80223de:	dddd      	ble.n	802239c <_lite_kernel_nl_softmax_iu8ou8+0x78c>
 80223e0:	b2db      	uxtb	r3, r3
 80223e2:	e7b4      	b.n	802234e <_lite_kernel_nl_softmax_iu8ou8+0x73e>
 80223e4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80223e8:	dc3b      	bgt.n	8022462 <_lite_kernel_nl_softmax_iu8ou8+0x852>
 80223ea:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 80223ee:	0051      	lsls	r1, r2, #1
 80223f0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80223f4:	bfd8      	it	le
 80223f6:	f04f 4100 	movle.w	r1, #2147483648	@ 0x80000000
 80223fa:	e76a      	b.n	80222d2 <_lite_kernel_nl_softmax_iu8ou8+0x6c2>
 80223fc:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8022400:	2500      	movs	r5, #0
 8022402:	e6c2      	b.n	802218a <_lite_kernel_nl_softmax_iu8ou8+0x57a>
 8022404:	bbba      	cbnz	r2, 8022476 <_lite_kernel_nl_softmax_iu8ou8+0x866>
 8022406:	f04f 0a03 	mov.w	sl, #3
 802240a:	f04f 0920 	mov.w	r9, #32
 802240e:	2000      	movs	r0, #0
 8022410:	f04f 33ff 	mov.w	r3, #4294967295
 8022414:	f04f 355a 	mov.w	r5, #1515870810	@ 0x5a5a5a5a
 8022418:	4a19      	ldr	r2, [pc, #100]	@ (8022480 <_lite_kernel_nl_softmax_iu8ou8+0x870>)
 802241a:	4604      	mov	r4, r0
 802241c:	4619      	mov	r1, r3
 802241e:	462e      	mov	r6, r5
 8022420:	469c      	mov	ip, r3
 8022422:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 8022426:	4680      	mov	r8, r0
 8022428:	e642      	b.n	80220b0 <_lite_kernel_nl_softmax_iu8ou8+0x4a0>
 802242a:	17c4      	asrs	r4, r0, #31
 802242c:	fba3 2500 	umull	r2, r5, r3, r0
 8022430:	fb03 f604 	mul.w	r6, r3, r4
 8022434:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8022438:	fb00 6601 	mla	r6, r0, r1, r6
 802243c:	eb46 0505 	adc.w	r5, r6, r5
 8022440:	2d00      	cmp	r5, #0
 8022442:	da05      	bge.n	8022450 <_lite_kernel_nl_softmax_iu8ou8+0x840>
 8022444:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8022448:	1996      	adds	r6, r2, r6
 802244a:	4632      	mov	r2, r6
 802244c:	f145 0500 	adc.w	r5, r5, #0
 8022450:	0fd2      	lsrs	r2, r2, #31
 8022452:	f04f 36ff 	mov.w	r6, #4294967295
 8022456:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 802245a:	4d0a      	ldr	r5, [pc, #40]	@ (8022484 <_lite_kernel_nl_softmax_iu8ou8+0x874>)
 802245c:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 8022460:	e670      	b.n	8022144 <_lite_kernel_nl_softmax_iu8ou8+0x534>
 8022462:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802246a:	db02      	blt.n	8022472 <_lite_kernel_nl_softmax_iu8ou8+0x862>
 802246c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8022470:	e72f      	b.n	80222d2 <_lite_kernel_nl_softmax_iu8ou8+0x6c2>
 8022472:	0059      	lsls	r1, r3, #1
 8022474:	e7bc      	b.n	80223f0 <_lite_kernel_nl_softmax_iu8ou8+0x7e0>
 8022476:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8022478:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802247a:	4413      	add	r3, r2
 802247c:	9303      	str	r3, [sp, #12]
 802247e:	e402      	b.n	8021c86 <_lite_kernel_nl_softmax_iu8ou8+0x76>
 8022480:	20000001 	.word	0x20000001
 8022484:	c0000001 	.word	0xc0000001

08022488 <sbrk_aligned>:
 8022488:	b570      	push	{r4, r5, r6, lr}
 802248a:	4e0f      	ldr	r6, [pc, #60]	@ (80224c8 <sbrk_aligned+0x40>)
 802248c:	460c      	mov	r4, r1
 802248e:	6831      	ldr	r1, [r6, #0]
 8022490:	4605      	mov	r5, r0
 8022492:	b911      	cbnz	r1, 802249a <sbrk_aligned+0x12>
 8022494:	f000 fb3c 	bl	8022b10 <_sbrk_r>
 8022498:	6030      	str	r0, [r6, #0]
 802249a:	4621      	mov	r1, r4
 802249c:	4628      	mov	r0, r5
 802249e:	f000 fb37 	bl	8022b10 <_sbrk_r>
 80224a2:	1c43      	adds	r3, r0, #1
 80224a4:	d103      	bne.n	80224ae <sbrk_aligned+0x26>
 80224a6:	f04f 34ff 	mov.w	r4, #4294967295
 80224aa:	4620      	mov	r0, r4
 80224ac:	bd70      	pop	{r4, r5, r6, pc}
 80224ae:	1cc4      	adds	r4, r0, #3
 80224b0:	f024 0403 	bic.w	r4, r4, #3
 80224b4:	42a0      	cmp	r0, r4
 80224b6:	d0f8      	beq.n	80224aa <sbrk_aligned+0x22>
 80224b8:	1a21      	subs	r1, r4, r0
 80224ba:	4628      	mov	r0, r5
 80224bc:	f000 fb28 	bl	8022b10 <_sbrk_r>
 80224c0:	3001      	adds	r0, #1
 80224c2:	d1f2      	bne.n	80224aa <sbrk_aligned+0x22>
 80224c4:	e7ef      	b.n	80224a6 <sbrk_aligned+0x1e>
 80224c6:	bf00      	nop
 80224c8:	24004460 	.word	0x24004460

080224cc <_malloc_r>:
 80224cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80224d0:	1ccd      	adds	r5, r1, #3
 80224d2:	f025 0503 	bic.w	r5, r5, #3
 80224d6:	3508      	adds	r5, #8
 80224d8:	2d0c      	cmp	r5, #12
 80224da:	bf38      	it	cc
 80224dc:	250c      	movcc	r5, #12
 80224de:	2d00      	cmp	r5, #0
 80224e0:	4606      	mov	r6, r0
 80224e2:	db01      	blt.n	80224e8 <_malloc_r+0x1c>
 80224e4:	42a9      	cmp	r1, r5
 80224e6:	d904      	bls.n	80224f2 <_malloc_r+0x26>
 80224e8:	230c      	movs	r3, #12
 80224ea:	6033      	str	r3, [r6, #0]
 80224ec:	2000      	movs	r0, #0
 80224ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80224f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80225c8 <_malloc_r+0xfc>
 80224f6:	f000 f869 	bl	80225cc <__malloc_lock>
 80224fa:	f8d8 3000 	ldr.w	r3, [r8]
 80224fe:	461c      	mov	r4, r3
 8022500:	bb44      	cbnz	r4, 8022554 <_malloc_r+0x88>
 8022502:	4629      	mov	r1, r5
 8022504:	4630      	mov	r0, r6
 8022506:	f7ff ffbf 	bl	8022488 <sbrk_aligned>
 802250a:	1c43      	adds	r3, r0, #1
 802250c:	4604      	mov	r4, r0
 802250e:	d158      	bne.n	80225c2 <_malloc_r+0xf6>
 8022510:	f8d8 4000 	ldr.w	r4, [r8]
 8022514:	4627      	mov	r7, r4
 8022516:	2f00      	cmp	r7, #0
 8022518:	d143      	bne.n	80225a2 <_malloc_r+0xd6>
 802251a:	2c00      	cmp	r4, #0
 802251c:	d04b      	beq.n	80225b6 <_malloc_r+0xea>
 802251e:	6823      	ldr	r3, [r4, #0]
 8022520:	4639      	mov	r1, r7
 8022522:	4630      	mov	r0, r6
 8022524:	eb04 0903 	add.w	r9, r4, r3
 8022528:	f000 faf2 	bl	8022b10 <_sbrk_r>
 802252c:	4581      	cmp	r9, r0
 802252e:	d142      	bne.n	80225b6 <_malloc_r+0xea>
 8022530:	6821      	ldr	r1, [r4, #0]
 8022532:	1a6d      	subs	r5, r5, r1
 8022534:	4629      	mov	r1, r5
 8022536:	4630      	mov	r0, r6
 8022538:	f7ff ffa6 	bl	8022488 <sbrk_aligned>
 802253c:	3001      	adds	r0, #1
 802253e:	d03a      	beq.n	80225b6 <_malloc_r+0xea>
 8022540:	6823      	ldr	r3, [r4, #0]
 8022542:	442b      	add	r3, r5
 8022544:	6023      	str	r3, [r4, #0]
 8022546:	f8d8 3000 	ldr.w	r3, [r8]
 802254a:	685a      	ldr	r2, [r3, #4]
 802254c:	bb62      	cbnz	r2, 80225a8 <_malloc_r+0xdc>
 802254e:	f8c8 7000 	str.w	r7, [r8]
 8022552:	e00f      	b.n	8022574 <_malloc_r+0xa8>
 8022554:	6822      	ldr	r2, [r4, #0]
 8022556:	1b52      	subs	r2, r2, r5
 8022558:	d420      	bmi.n	802259c <_malloc_r+0xd0>
 802255a:	2a0b      	cmp	r2, #11
 802255c:	d917      	bls.n	802258e <_malloc_r+0xc2>
 802255e:	1961      	adds	r1, r4, r5
 8022560:	42a3      	cmp	r3, r4
 8022562:	6025      	str	r5, [r4, #0]
 8022564:	bf18      	it	ne
 8022566:	6059      	strne	r1, [r3, #4]
 8022568:	6863      	ldr	r3, [r4, #4]
 802256a:	bf08      	it	eq
 802256c:	f8c8 1000 	streq.w	r1, [r8]
 8022570:	5162      	str	r2, [r4, r5]
 8022572:	604b      	str	r3, [r1, #4]
 8022574:	4630      	mov	r0, r6
 8022576:	f000 f82f 	bl	80225d8 <__malloc_unlock>
 802257a:	f104 000b 	add.w	r0, r4, #11
 802257e:	1d23      	adds	r3, r4, #4
 8022580:	f020 0007 	bic.w	r0, r0, #7
 8022584:	1ac2      	subs	r2, r0, r3
 8022586:	bf1c      	itt	ne
 8022588:	1a1b      	subne	r3, r3, r0
 802258a:	50a3      	strne	r3, [r4, r2]
 802258c:	e7af      	b.n	80224ee <_malloc_r+0x22>
 802258e:	6862      	ldr	r2, [r4, #4]
 8022590:	42a3      	cmp	r3, r4
 8022592:	bf0c      	ite	eq
 8022594:	f8c8 2000 	streq.w	r2, [r8]
 8022598:	605a      	strne	r2, [r3, #4]
 802259a:	e7eb      	b.n	8022574 <_malloc_r+0xa8>
 802259c:	4623      	mov	r3, r4
 802259e:	6864      	ldr	r4, [r4, #4]
 80225a0:	e7ae      	b.n	8022500 <_malloc_r+0x34>
 80225a2:	463c      	mov	r4, r7
 80225a4:	687f      	ldr	r7, [r7, #4]
 80225a6:	e7b6      	b.n	8022516 <_malloc_r+0x4a>
 80225a8:	461a      	mov	r2, r3
 80225aa:	685b      	ldr	r3, [r3, #4]
 80225ac:	42a3      	cmp	r3, r4
 80225ae:	d1fb      	bne.n	80225a8 <_malloc_r+0xdc>
 80225b0:	2300      	movs	r3, #0
 80225b2:	6053      	str	r3, [r2, #4]
 80225b4:	e7de      	b.n	8022574 <_malloc_r+0xa8>
 80225b6:	230c      	movs	r3, #12
 80225b8:	6033      	str	r3, [r6, #0]
 80225ba:	4630      	mov	r0, r6
 80225bc:	f000 f80c 	bl	80225d8 <__malloc_unlock>
 80225c0:	e794      	b.n	80224ec <_malloc_r+0x20>
 80225c2:	6005      	str	r5, [r0, #0]
 80225c4:	e7d6      	b.n	8022574 <_malloc_r+0xa8>
 80225c6:	bf00      	nop
 80225c8:	24004464 	.word	0x24004464

080225cc <__malloc_lock>:
 80225cc:	4801      	ldr	r0, [pc, #4]	@ (80225d4 <__malloc_lock+0x8>)
 80225ce:	f000 baec 	b.w	8022baa <__retarget_lock_acquire_recursive>
 80225d2:	bf00      	nop
 80225d4:	240045a8 	.word	0x240045a8

080225d8 <__malloc_unlock>:
 80225d8:	4801      	ldr	r0, [pc, #4]	@ (80225e0 <__malloc_unlock+0x8>)
 80225da:	f000 bae7 	b.w	8022bac <__retarget_lock_release_recursive>
 80225de:	bf00      	nop
 80225e0:	240045a8 	.word	0x240045a8

080225e4 <_realloc_r>:
 80225e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80225e8:	4607      	mov	r7, r0
 80225ea:	4614      	mov	r4, r2
 80225ec:	460d      	mov	r5, r1
 80225ee:	b921      	cbnz	r1, 80225fa <_realloc_r+0x16>
 80225f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80225f4:	4611      	mov	r1, r2
 80225f6:	f7ff bf69 	b.w	80224cc <_malloc_r>
 80225fa:	b92a      	cbnz	r2, 8022608 <_realloc_r+0x24>
 80225fc:	f000 fae6 	bl	8022bcc <_free_r>
 8022600:	4625      	mov	r5, r4
 8022602:	4628      	mov	r0, r5
 8022604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022608:	f000 fb2a 	bl	8022c60 <_malloc_usable_size_r>
 802260c:	4284      	cmp	r4, r0
 802260e:	4606      	mov	r6, r0
 8022610:	d802      	bhi.n	8022618 <_realloc_r+0x34>
 8022612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8022616:	d8f4      	bhi.n	8022602 <_realloc_r+0x1e>
 8022618:	4621      	mov	r1, r4
 802261a:	4638      	mov	r0, r7
 802261c:	f7ff ff56 	bl	80224cc <_malloc_r>
 8022620:	4680      	mov	r8, r0
 8022622:	b908      	cbnz	r0, 8022628 <_realloc_r+0x44>
 8022624:	4645      	mov	r5, r8
 8022626:	e7ec      	b.n	8022602 <_realloc_r+0x1e>
 8022628:	42b4      	cmp	r4, r6
 802262a:	4622      	mov	r2, r4
 802262c:	4629      	mov	r1, r5
 802262e:	bf28      	it	cs
 8022630:	4632      	movcs	r2, r6
 8022632:	f000 fabc 	bl	8022bae <memcpy>
 8022636:	4629      	mov	r1, r5
 8022638:	4638      	mov	r0, r7
 802263a:	f000 fac7 	bl	8022bcc <_free_r>
 802263e:	e7f1      	b.n	8022624 <_realloc_r+0x40>

08022640 <std>:
 8022640:	2300      	movs	r3, #0
 8022642:	b510      	push	{r4, lr}
 8022644:	4604      	mov	r4, r0
 8022646:	e9c0 3300 	strd	r3, r3, [r0]
 802264a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802264e:	6083      	str	r3, [r0, #8]
 8022650:	8181      	strh	r1, [r0, #12]
 8022652:	6643      	str	r3, [r0, #100]	@ 0x64
 8022654:	81c2      	strh	r2, [r0, #14]
 8022656:	6183      	str	r3, [r0, #24]
 8022658:	4619      	mov	r1, r3
 802265a:	2208      	movs	r2, #8
 802265c:	305c      	adds	r0, #92	@ 0x5c
 802265e:	f000 fa1b 	bl	8022a98 <memset>
 8022662:	4b0d      	ldr	r3, [pc, #52]	@ (8022698 <std+0x58>)
 8022664:	6263      	str	r3, [r4, #36]	@ 0x24
 8022666:	4b0d      	ldr	r3, [pc, #52]	@ (802269c <std+0x5c>)
 8022668:	62a3      	str	r3, [r4, #40]	@ 0x28
 802266a:	4b0d      	ldr	r3, [pc, #52]	@ (80226a0 <std+0x60>)
 802266c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802266e:	4b0d      	ldr	r3, [pc, #52]	@ (80226a4 <std+0x64>)
 8022670:	6323      	str	r3, [r4, #48]	@ 0x30
 8022672:	4b0d      	ldr	r3, [pc, #52]	@ (80226a8 <std+0x68>)
 8022674:	6224      	str	r4, [r4, #32]
 8022676:	429c      	cmp	r4, r3
 8022678:	d006      	beq.n	8022688 <std+0x48>
 802267a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802267e:	4294      	cmp	r4, r2
 8022680:	d002      	beq.n	8022688 <std+0x48>
 8022682:	33d0      	adds	r3, #208	@ 0xd0
 8022684:	429c      	cmp	r4, r3
 8022686:	d105      	bne.n	8022694 <std+0x54>
 8022688:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022690:	f000 ba8a 	b.w	8022ba8 <__retarget_lock_init_recursive>
 8022694:	bd10      	pop	{r4, pc}
 8022696:	bf00      	nop
 8022698:	080228e9 	.word	0x080228e9
 802269c:	0802290b 	.word	0x0802290b
 80226a0:	08022943 	.word	0x08022943
 80226a4:	08022967 	.word	0x08022967
 80226a8:	24004468 	.word	0x24004468

080226ac <stdio_exit_handler>:
 80226ac:	4a02      	ldr	r2, [pc, #8]	@ (80226b8 <stdio_exit_handler+0xc>)
 80226ae:	4903      	ldr	r1, [pc, #12]	@ (80226bc <stdio_exit_handler+0x10>)
 80226b0:	4803      	ldr	r0, [pc, #12]	@ (80226c0 <stdio_exit_handler+0x14>)
 80226b2:	f000 b869 	b.w	8022788 <_fwalk_sglue>
 80226b6:	bf00      	nop
 80226b8:	24000a4c 	.word	0x24000a4c
 80226bc:	080235c5 	.word	0x080235c5
 80226c0:	24000a5c 	.word	0x24000a5c

080226c4 <cleanup_stdio>:
 80226c4:	6841      	ldr	r1, [r0, #4]
 80226c6:	4b0c      	ldr	r3, [pc, #48]	@ (80226f8 <cleanup_stdio+0x34>)
 80226c8:	4299      	cmp	r1, r3
 80226ca:	b510      	push	{r4, lr}
 80226cc:	4604      	mov	r4, r0
 80226ce:	d001      	beq.n	80226d4 <cleanup_stdio+0x10>
 80226d0:	f000 ff78 	bl	80235c4 <_fflush_r>
 80226d4:	68a1      	ldr	r1, [r4, #8]
 80226d6:	4b09      	ldr	r3, [pc, #36]	@ (80226fc <cleanup_stdio+0x38>)
 80226d8:	4299      	cmp	r1, r3
 80226da:	d002      	beq.n	80226e2 <cleanup_stdio+0x1e>
 80226dc:	4620      	mov	r0, r4
 80226de:	f000 ff71 	bl	80235c4 <_fflush_r>
 80226e2:	68e1      	ldr	r1, [r4, #12]
 80226e4:	4b06      	ldr	r3, [pc, #24]	@ (8022700 <cleanup_stdio+0x3c>)
 80226e6:	4299      	cmp	r1, r3
 80226e8:	d004      	beq.n	80226f4 <cleanup_stdio+0x30>
 80226ea:	4620      	mov	r0, r4
 80226ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80226f0:	f000 bf68 	b.w	80235c4 <_fflush_r>
 80226f4:	bd10      	pop	{r4, pc}
 80226f6:	bf00      	nop
 80226f8:	24004468 	.word	0x24004468
 80226fc:	240044d0 	.word	0x240044d0
 8022700:	24004538 	.word	0x24004538

08022704 <global_stdio_init.part.0>:
 8022704:	b510      	push	{r4, lr}
 8022706:	4b0b      	ldr	r3, [pc, #44]	@ (8022734 <global_stdio_init.part.0+0x30>)
 8022708:	4c0b      	ldr	r4, [pc, #44]	@ (8022738 <global_stdio_init.part.0+0x34>)
 802270a:	4a0c      	ldr	r2, [pc, #48]	@ (802273c <global_stdio_init.part.0+0x38>)
 802270c:	601a      	str	r2, [r3, #0]
 802270e:	4620      	mov	r0, r4
 8022710:	2200      	movs	r2, #0
 8022712:	2104      	movs	r1, #4
 8022714:	f7ff ff94 	bl	8022640 <std>
 8022718:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802271c:	2201      	movs	r2, #1
 802271e:	2109      	movs	r1, #9
 8022720:	f7ff ff8e 	bl	8022640 <std>
 8022724:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8022728:	2202      	movs	r2, #2
 802272a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802272e:	2112      	movs	r1, #18
 8022730:	f7ff bf86 	b.w	8022640 <std>
 8022734:	240045a0 	.word	0x240045a0
 8022738:	24004468 	.word	0x24004468
 802273c:	080226ad 	.word	0x080226ad

08022740 <__sfp_lock_acquire>:
 8022740:	4801      	ldr	r0, [pc, #4]	@ (8022748 <__sfp_lock_acquire+0x8>)
 8022742:	f000 ba32 	b.w	8022baa <__retarget_lock_acquire_recursive>
 8022746:	bf00      	nop
 8022748:	240045a9 	.word	0x240045a9

0802274c <__sfp_lock_release>:
 802274c:	4801      	ldr	r0, [pc, #4]	@ (8022754 <__sfp_lock_release+0x8>)
 802274e:	f000 ba2d 	b.w	8022bac <__retarget_lock_release_recursive>
 8022752:	bf00      	nop
 8022754:	240045a9 	.word	0x240045a9

08022758 <__sinit>:
 8022758:	b510      	push	{r4, lr}
 802275a:	4604      	mov	r4, r0
 802275c:	f7ff fff0 	bl	8022740 <__sfp_lock_acquire>
 8022760:	6a23      	ldr	r3, [r4, #32]
 8022762:	b11b      	cbz	r3, 802276c <__sinit+0x14>
 8022764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022768:	f7ff bff0 	b.w	802274c <__sfp_lock_release>
 802276c:	4b04      	ldr	r3, [pc, #16]	@ (8022780 <__sinit+0x28>)
 802276e:	6223      	str	r3, [r4, #32]
 8022770:	4b04      	ldr	r3, [pc, #16]	@ (8022784 <__sinit+0x2c>)
 8022772:	681b      	ldr	r3, [r3, #0]
 8022774:	2b00      	cmp	r3, #0
 8022776:	d1f5      	bne.n	8022764 <__sinit+0xc>
 8022778:	f7ff ffc4 	bl	8022704 <global_stdio_init.part.0>
 802277c:	e7f2      	b.n	8022764 <__sinit+0xc>
 802277e:	bf00      	nop
 8022780:	080226c5 	.word	0x080226c5
 8022784:	240045a0 	.word	0x240045a0

08022788 <_fwalk_sglue>:
 8022788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802278c:	4607      	mov	r7, r0
 802278e:	4688      	mov	r8, r1
 8022790:	4614      	mov	r4, r2
 8022792:	2600      	movs	r6, #0
 8022794:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022798:	f1b9 0901 	subs.w	r9, r9, #1
 802279c:	d505      	bpl.n	80227aa <_fwalk_sglue+0x22>
 802279e:	6824      	ldr	r4, [r4, #0]
 80227a0:	2c00      	cmp	r4, #0
 80227a2:	d1f7      	bne.n	8022794 <_fwalk_sglue+0xc>
 80227a4:	4630      	mov	r0, r6
 80227a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80227aa:	89ab      	ldrh	r3, [r5, #12]
 80227ac:	2b01      	cmp	r3, #1
 80227ae:	d907      	bls.n	80227c0 <_fwalk_sglue+0x38>
 80227b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80227b4:	3301      	adds	r3, #1
 80227b6:	d003      	beq.n	80227c0 <_fwalk_sglue+0x38>
 80227b8:	4629      	mov	r1, r5
 80227ba:	4638      	mov	r0, r7
 80227bc:	47c0      	blx	r8
 80227be:	4306      	orrs	r6, r0
 80227c0:	3568      	adds	r5, #104	@ 0x68
 80227c2:	e7e9      	b.n	8022798 <_fwalk_sglue+0x10>

080227c4 <iprintf>:
 80227c4:	b40f      	push	{r0, r1, r2, r3}
 80227c6:	b507      	push	{r0, r1, r2, lr}
 80227c8:	4906      	ldr	r1, [pc, #24]	@ (80227e4 <iprintf+0x20>)
 80227ca:	ab04      	add	r3, sp, #16
 80227cc:	6808      	ldr	r0, [r1, #0]
 80227ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80227d2:	6881      	ldr	r1, [r0, #8]
 80227d4:	9301      	str	r3, [sp, #4]
 80227d6:	f000 fbcd 	bl	8022f74 <_vfiprintf_r>
 80227da:	b003      	add	sp, #12
 80227dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80227e0:	b004      	add	sp, #16
 80227e2:	4770      	bx	lr
 80227e4:	24000a58 	.word	0x24000a58

080227e8 <_puts_r>:
 80227e8:	6a03      	ldr	r3, [r0, #32]
 80227ea:	b570      	push	{r4, r5, r6, lr}
 80227ec:	6884      	ldr	r4, [r0, #8]
 80227ee:	4605      	mov	r5, r0
 80227f0:	460e      	mov	r6, r1
 80227f2:	b90b      	cbnz	r3, 80227f8 <_puts_r+0x10>
 80227f4:	f7ff ffb0 	bl	8022758 <__sinit>
 80227f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80227fa:	07db      	lsls	r3, r3, #31
 80227fc:	d405      	bmi.n	802280a <_puts_r+0x22>
 80227fe:	89a3      	ldrh	r3, [r4, #12]
 8022800:	0598      	lsls	r0, r3, #22
 8022802:	d402      	bmi.n	802280a <_puts_r+0x22>
 8022804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022806:	f000 f9d0 	bl	8022baa <__retarget_lock_acquire_recursive>
 802280a:	89a3      	ldrh	r3, [r4, #12]
 802280c:	0719      	lsls	r1, r3, #28
 802280e:	d502      	bpl.n	8022816 <_puts_r+0x2e>
 8022810:	6923      	ldr	r3, [r4, #16]
 8022812:	2b00      	cmp	r3, #0
 8022814:	d135      	bne.n	8022882 <_puts_r+0x9a>
 8022816:	4621      	mov	r1, r4
 8022818:	4628      	mov	r0, r5
 802281a:	f000 f8e7 	bl	80229ec <__swsetup_r>
 802281e:	b380      	cbz	r0, 8022882 <_puts_r+0x9a>
 8022820:	f04f 35ff 	mov.w	r5, #4294967295
 8022824:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022826:	07da      	lsls	r2, r3, #31
 8022828:	d405      	bmi.n	8022836 <_puts_r+0x4e>
 802282a:	89a3      	ldrh	r3, [r4, #12]
 802282c:	059b      	lsls	r3, r3, #22
 802282e:	d402      	bmi.n	8022836 <_puts_r+0x4e>
 8022830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022832:	f000 f9bb 	bl	8022bac <__retarget_lock_release_recursive>
 8022836:	4628      	mov	r0, r5
 8022838:	bd70      	pop	{r4, r5, r6, pc}
 802283a:	2b00      	cmp	r3, #0
 802283c:	da04      	bge.n	8022848 <_puts_r+0x60>
 802283e:	69a2      	ldr	r2, [r4, #24]
 8022840:	429a      	cmp	r2, r3
 8022842:	dc17      	bgt.n	8022874 <_puts_r+0x8c>
 8022844:	290a      	cmp	r1, #10
 8022846:	d015      	beq.n	8022874 <_puts_r+0x8c>
 8022848:	6823      	ldr	r3, [r4, #0]
 802284a:	1c5a      	adds	r2, r3, #1
 802284c:	6022      	str	r2, [r4, #0]
 802284e:	7019      	strb	r1, [r3, #0]
 8022850:	68a3      	ldr	r3, [r4, #8]
 8022852:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022856:	3b01      	subs	r3, #1
 8022858:	60a3      	str	r3, [r4, #8]
 802285a:	2900      	cmp	r1, #0
 802285c:	d1ed      	bne.n	802283a <_puts_r+0x52>
 802285e:	2b00      	cmp	r3, #0
 8022860:	da11      	bge.n	8022886 <_puts_r+0x9e>
 8022862:	4622      	mov	r2, r4
 8022864:	210a      	movs	r1, #10
 8022866:	4628      	mov	r0, r5
 8022868:	f000 f881 	bl	802296e <__swbuf_r>
 802286c:	3001      	adds	r0, #1
 802286e:	d0d7      	beq.n	8022820 <_puts_r+0x38>
 8022870:	250a      	movs	r5, #10
 8022872:	e7d7      	b.n	8022824 <_puts_r+0x3c>
 8022874:	4622      	mov	r2, r4
 8022876:	4628      	mov	r0, r5
 8022878:	f000 f879 	bl	802296e <__swbuf_r>
 802287c:	3001      	adds	r0, #1
 802287e:	d1e7      	bne.n	8022850 <_puts_r+0x68>
 8022880:	e7ce      	b.n	8022820 <_puts_r+0x38>
 8022882:	3e01      	subs	r6, #1
 8022884:	e7e4      	b.n	8022850 <_puts_r+0x68>
 8022886:	6823      	ldr	r3, [r4, #0]
 8022888:	1c5a      	adds	r2, r3, #1
 802288a:	6022      	str	r2, [r4, #0]
 802288c:	220a      	movs	r2, #10
 802288e:	701a      	strb	r2, [r3, #0]
 8022890:	e7ee      	b.n	8022870 <_puts_r+0x88>
	...

08022894 <puts>:
 8022894:	4b02      	ldr	r3, [pc, #8]	@ (80228a0 <puts+0xc>)
 8022896:	4601      	mov	r1, r0
 8022898:	6818      	ldr	r0, [r3, #0]
 802289a:	f7ff bfa5 	b.w	80227e8 <_puts_r>
 802289e:	bf00      	nop
 80228a0:	24000a58 	.word	0x24000a58

080228a4 <siprintf>:
 80228a4:	b40e      	push	{r1, r2, r3}
 80228a6:	b510      	push	{r4, lr}
 80228a8:	b09d      	sub	sp, #116	@ 0x74
 80228aa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80228ac:	9002      	str	r0, [sp, #8]
 80228ae:	9006      	str	r0, [sp, #24]
 80228b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80228b4:	480a      	ldr	r0, [pc, #40]	@ (80228e0 <siprintf+0x3c>)
 80228b6:	9107      	str	r1, [sp, #28]
 80228b8:	9104      	str	r1, [sp, #16]
 80228ba:	490a      	ldr	r1, [pc, #40]	@ (80228e4 <siprintf+0x40>)
 80228bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80228c0:	9105      	str	r1, [sp, #20]
 80228c2:	2400      	movs	r4, #0
 80228c4:	a902      	add	r1, sp, #8
 80228c6:	6800      	ldr	r0, [r0, #0]
 80228c8:	9301      	str	r3, [sp, #4]
 80228ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80228cc:	f000 fa2c 	bl	8022d28 <_svfiprintf_r>
 80228d0:	9b02      	ldr	r3, [sp, #8]
 80228d2:	701c      	strb	r4, [r3, #0]
 80228d4:	b01d      	add	sp, #116	@ 0x74
 80228d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80228da:	b003      	add	sp, #12
 80228dc:	4770      	bx	lr
 80228de:	bf00      	nop
 80228e0:	24000a58 	.word	0x24000a58
 80228e4:	ffff0208 	.word	0xffff0208

080228e8 <__sread>:
 80228e8:	b510      	push	{r4, lr}
 80228ea:	460c      	mov	r4, r1
 80228ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80228f0:	f000 f8fc 	bl	8022aec <_read_r>
 80228f4:	2800      	cmp	r0, #0
 80228f6:	bfab      	itete	ge
 80228f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80228fa:	89a3      	ldrhlt	r3, [r4, #12]
 80228fc:	181b      	addge	r3, r3, r0
 80228fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022902:	bfac      	ite	ge
 8022904:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022906:	81a3      	strhlt	r3, [r4, #12]
 8022908:	bd10      	pop	{r4, pc}

0802290a <__swrite>:
 802290a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802290e:	461f      	mov	r7, r3
 8022910:	898b      	ldrh	r3, [r1, #12]
 8022912:	05db      	lsls	r3, r3, #23
 8022914:	4605      	mov	r5, r0
 8022916:	460c      	mov	r4, r1
 8022918:	4616      	mov	r6, r2
 802291a:	d505      	bpl.n	8022928 <__swrite+0x1e>
 802291c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022920:	2302      	movs	r3, #2
 8022922:	2200      	movs	r2, #0
 8022924:	f000 f8d0 	bl	8022ac8 <_lseek_r>
 8022928:	89a3      	ldrh	r3, [r4, #12]
 802292a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802292e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022932:	81a3      	strh	r3, [r4, #12]
 8022934:	4632      	mov	r2, r6
 8022936:	463b      	mov	r3, r7
 8022938:	4628      	mov	r0, r5
 802293a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802293e:	f000 b8f7 	b.w	8022b30 <_write_r>

08022942 <__sseek>:
 8022942:	b510      	push	{r4, lr}
 8022944:	460c      	mov	r4, r1
 8022946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802294a:	f000 f8bd 	bl	8022ac8 <_lseek_r>
 802294e:	1c43      	adds	r3, r0, #1
 8022950:	89a3      	ldrh	r3, [r4, #12]
 8022952:	bf15      	itete	ne
 8022954:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022956:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802295a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802295e:	81a3      	strheq	r3, [r4, #12]
 8022960:	bf18      	it	ne
 8022962:	81a3      	strhne	r3, [r4, #12]
 8022964:	bd10      	pop	{r4, pc}

08022966 <__sclose>:
 8022966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802296a:	f000 b89d 	b.w	8022aa8 <_close_r>

0802296e <__swbuf_r>:
 802296e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022970:	460e      	mov	r6, r1
 8022972:	4614      	mov	r4, r2
 8022974:	4605      	mov	r5, r0
 8022976:	b118      	cbz	r0, 8022980 <__swbuf_r+0x12>
 8022978:	6a03      	ldr	r3, [r0, #32]
 802297a:	b90b      	cbnz	r3, 8022980 <__swbuf_r+0x12>
 802297c:	f7ff feec 	bl	8022758 <__sinit>
 8022980:	69a3      	ldr	r3, [r4, #24]
 8022982:	60a3      	str	r3, [r4, #8]
 8022984:	89a3      	ldrh	r3, [r4, #12]
 8022986:	071a      	lsls	r2, r3, #28
 8022988:	d501      	bpl.n	802298e <__swbuf_r+0x20>
 802298a:	6923      	ldr	r3, [r4, #16]
 802298c:	b943      	cbnz	r3, 80229a0 <__swbuf_r+0x32>
 802298e:	4621      	mov	r1, r4
 8022990:	4628      	mov	r0, r5
 8022992:	f000 f82b 	bl	80229ec <__swsetup_r>
 8022996:	b118      	cbz	r0, 80229a0 <__swbuf_r+0x32>
 8022998:	f04f 37ff 	mov.w	r7, #4294967295
 802299c:	4638      	mov	r0, r7
 802299e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80229a0:	6823      	ldr	r3, [r4, #0]
 80229a2:	6922      	ldr	r2, [r4, #16]
 80229a4:	1a98      	subs	r0, r3, r2
 80229a6:	6963      	ldr	r3, [r4, #20]
 80229a8:	b2f6      	uxtb	r6, r6
 80229aa:	4283      	cmp	r3, r0
 80229ac:	4637      	mov	r7, r6
 80229ae:	dc05      	bgt.n	80229bc <__swbuf_r+0x4e>
 80229b0:	4621      	mov	r1, r4
 80229b2:	4628      	mov	r0, r5
 80229b4:	f000 fe06 	bl	80235c4 <_fflush_r>
 80229b8:	2800      	cmp	r0, #0
 80229ba:	d1ed      	bne.n	8022998 <__swbuf_r+0x2a>
 80229bc:	68a3      	ldr	r3, [r4, #8]
 80229be:	3b01      	subs	r3, #1
 80229c0:	60a3      	str	r3, [r4, #8]
 80229c2:	6823      	ldr	r3, [r4, #0]
 80229c4:	1c5a      	adds	r2, r3, #1
 80229c6:	6022      	str	r2, [r4, #0]
 80229c8:	701e      	strb	r6, [r3, #0]
 80229ca:	6962      	ldr	r2, [r4, #20]
 80229cc:	1c43      	adds	r3, r0, #1
 80229ce:	429a      	cmp	r2, r3
 80229d0:	d004      	beq.n	80229dc <__swbuf_r+0x6e>
 80229d2:	89a3      	ldrh	r3, [r4, #12]
 80229d4:	07db      	lsls	r3, r3, #31
 80229d6:	d5e1      	bpl.n	802299c <__swbuf_r+0x2e>
 80229d8:	2e0a      	cmp	r6, #10
 80229da:	d1df      	bne.n	802299c <__swbuf_r+0x2e>
 80229dc:	4621      	mov	r1, r4
 80229de:	4628      	mov	r0, r5
 80229e0:	f000 fdf0 	bl	80235c4 <_fflush_r>
 80229e4:	2800      	cmp	r0, #0
 80229e6:	d0d9      	beq.n	802299c <__swbuf_r+0x2e>
 80229e8:	e7d6      	b.n	8022998 <__swbuf_r+0x2a>
	...

080229ec <__swsetup_r>:
 80229ec:	b538      	push	{r3, r4, r5, lr}
 80229ee:	4b29      	ldr	r3, [pc, #164]	@ (8022a94 <__swsetup_r+0xa8>)
 80229f0:	4605      	mov	r5, r0
 80229f2:	6818      	ldr	r0, [r3, #0]
 80229f4:	460c      	mov	r4, r1
 80229f6:	b118      	cbz	r0, 8022a00 <__swsetup_r+0x14>
 80229f8:	6a03      	ldr	r3, [r0, #32]
 80229fa:	b90b      	cbnz	r3, 8022a00 <__swsetup_r+0x14>
 80229fc:	f7ff feac 	bl	8022758 <__sinit>
 8022a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022a04:	0719      	lsls	r1, r3, #28
 8022a06:	d422      	bmi.n	8022a4e <__swsetup_r+0x62>
 8022a08:	06da      	lsls	r2, r3, #27
 8022a0a:	d407      	bmi.n	8022a1c <__swsetup_r+0x30>
 8022a0c:	2209      	movs	r2, #9
 8022a0e:	602a      	str	r2, [r5, #0]
 8022a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022a14:	81a3      	strh	r3, [r4, #12]
 8022a16:	f04f 30ff 	mov.w	r0, #4294967295
 8022a1a:	e033      	b.n	8022a84 <__swsetup_r+0x98>
 8022a1c:	0758      	lsls	r0, r3, #29
 8022a1e:	d512      	bpl.n	8022a46 <__swsetup_r+0x5a>
 8022a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022a22:	b141      	cbz	r1, 8022a36 <__swsetup_r+0x4a>
 8022a24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022a28:	4299      	cmp	r1, r3
 8022a2a:	d002      	beq.n	8022a32 <__swsetup_r+0x46>
 8022a2c:	4628      	mov	r0, r5
 8022a2e:	f000 f8cd 	bl	8022bcc <_free_r>
 8022a32:	2300      	movs	r3, #0
 8022a34:	6363      	str	r3, [r4, #52]	@ 0x34
 8022a36:	89a3      	ldrh	r3, [r4, #12]
 8022a38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022a3c:	81a3      	strh	r3, [r4, #12]
 8022a3e:	2300      	movs	r3, #0
 8022a40:	6063      	str	r3, [r4, #4]
 8022a42:	6923      	ldr	r3, [r4, #16]
 8022a44:	6023      	str	r3, [r4, #0]
 8022a46:	89a3      	ldrh	r3, [r4, #12]
 8022a48:	f043 0308 	orr.w	r3, r3, #8
 8022a4c:	81a3      	strh	r3, [r4, #12]
 8022a4e:	6923      	ldr	r3, [r4, #16]
 8022a50:	b94b      	cbnz	r3, 8022a66 <__swsetup_r+0x7a>
 8022a52:	89a3      	ldrh	r3, [r4, #12]
 8022a54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022a5c:	d003      	beq.n	8022a66 <__swsetup_r+0x7a>
 8022a5e:	4621      	mov	r1, r4
 8022a60:	4628      	mov	r0, r5
 8022a62:	f000 fdfd 	bl	8023660 <__smakebuf_r>
 8022a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022a6a:	f013 0201 	ands.w	r2, r3, #1
 8022a6e:	d00a      	beq.n	8022a86 <__swsetup_r+0x9a>
 8022a70:	2200      	movs	r2, #0
 8022a72:	60a2      	str	r2, [r4, #8]
 8022a74:	6962      	ldr	r2, [r4, #20]
 8022a76:	4252      	negs	r2, r2
 8022a78:	61a2      	str	r2, [r4, #24]
 8022a7a:	6922      	ldr	r2, [r4, #16]
 8022a7c:	b942      	cbnz	r2, 8022a90 <__swsetup_r+0xa4>
 8022a7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022a82:	d1c5      	bne.n	8022a10 <__swsetup_r+0x24>
 8022a84:	bd38      	pop	{r3, r4, r5, pc}
 8022a86:	0799      	lsls	r1, r3, #30
 8022a88:	bf58      	it	pl
 8022a8a:	6962      	ldrpl	r2, [r4, #20]
 8022a8c:	60a2      	str	r2, [r4, #8]
 8022a8e:	e7f4      	b.n	8022a7a <__swsetup_r+0x8e>
 8022a90:	2000      	movs	r0, #0
 8022a92:	e7f7      	b.n	8022a84 <__swsetup_r+0x98>
 8022a94:	24000a58 	.word	0x24000a58

08022a98 <memset>:
 8022a98:	4402      	add	r2, r0
 8022a9a:	4603      	mov	r3, r0
 8022a9c:	4293      	cmp	r3, r2
 8022a9e:	d100      	bne.n	8022aa2 <memset+0xa>
 8022aa0:	4770      	bx	lr
 8022aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8022aa6:	e7f9      	b.n	8022a9c <memset+0x4>

08022aa8 <_close_r>:
 8022aa8:	b538      	push	{r3, r4, r5, lr}
 8022aaa:	4d06      	ldr	r5, [pc, #24]	@ (8022ac4 <_close_r+0x1c>)
 8022aac:	2300      	movs	r3, #0
 8022aae:	4604      	mov	r4, r0
 8022ab0:	4608      	mov	r0, r1
 8022ab2:	602b      	str	r3, [r5, #0]
 8022ab4:	f7ed ff43 	bl	801093e <_close>
 8022ab8:	1c43      	adds	r3, r0, #1
 8022aba:	d102      	bne.n	8022ac2 <_close_r+0x1a>
 8022abc:	682b      	ldr	r3, [r5, #0]
 8022abe:	b103      	cbz	r3, 8022ac2 <_close_r+0x1a>
 8022ac0:	6023      	str	r3, [r4, #0]
 8022ac2:	bd38      	pop	{r3, r4, r5, pc}
 8022ac4:	240045a4 	.word	0x240045a4

08022ac8 <_lseek_r>:
 8022ac8:	b538      	push	{r3, r4, r5, lr}
 8022aca:	4d07      	ldr	r5, [pc, #28]	@ (8022ae8 <_lseek_r+0x20>)
 8022acc:	4604      	mov	r4, r0
 8022ace:	4608      	mov	r0, r1
 8022ad0:	4611      	mov	r1, r2
 8022ad2:	2200      	movs	r2, #0
 8022ad4:	602a      	str	r2, [r5, #0]
 8022ad6:	461a      	mov	r2, r3
 8022ad8:	f7ed ff58 	bl	801098c <_lseek>
 8022adc:	1c43      	adds	r3, r0, #1
 8022ade:	d102      	bne.n	8022ae6 <_lseek_r+0x1e>
 8022ae0:	682b      	ldr	r3, [r5, #0]
 8022ae2:	b103      	cbz	r3, 8022ae6 <_lseek_r+0x1e>
 8022ae4:	6023      	str	r3, [r4, #0]
 8022ae6:	bd38      	pop	{r3, r4, r5, pc}
 8022ae8:	240045a4 	.word	0x240045a4

08022aec <_read_r>:
 8022aec:	b538      	push	{r3, r4, r5, lr}
 8022aee:	4d07      	ldr	r5, [pc, #28]	@ (8022b0c <_read_r+0x20>)
 8022af0:	4604      	mov	r4, r0
 8022af2:	4608      	mov	r0, r1
 8022af4:	4611      	mov	r1, r2
 8022af6:	2200      	movs	r2, #0
 8022af8:	602a      	str	r2, [r5, #0]
 8022afa:	461a      	mov	r2, r3
 8022afc:	f7ed ff53 	bl	80109a6 <_read>
 8022b00:	1c43      	adds	r3, r0, #1
 8022b02:	d102      	bne.n	8022b0a <_read_r+0x1e>
 8022b04:	682b      	ldr	r3, [r5, #0]
 8022b06:	b103      	cbz	r3, 8022b0a <_read_r+0x1e>
 8022b08:	6023      	str	r3, [r4, #0]
 8022b0a:	bd38      	pop	{r3, r4, r5, pc}
 8022b0c:	240045a4 	.word	0x240045a4

08022b10 <_sbrk_r>:
 8022b10:	b538      	push	{r3, r4, r5, lr}
 8022b12:	4d06      	ldr	r5, [pc, #24]	@ (8022b2c <_sbrk_r+0x1c>)
 8022b14:	2300      	movs	r3, #0
 8022b16:	4604      	mov	r4, r0
 8022b18:	4608      	mov	r0, r1
 8022b1a:	602b      	str	r3, [r5, #0]
 8022b1c:	f7ed ff62 	bl	80109e4 <_sbrk>
 8022b20:	1c43      	adds	r3, r0, #1
 8022b22:	d102      	bne.n	8022b2a <_sbrk_r+0x1a>
 8022b24:	682b      	ldr	r3, [r5, #0]
 8022b26:	b103      	cbz	r3, 8022b2a <_sbrk_r+0x1a>
 8022b28:	6023      	str	r3, [r4, #0]
 8022b2a:	bd38      	pop	{r3, r4, r5, pc}
 8022b2c:	240045a4 	.word	0x240045a4

08022b30 <_write_r>:
 8022b30:	b538      	push	{r3, r4, r5, lr}
 8022b32:	4d07      	ldr	r5, [pc, #28]	@ (8022b50 <_write_r+0x20>)
 8022b34:	4604      	mov	r4, r0
 8022b36:	4608      	mov	r0, r1
 8022b38:	4611      	mov	r1, r2
 8022b3a:	2200      	movs	r2, #0
 8022b3c:	602a      	str	r2, [r5, #0]
 8022b3e:	461a      	mov	r2, r3
 8022b40:	f7ed ff42 	bl	80109c8 <_write>
 8022b44:	1c43      	adds	r3, r0, #1
 8022b46:	d102      	bne.n	8022b4e <_write_r+0x1e>
 8022b48:	682b      	ldr	r3, [r5, #0]
 8022b4a:	b103      	cbz	r3, 8022b4e <_write_r+0x1e>
 8022b4c:	6023      	str	r3, [r4, #0]
 8022b4e:	bd38      	pop	{r3, r4, r5, pc}
 8022b50:	240045a4 	.word	0x240045a4

08022b54 <__errno>:
 8022b54:	4b01      	ldr	r3, [pc, #4]	@ (8022b5c <__errno+0x8>)
 8022b56:	6818      	ldr	r0, [r3, #0]
 8022b58:	4770      	bx	lr
 8022b5a:	bf00      	nop
 8022b5c:	24000a58 	.word	0x24000a58

08022b60 <__libc_init_array>:
 8022b60:	b570      	push	{r4, r5, r6, lr}
 8022b62:	4d0d      	ldr	r5, [pc, #52]	@ (8022b98 <__libc_init_array+0x38>)
 8022b64:	4c0d      	ldr	r4, [pc, #52]	@ (8022b9c <__libc_init_array+0x3c>)
 8022b66:	1b64      	subs	r4, r4, r5
 8022b68:	10a4      	asrs	r4, r4, #2
 8022b6a:	2600      	movs	r6, #0
 8022b6c:	42a6      	cmp	r6, r4
 8022b6e:	d109      	bne.n	8022b84 <__libc_init_array+0x24>
 8022b70:	4d0b      	ldr	r5, [pc, #44]	@ (8022ba0 <__libc_init_array+0x40>)
 8022b72:	4c0c      	ldr	r4, [pc, #48]	@ (8022ba4 <__libc_init_array+0x44>)
 8022b74:	f000 fdec 	bl	8023750 <_init>
 8022b78:	1b64      	subs	r4, r4, r5
 8022b7a:	10a4      	asrs	r4, r4, #2
 8022b7c:	2600      	movs	r6, #0
 8022b7e:	42a6      	cmp	r6, r4
 8022b80:	d105      	bne.n	8022b8e <__libc_init_array+0x2e>
 8022b82:	bd70      	pop	{r4, r5, r6, pc}
 8022b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8022b88:	4798      	blx	r3
 8022b8a:	3601      	adds	r6, #1
 8022b8c:	e7ee      	b.n	8022b6c <__libc_init_array+0xc>
 8022b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8022b92:	4798      	blx	r3
 8022b94:	3601      	adds	r6, #1
 8022b96:	e7f2      	b.n	8022b7e <__libc_init_array+0x1e>
 8022b98:	08041f04 	.word	0x08041f04
 8022b9c:	08041f04 	.word	0x08041f04
 8022ba0:	08041f04 	.word	0x08041f04
 8022ba4:	08041f08 	.word	0x08041f08

08022ba8 <__retarget_lock_init_recursive>:
 8022ba8:	4770      	bx	lr

08022baa <__retarget_lock_acquire_recursive>:
 8022baa:	4770      	bx	lr

08022bac <__retarget_lock_release_recursive>:
 8022bac:	4770      	bx	lr

08022bae <memcpy>:
 8022bae:	440a      	add	r2, r1
 8022bb0:	4291      	cmp	r1, r2
 8022bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8022bb6:	d100      	bne.n	8022bba <memcpy+0xc>
 8022bb8:	4770      	bx	lr
 8022bba:	b510      	push	{r4, lr}
 8022bbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022bc4:	4291      	cmp	r1, r2
 8022bc6:	d1f9      	bne.n	8022bbc <memcpy+0xe>
 8022bc8:	bd10      	pop	{r4, pc}
	...

08022bcc <_free_r>:
 8022bcc:	b538      	push	{r3, r4, r5, lr}
 8022bce:	4605      	mov	r5, r0
 8022bd0:	2900      	cmp	r1, #0
 8022bd2:	d041      	beq.n	8022c58 <_free_r+0x8c>
 8022bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022bd8:	1f0c      	subs	r4, r1, #4
 8022bda:	2b00      	cmp	r3, #0
 8022bdc:	bfb8      	it	lt
 8022bde:	18e4      	addlt	r4, r4, r3
 8022be0:	f7ff fcf4 	bl	80225cc <__malloc_lock>
 8022be4:	4a1d      	ldr	r2, [pc, #116]	@ (8022c5c <_free_r+0x90>)
 8022be6:	6813      	ldr	r3, [r2, #0]
 8022be8:	b933      	cbnz	r3, 8022bf8 <_free_r+0x2c>
 8022bea:	6063      	str	r3, [r4, #4]
 8022bec:	6014      	str	r4, [r2, #0]
 8022bee:	4628      	mov	r0, r5
 8022bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022bf4:	f7ff bcf0 	b.w	80225d8 <__malloc_unlock>
 8022bf8:	42a3      	cmp	r3, r4
 8022bfa:	d908      	bls.n	8022c0e <_free_r+0x42>
 8022bfc:	6820      	ldr	r0, [r4, #0]
 8022bfe:	1821      	adds	r1, r4, r0
 8022c00:	428b      	cmp	r3, r1
 8022c02:	bf01      	itttt	eq
 8022c04:	6819      	ldreq	r1, [r3, #0]
 8022c06:	685b      	ldreq	r3, [r3, #4]
 8022c08:	1809      	addeq	r1, r1, r0
 8022c0a:	6021      	streq	r1, [r4, #0]
 8022c0c:	e7ed      	b.n	8022bea <_free_r+0x1e>
 8022c0e:	461a      	mov	r2, r3
 8022c10:	685b      	ldr	r3, [r3, #4]
 8022c12:	b10b      	cbz	r3, 8022c18 <_free_r+0x4c>
 8022c14:	42a3      	cmp	r3, r4
 8022c16:	d9fa      	bls.n	8022c0e <_free_r+0x42>
 8022c18:	6811      	ldr	r1, [r2, #0]
 8022c1a:	1850      	adds	r0, r2, r1
 8022c1c:	42a0      	cmp	r0, r4
 8022c1e:	d10b      	bne.n	8022c38 <_free_r+0x6c>
 8022c20:	6820      	ldr	r0, [r4, #0]
 8022c22:	4401      	add	r1, r0
 8022c24:	1850      	adds	r0, r2, r1
 8022c26:	4283      	cmp	r3, r0
 8022c28:	6011      	str	r1, [r2, #0]
 8022c2a:	d1e0      	bne.n	8022bee <_free_r+0x22>
 8022c2c:	6818      	ldr	r0, [r3, #0]
 8022c2e:	685b      	ldr	r3, [r3, #4]
 8022c30:	6053      	str	r3, [r2, #4]
 8022c32:	4408      	add	r0, r1
 8022c34:	6010      	str	r0, [r2, #0]
 8022c36:	e7da      	b.n	8022bee <_free_r+0x22>
 8022c38:	d902      	bls.n	8022c40 <_free_r+0x74>
 8022c3a:	230c      	movs	r3, #12
 8022c3c:	602b      	str	r3, [r5, #0]
 8022c3e:	e7d6      	b.n	8022bee <_free_r+0x22>
 8022c40:	6820      	ldr	r0, [r4, #0]
 8022c42:	1821      	adds	r1, r4, r0
 8022c44:	428b      	cmp	r3, r1
 8022c46:	bf04      	itt	eq
 8022c48:	6819      	ldreq	r1, [r3, #0]
 8022c4a:	685b      	ldreq	r3, [r3, #4]
 8022c4c:	6063      	str	r3, [r4, #4]
 8022c4e:	bf04      	itt	eq
 8022c50:	1809      	addeq	r1, r1, r0
 8022c52:	6021      	streq	r1, [r4, #0]
 8022c54:	6054      	str	r4, [r2, #4]
 8022c56:	e7ca      	b.n	8022bee <_free_r+0x22>
 8022c58:	bd38      	pop	{r3, r4, r5, pc}
 8022c5a:	bf00      	nop
 8022c5c:	24004464 	.word	0x24004464

08022c60 <_malloc_usable_size_r>:
 8022c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022c64:	1f18      	subs	r0, r3, #4
 8022c66:	2b00      	cmp	r3, #0
 8022c68:	bfbc      	itt	lt
 8022c6a:	580b      	ldrlt	r3, [r1, r0]
 8022c6c:	18c0      	addlt	r0, r0, r3
 8022c6e:	4770      	bx	lr

08022c70 <__ssputs_r>:
 8022c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c74:	688e      	ldr	r6, [r1, #8]
 8022c76:	461f      	mov	r7, r3
 8022c78:	42be      	cmp	r6, r7
 8022c7a:	680b      	ldr	r3, [r1, #0]
 8022c7c:	4682      	mov	sl, r0
 8022c7e:	460c      	mov	r4, r1
 8022c80:	4690      	mov	r8, r2
 8022c82:	d82d      	bhi.n	8022ce0 <__ssputs_r+0x70>
 8022c84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022c88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8022c8c:	d026      	beq.n	8022cdc <__ssputs_r+0x6c>
 8022c8e:	6965      	ldr	r5, [r4, #20]
 8022c90:	6909      	ldr	r1, [r1, #16]
 8022c92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022c96:	eba3 0901 	sub.w	r9, r3, r1
 8022c9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022c9e:	1c7b      	adds	r3, r7, #1
 8022ca0:	444b      	add	r3, r9
 8022ca2:	106d      	asrs	r5, r5, #1
 8022ca4:	429d      	cmp	r5, r3
 8022ca6:	bf38      	it	cc
 8022ca8:	461d      	movcc	r5, r3
 8022caa:	0553      	lsls	r3, r2, #21
 8022cac:	d527      	bpl.n	8022cfe <__ssputs_r+0x8e>
 8022cae:	4629      	mov	r1, r5
 8022cb0:	f7ff fc0c 	bl	80224cc <_malloc_r>
 8022cb4:	4606      	mov	r6, r0
 8022cb6:	b360      	cbz	r0, 8022d12 <__ssputs_r+0xa2>
 8022cb8:	6921      	ldr	r1, [r4, #16]
 8022cba:	464a      	mov	r2, r9
 8022cbc:	f7ff ff77 	bl	8022bae <memcpy>
 8022cc0:	89a3      	ldrh	r3, [r4, #12]
 8022cc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8022cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022cca:	81a3      	strh	r3, [r4, #12]
 8022ccc:	6126      	str	r6, [r4, #16]
 8022cce:	6165      	str	r5, [r4, #20]
 8022cd0:	444e      	add	r6, r9
 8022cd2:	eba5 0509 	sub.w	r5, r5, r9
 8022cd6:	6026      	str	r6, [r4, #0]
 8022cd8:	60a5      	str	r5, [r4, #8]
 8022cda:	463e      	mov	r6, r7
 8022cdc:	42be      	cmp	r6, r7
 8022cde:	d900      	bls.n	8022ce2 <__ssputs_r+0x72>
 8022ce0:	463e      	mov	r6, r7
 8022ce2:	6820      	ldr	r0, [r4, #0]
 8022ce4:	4632      	mov	r2, r6
 8022ce6:	4641      	mov	r1, r8
 8022ce8:	f000 fcf6 	bl	80236d8 <memmove>
 8022cec:	68a3      	ldr	r3, [r4, #8]
 8022cee:	1b9b      	subs	r3, r3, r6
 8022cf0:	60a3      	str	r3, [r4, #8]
 8022cf2:	6823      	ldr	r3, [r4, #0]
 8022cf4:	4433      	add	r3, r6
 8022cf6:	6023      	str	r3, [r4, #0]
 8022cf8:	2000      	movs	r0, #0
 8022cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022cfe:	462a      	mov	r2, r5
 8022d00:	f7ff fc70 	bl	80225e4 <_realloc_r>
 8022d04:	4606      	mov	r6, r0
 8022d06:	2800      	cmp	r0, #0
 8022d08:	d1e0      	bne.n	8022ccc <__ssputs_r+0x5c>
 8022d0a:	6921      	ldr	r1, [r4, #16]
 8022d0c:	4650      	mov	r0, sl
 8022d0e:	f7ff ff5d 	bl	8022bcc <_free_r>
 8022d12:	230c      	movs	r3, #12
 8022d14:	f8ca 3000 	str.w	r3, [sl]
 8022d18:	89a3      	ldrh	r3, [r4, #12]
 8022d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022d1e:	81a3      	strh	r3, [r4, #12]
 8022d20:	f04f 30ff 	mov.w	r0, #4294967295
 8022d24:	e7e9      	b.n	8022cfa <__ssputs_r+0x8a>
	...

08022d28 <_svfiprintf_r>:
 8022d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d2c:	4698      	mov	r8, r3
 8022d2e:	898b      	ldrh	r3, [r1, #12]
 8022d30:	061b      	lsls	r3, r3, #24
 8022d32:	b09d      	sub	sp, #116	@ 0x74
 8022d34:	4607      	mov	r7, r0
 8022d36:	460d      	mov	r5, r1
 8022d38:	4614      	mov	r4, r2
 8022d3a:	d510      	bpl.n	8022d5e <_svfiprintf_r+0x36>
 8022d3c:	690b      	ldr	r3, [r1, #16]
 8022d3e:	b973      	cbnz	r3, 8022d5e <_svfiprintf_r+0x36>
 8022d40:	2140      	movs	r1, #64	@ 0x40
 8022d42:	f7ff fbc3 	bl	80224cc <_malloc_r>
 8022d46:	6028      	str	r0, [r5, #0]
 8022d48:	6128      	str	r0, [r5, #16]
 8022d4a:	b930      	cbnz	r0, 8022d5a <_svfiprintf_r+0x32>
 8022d4c:	230c      	movs	r3, #12
 8022d4e:	603b      	str	r3, [r7, #0]
 8022d50:	f04f 30ff 	mov.w	r0, #4294967295
 8022d54:	b01d      	add	sp, #116	@ 0x74
 8022d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d5a:	2340      	movs	r3, #64	@ 0x40
 8022d5c:	616b      	str	r3, [r5, #20]
 8022d5e:	2300      	movs	r3, #0
 8022d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d62:	2320      	movs	r3, #32
 8022d64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8022d6c:	2330      	movs	r3, #48	@ 0x30
 8022d6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8022f0c <_svfiprintf_r+0x1e4>
 8022d72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022d76:	f04f 0901 	mov.w	r9, #1
 8022d7a:	4623      	mov	r3, r4
 8022d7c:	469a      	mov	sl, r3
 8022d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022d82:	b10a      	cbz	r2, 8022d88 <_svfiprintf_r+0x60>
 8022d84:	2a25      	cmp	r2, #37	@ 0x25
 8022d86:	d1f9      	bne.n	8022d7c <_svfiprintf_r+0x54>
 8022d88:	ebba 0b04 	subs.w	fp, sl, r4
 8022d8c:	d00b      	beq.n	8022da6 <_svfiprintf_r+0x7e>
 8022d8e:	465b      	mov	r3, fp
 8022d90:	4622      	mov	r2, r4
 8022d92:	4629      	mov	r1, r5
 8022d94:	4638      	mov	r0, r7
 8022d96:	f7ff ff6b 	bl	8022c70 <__ssputs_r>
 8022d9a:	3001      	adds	r0, #1
 8022d9c:	f000 80a7 	beq.w	8022eee <_svfiprintf_r+0x1c6>
 8022da0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022da2:	445a      	add	r2, fp
 8022da4:	9209      	str	r2, [sp, #36]	@ 0x24
 8022da6:	f89a 3000 	ldrb.w	r3, [sl]
 8022daa:	2b00      	cmp	r3, #0
 8022dac:	f000 809f 	beq.w	8022eee <_svfiprintf_r+0x1c6>
 8022db0:	2300      	movs	r3, #0
 8022db2:	f04f 32ff 	mov.w	r2, #4294967295
 8022db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022dba:	f10a 0a01 	add.w	sl, sl, #1
 8022dbe:	9304      	str	r3, [sp, #16]
 8022dc0:	9307      	str	r3, [sp, #28]
 8022dc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022dc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8022dc8:	4654      	mov	r4, sl
 8022dca:	2205      	movs	r2, #5
 8022dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022dd0:	484e      	ldr	r0, [pc, #312]	@ (8022f0c <_svfiprintf_r+0x1e4>)
 8022dd2:	f7ed f93d 	bl	8010050 <memchr>
 8022dd6:	9a04      	ldr	r2, [sp, #16]
 8022dd8:	b9d8      	cbnz	r0, 8022e12 <_svfiprintf_r+0xea>
 8022dda:	06d0      	lsls	r0, r2, #27
 8022ddc:	bf44      	itt	mi
 8022dde:	2320      	movmi	r3, #32
 8022de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022de4:	0711      	lsls	r1, r2, #28
 8022de6:	bf44      	itt	mi
 8022de8:	232b      	movmi	r3, #43	@ 0x2b
 8022dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022dee:	f89a 3000 	ldrb.w	r3, [sl]
 8022df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8022df4:	d015      	beq.n	8022e22 <_svfiprintf_r+0xfa>
 8022df6:	9a07      	ldr	r2, [sp, #28]
 8022df8:	4654      	mov	r4, sl
 8022dfa:	2000      	movs	r0, #0
 8022dfc:	f04f 0c0a 	mov.w	ip, #10
 8022e00:	4621      	mov	r1, r4
 8022e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022e06:	3b30      	subs	r3, #48	@ 0x30
 8022e08:	2b09      	cmp	r3, #9
 8022e0a:	d94b      	bls.n	8022ea4 <_svfiprintf_r+0x17c>
 8022e0c:	b1b0      	cbz	r0, 8022e3c <_svfiprintf_r+0x114>
 8022e0e:	9207      	str	r2, [sp, #28]
 8022e10:	e014      	b.n	8022e3c <_svfiprintf_r+0x114>
 8022e12:	eba0 0308 	sub.w	r3, r0, r8
 8022e16:	fa09 f303 	lsl.w	r3, r9, r3
 8022e1a:	4313      	orrs	r3, r2
 8022e1c:	9304      	str	r3, [sp, #16]
 8022e1e:	46a2      	mov	sl, r4
 8022e20:	e7d2      	b.n	8022dc8 <_svfiprintf_r+0xa0>
 8022e22:	9b03      	ldr	r3, [sp, #12]
 8022e24:	1d19      	adds	r1, r3, #4
 8022e26:	681b      	ldr	r3, [r3, #0]
 8022e28:	9103      	str	r1, [sp, #12]
 8022e2a:	2b00      	cmp	r3, #0
 8022e2c:	bfbb      	ittet	lt
 8022e2e:	425b      	neglt	r3, r3
 8022e30:	f042 0202 	orrlt.w	r2, r2, #2
 8022e34:	9307      	strge	r3, [sp, #28]
 8022e36:	9307      	strlt	r3, [sp, #28]
 8022e38:	bfb8      	it	lt
 8022e3a:	9204      	strlt	r2, [sp, #16]
 8022e3c:	7823      	ldrb	r3, [r4, #0]
 8022e3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8022e40:	d10a      	bne.n	8022e58 <_svfiprintf_r+0x130>
 8022e42:	7863      	ldrb	r3, [r4, #1]
 8022e44:	2b2a      	cmp	r3, #42	@ 0x2a
 8022e46:	d132      	bne.n	8022eae <_svfiprintf_r+0x186>
 8022e48:	9b03      	ldr	r3, [sp, #12]
 8022e4a:	1d1a      	adds	r2, r3, #4
 8022e4c:	681b      	ldr	r3, [r3, #0]
 8022e4e:	9203      	str	r2, [sp, #12]
 8022e50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022e54:	3402      	adds	r4, #2
 8022e56:	9305      	str	r3, [sp, #20]
 8022e58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8022f1c <_svfiprintf_r+0x1f4>
 8022e5c:	7821      	ldrb	r1, [r4, #0]
 8022e5e:	2203      	movs	r2, #3
 8022e60:	4650      	mov	r0, sl
 8022e62:	f7ed f8f5 	bl	8010050 <memchr>
 8022e66:	b138      	cbz	r0, 8022e78 <_svfiprintf_r+0x150>
 8022e68:	9b04      	ldr	r3, [sp, #16]
 8022e6a:	eba0 000a 	sub.w	r0, r0, sl
 8022e6e:	2240      	movs	r2, #64	@ 0x40
 8022e70:	4082      	lsls	r2, r0
 8022e72:	4313      	orrs	r3, r2
 8022e74:	3401      	adds	r4, #1
 8022e76:	9304      	str	r3, [sp, #16]
 8022e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022e7c:	4824      	ldr	r0, [pc, #144]	@ (8022f10 <_svfiprintf_r+0x1e8>)
 8022e7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022e82:	2206      	movs	r2, #6
 8022e84:	f7ed f8e4 	bl	8010050 <memchr>
 8022e88:	2800      	cmp	r0, #0
 8022e8a:	d036      	beq.n	8022efa <_svfiprintf_r+0x1d2>
 8022e8c:	4b21      	ldr	r3, [pc, #132]	@ (8022f14 <_svfiprintf_r+0x1ec>)
 8022e8e:	bb1b      	cbnz	r3, 8022ed8 <_svfiprintf_r+0x1b0>
 8022e90:	9b03      	ldr	r3, [sp, #12]
 8022e92:	3307      	adds	r3, #7
 8022e94:	f023 0307 	bic.w	r3, r3, #7
 8022e98:	3308      	adds	r3, #8
 8022e9a:	9303      	str	r3, [sp, #12]
 8022e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022e9e:	4433      	add	r3, r6
 8022ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8022ea2:	e76a      	b.n	8022d7a <_svfiprintf_r+0x52>
 8022ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8022ea8:	460c      	mov	r4, r1
 8022eaa:	2001      	movs	r0, #1
 8022eac:	e7a8      	b.n	8022e00 <_svfiprintf_r+0xd8>
 8022eae:	2300      	movs	r3, #0
 8022eb0:	3401      	adds	r4, #1
 8022eb2:	9305      	str	r3, [sp, #20]
 8022eb4:	4619      	mov	r1, r3
 8022eb6:	f04f 0c0a 	mov.w	ip, #10
 8022eba:	4620      	mov	r0, r4
 8022ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022ec0:	3a30      	subs	r2, #48	@ 0x30
 8022ec2:	2a09      	cmp	r2, #9
 8022ec4:	d903      	bls.n	8022ece <_svfiprintf_r+0x1a6>
 8022ec6:	2b00      	cmp	r3, #0
 8022ec8:	d0c6      	beq.n	8022e58 <_svfiprintf_r+0x130>
 8022eca:	9105      	str	r1, [sp, #20]
 8022ecc:	e7c4      	b.n	8022e58 <_svfiprintf_r+0x130>
 8022ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8022ed2:	4604      	mov	r4, r0
 8022ed4:	2301      	movs	r3, #1
 8022ed6:	e7f0      	b.n	8022eba <_svfiprintf_r+0x192>
 8022ed8:	ab03      	add	r3, sp, #12
 8022eda:	9300      	str	r3, [sp, #0]
 8022edc:	462a      	mov	r2, r5
 8022ede:	4b0e      	ldr	r3, [pc, #56]	@ (8022f18 <_svfiprintf_r+0x1f0>)
 8022ee0:	a904      	add	r1, sp, #16
 8022ee2:	4638      	mov	r0, r7
 8022ee4:	f3af 8000 	nop.w
 8022ee8:	1c42      	adds	r2, r0, #1
 8022eea:	4606      	mov	r6, r0
 8022eec:	d1d6      	bne.n	8022e9c <_svfiprintf_r+0x174>
 8022eee:	89ab      	ldrh	r3, [r5, #12]
 8022ef0:	065b      	lsls	r3, r3, #25
 8022ef2:	f53f af2d 	bmi.w	8022d50 <_svfiprintf_r+0x28>
 8022ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022ef8:	e72c      	b.n	8022d54 <_svfiprintf_r+0x2c>
 8022efa:	ab03      	add	r3, sp, #12
 8022efc:	9300      	str	r3, [sp, #0]
 8022efe:	462a      	mov	r2, r5
 8022f00:	4b05      	ldr	r3, [pc, #20]	@ (8022f18 <_svfiprintf_r+0x1f0>)
 8022f02:	a904      	add	r1, sp, #16
 8022f04:	4638      	mov	r0, r7
 8022f06:	f000 f9bb 	bl	8023280 <_printf_i>
 8022f0a:	e7ed      	b.n	8022ee8 <_svfiprintf_r+0x1c0>
 8022f0c:	08041ec8 	.word	0x08041ec8
 8022f10:	08041ed2 	.word	0x08041ed2
 8022f14:	00000000 	.word	0x00000000
 8022f18:	08022c71 	.word	0x08022c71
 8022f1c:	08041ece 	.word	0x08041ece

08022f20 <__sfputc_r>:
 8022f20:	6893      	ldr	r3, [r2, #8]
 8022f22:	3b01      	subs	r3, #1
 8022f24:	2b00      	cmp	r3, #0
 8022f26:	b410      	push	{r4}
 8022f28:	6093      	str	r3, [r2, #8]
 8022f2a:	da08      	bge.n	8022f3e <__sfputc_r+0x1e>
 8022f2c:	6994      	ldr	r4, [r2, #24]
 8022f2e:	42a3      	cmp	r3, r4
 8022f30:	db01      	blt.n	8022f36 <__sfputc_r+0x16>
 8022f32:	290a      	cmp	r1, #10
 8022f34:	d103      	bne.n	8022f3e <__sfputc_r+0x1e>
 8022f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022f3a:	f7ff bd18 	b.w	802296e <__swbuf_r>
 8022f3e:	6813      	ldr	r3, [r2, #0]
 8022f40:	1c58      	adds	r0, r3, #1
 8022f42:	6010      	str	r0, [r2, #0]
 8022f44:	7019      	strb	r1, [r3, #0]
 8022f46:	4608      	mov	r0, r1
 8022f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022f4c:	4770      	bx	lr

08022f4e <__sfputs_r>:
 8022f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f50:	4606      	mov	r6, r0
 8022f52:	460f      	mov	r7, r1
 8022f54:	4614      	mov	r4, r2
 8022f56:	18d5      	adds	r5, r2, r3
 8022f58:	42ac      	cmp	r4, r5
 8022f5a:	d101      	bne.n	8022f60 <__sfputs_r+0x12>
 8022f5c:	2000      	movs	r0, #0
 8022f5e:	e007      	b.n	8022f70 <__sfputs_r+0x22>
 8022f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022f64:	463a      	mov	r2, r7
 8022f66:	4630      	mov	r0, r6
 8022f68:	f7ff ffda 	bl	8022f20 <__sfputc_r>
 8022f6c:	1c43      	adds	r3, r0, #1
 8022f6e:	d1f3      	bne.n	8022f58 <__sfputs_r+0xa>
 8022f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022f74 <_vfiprintf_r>:
 8022f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f78:	460d      	mov	r5, r1
 8022f7a:	b09d      	sub	sp, #116	@ 0x74
 8022f7c:	4614      	mov	r4, r2
 8022f7e:	4698      	mov	r8, r3
 8022f80:	4606      	mov	r6, r0
 8022f82:	b118      	cbz	r0, 8022f8c <_vfiprintf_r+0x18>
 8022f84:	6a03      	ldr	r3, [r0, #32]
 8022f86:	b90b      	cbnz	r3, 8022f8c <_vfiprintf_r+0x18>
 8022f88:	f7ff fbe6 	bl	8022758 <__sinit>
 8022f8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022f8e:	07d9      	lsls	r1, r3, #31
 8022f90:	d405      	bmi.n	8022f9e <_vfiprintf_r+0x2a>
 8022f92:	89ab      	ldrh	r3, [r5, #12]
 8022f94:	059a      	lsls	r2, r3, #22
 8022f96:	d402      	bmi.n	8022f9e <_vfiprintf_r+0x2a>
 8022f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022f9a:	f7ff fe06 	bl	8022baa <__retarget_lock_acquire_recursive>
 8022f9e:	89ab      	ldrh	r3, [r5, #12]
 8022fa0:	071b      	lsls	r3, r3, #28
 8022fa2:	d501      	bpl.n	8022fa8 <_vfiprintf_r+0x34>
 8022fa4:	692b      	ldr	r3, [r5, #16]
 8022fa6:	b99b      	cbnz	r3, 8022fd0 <_vfiprintf_r+0x5c>
 8022fa8:	4629      	mov	r1, r5
 8022faa:	4630      	mov	r0, r6
 8022fac:	f7ff fd1e 	bl	80229ec <__swsetup_r>
 8022fb0:	b170      	cbz	r0, 8022fd0 <_vfiprintf_r+0x5c>
 8022fb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022fb4:	07dc      	lsls	r4, r3, #31
 8022fb6:	d504      	bpl.n	8022fc2 <_vfiprintf_r+0x4e>
 8022fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8022fbc:	b01d      	add	sp, #116	@ 0x74
 8022fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fc2:	89ab      	ldrh	r3, [r5, #12]
 8022fc4:	0598      	lsls	r0, r3, #22
 8022fc6:	d4f7      	bmi.n	8022fb8 <_vfiprintf_r+0x44>
 8022fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022fca:	f7ff fdef 	bl	8022bac <__retarget_lock_release_recursive>
 8022fce:	e7f3      	b.n	8022fb8 <_vfiprintf_r+0x44>
 8022fd0:	2300      	movs	r3, #0
 8022fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8022fd4:	2320      	movs	r3, #32
 8022fd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8022fde:	2330      	movs	r3, #48	@ 0x30
 8022fe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023190 <_vfiprintf_r+0x21c>
 8022fe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022fe8:	f04f 0901 	mov.w	r9, #1
 8022fec:	4623      	mov	r3, r4
 8022fee:	469a      	mov	sl, r3
 8022ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022ff4:	b10a      	cbz	r2, 8022ffa <_vfiprintf_r+0x86>
 8022ff6:	2a25      	cmp	r2, #37	@ 0x25
 8022ff8:	d1f9      	bne.n	8022fee <_vfiprintf_r+0x7a>
 8022ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8022ffe:	d00b      	beq.n	8023018 <_vfiprintf_r+0xa4>
 8023000:	465b      	mov	r3, fp
 8023002:	4622      	mov	r2, r4
 8023004:	4629      	mov	r1, r5
 8023006:	4630      	mov	r0, r6
 8023008:	f7ff ffa1 	bl	8022f4e <__sfputs_r>
 802300c:	3001      	adds	r0, #1
 802300e:	f000 80a7 	beq.w	8023160 <_vfiprintf_r+0x1ec>
 8023012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023014:	445a      	add	r2, fp
 8023016:	9209      	str	r2, [sp, #36]	@ 0x24
 8023018:	f89a 3000 	ldrb.w	r3, [sl]
 802301c:	2b00      	cmp	r3, #0
 802301e:	f000 809f 	beq.w	8023160 <_vfiprintf_r+0x1ec>
 8023022:	2300      	movs	r3, #0
 8023024:	f04f 32ff 	mov.w	r2, #4294967295
 8023028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802302c:	f10a 0a01 	add.w	sl, sl, #1
 8023030:	9304      	str	r3, [sp, #16]
 8023032:	9307      	str	r3, [sp, #28]
 8023034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023038:	931a      	str	r3, [sp, #104]	@ 0x68
 802303a:	4654      	mov	r4, sl
 802303c:	2205      	movs	r2, #5
 802303e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023042:	4853      	ldr	r0, [pc, #332]	@ (8023190 <_vfiprintf_r+0x21c>)
 8023044:	f7ed f804 	bl	8010050 <memchr>
 8023048:	9a04      	ldr	r2, [sp, #16]
 802304a:	b9d8      	cbnz	r0, 8023084 <_vfiprintf_r+0x110>
 802304c:	06d1      	lsls	r1, r2, #27
 802304e:	bf44      	itt	mi
 8023050:	2320      	movmi	r3, #32
 8023052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023056:	0713      	lsls	r3, r2, #28
 8023058:	bf44      	itt	mi
 802305a:	232b      	movmi	r3, #43	@ 0x2b
 802305c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023060:	f89a 3000 	ldrb.w	r3, [sl]
 8023064:	2b2a      	cmp	r3, #42	@ 0x2a
 8023066:	d015      	beq.n	8023094 <_vfiprintf_r+0x120>
 8023068:	9a07      	ldr	r2, [sp, #28]
 802306a:	4654      	mov	r4, sl
 802306c:	2000      	movs	r0, #0
 802306e:	f04f 0c0a 	mov.w	ip, #10
 8023072:	4621      	mov	r1, r4
 8023074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023078:	3b30      	subs	r3, #48	@ 0x30
 802307a:	2b09      	cmp	r3, #9
 802307c:	d94b      	bls.n	8023116 <_vfiprintf_r+0x1a2>
 802307e:	b1b0      	cbz	r0, 80230ae <_vfiprintf_r+0x13a>
 8023080:	9207      	str	r2, [sp, #28]
 8023082:	e014      	b.n	80230ae <_vfiprintf_r+0x13a>
 8023084:	eba0 0308 	sub.w	r3, r0, r8
 8023088:	fa09 f303 	lsl.w	r3, r9, r3
 802308c:	4313      	orrs	r3, r2
 802308e:	9304      	str	r3, [sp, #16]
 8023090:	46a2      	mov	sl, r4
 8023092:	e7d2      	b.n	802303a <_vfiprintf_r+0xc6>
 8023094:	9b03      	ldr	r3, [sp, #12]
 8023096:	1d19      	adds	r1, r3, #4
 8023098:	681b      	ldr	r3, [r3, #0]
 802309a:	9103      	str	r1, [sp, #12]
 802309c:	2b00      	cmp	r3, #0
 802309e:	bfbb      	ittet	lt
 80230a0:	425b      	neglt	r3, r3
 80230a2:	f042 0202 	orrlt.w	r2, r2, #2
 80230a6:	9307      	strge	r3, [sp, #28]
 80230a8:	9307      	strlt	r3, [sp, #28]
 80230aa:	bfb8      	it	lt
 80230ac:	9204      	strlt	r2, [sp, #16]
 80230ae:	7823      	ldrb	r3, [r4, #0]
 80230b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80230b2:	d10a      	bne.n	80230ca <_vfiprintf_r+0x156>
 80230b4:	7863      	ldrb	r3, [r4, #1]
 80230b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80230b8:	d132      	bne.n	8023120 <_vfiprintf_r+0x1ac>
 80230ba:	9b03      	ldr	r3, [sp, #12]
 80230bc:	1d1a      	adds	r2, r3, #4
 80230be:	681b      	ldr	r3, [r3, #0]
 80230c0:	9203      	str	r2, [sp, #12]
 80230c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80230c6:	3402      	adds	r4, #2
 80230c8:	9305      	str	r3, [sp, #20]
 80230ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80231a0 <_vfiprintf_r+0x22c>
 80230ce:	7821      	ldrb	r1, [r4, #0]
 80230d0:	2203      	movs	r2, #3
 80230d2:	4650      	mov	r0, sl
 80230d4:	f7ec ffbc 	bl	8010050 <memchr>
 80230d8:	b138      	cbz	r0, 80230ea <_vfiprintf_r+0x176>
 80230da:	9b04      	ldr	r3, [sp, #16]
 80230dc:	eba0 000a 	sub.w	r0, r0, sl
 80230e0:	2240      	movs	r2, #64	@ 0x40
 80230e2:	4082      	lsls	r2, r0
 80230e4:	4313      	orrs	r3, r2
 80230e6:	3401      	adds	r4, #1
 80230e8:	9304      	str	r3, [sp, #16]
 80230ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80230ee:	4829      	ldr	r0, [pc, #164]	@ (8023194 <_vfiprintf_r+0x220>)
 80230f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80230f4:	2206      	movs	r2, #6
 80230f6:	f7ec ffab 	bl	8010050 <memchr>
 80230fa:	2800      	cmp	r0, #0
 80230fc:	d03f      	beq.n	802317e <_vfiprintf_r+0x20a>
 80230fe:	4b26      	ldr	r3, [pc, #152]	@ (8023198 <_vfiprintf_r+0x224>)
 8023100:	bb1b      	cbnz	r3, 802314a <_vfiprintf_r+0x1d6>
 8023102:	9b03      	ldr	r3, [sp, #12]
 8023104:	3307      	adds	r3, #7
 8023106:	f023 0307 	bic.w	r3, r3, #7
 802310a:	3308      	adds	r3, #8
 802310c:	9303      	str	r3, [sp, #12]
 802310e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023110:	443b      	add	r3, r7
 8023112:	9309      	str	r3, [sp, #36]	@ 0x24
 8023114:	e76a      	b.n	8022fec <_vfiprintf_r+0x78>
 8023116:	fb0c 3202 	mla	r2, ip, r2, r3
 802311a:	460c      	mov	r4, r1
 802311c:	2001      	movs	r0, #1
 802311e:	e7a8      	b.n	8023072 <_vfiprintf_r+0xfe>
 8023120:	2300      	movs	r3, #0
 8023122:	3401      	adds	r4, #1
 8023124:	9305      	str	r3, [sp, #20]
 8023126:	4619      	mov	r1, r3
 8023128:	f04f 0c0a 	mov.w	ip, #10
 802312c:	4620      	mov	r0, r4
 802312e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023132:	3a30      	subs	r2, #48	@ 0x30
 8023134:	2a09      	cmp	r2, #9
 8023136:	d903      	bls.n	8023140 <_vfiprintf_r+0x1cc>
 8023138:	2b00      	cmp	r3, #0
 802313a:	d0c6      	beq.n	80230ca <_vfiprintf_r+0x156>
 802313c:	9105      	str	r1, [sp, #20]
 802313e:	e7c4      	b.n	80230ca <_vfiprintf_r+0x156>
 8023140:	fb0c 2101 	mla	r1, ip, r1, r2
 8023144:	4604      	mov	r4, r0
 8023146:	2301      	movs	r3, #1
 8023148:	e7f0      	b.n	802312c <_vfiprintf_r+0x1b8>
 802314a:	ab03      	add	r3, sp, #12
 802314c:	9300      	str	r3, [sp, #0]
 802314e:	462a      	mov	r2, r5
 8023150:	4b12      	ldr	r3, [pc, #72]	@ (802319c <_vfiprintf_r+0x228>)
 8023152:	a904      	add	r1, sp, #16
 8023154:	4630      	mov	r0, r6
 8023156:	f3af 8000 	nop.w
 802315a:	4607      	mov	r7, r0
 802315c:	1c78      	adds	r0, r7, #1
 802315e:	d1d6      	bne.n	802310e <_vfiprintf_r+0x19a>
 8023160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023162:	07d9      	lsls	r1, r3, #31
 8023164:	d405      	bmi.n	8023172 <_vfiprintf_r+0x1fe>
 8023166:	89ab      	ldrh	r3, [r5, #12]
 8023168:	059a      	lsls	r2, r3, #22
 802316a:	d402      	bmi.n	8023172 <_vfiprintf_r+0x1fe>
 802316c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802316e:	f7ff fd1d 	bl	8022bac <__retarget_lock_release_recursive>
 8023172:	89ab      	ldrh	r3, [r5, #12]
 8023174:	065b      	lsls	r3, r3, #25
 8023176:	f53f af1f 	bmi.w	8022fb8 <_vfiprintf_r+0x44>
 802317a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802317c:	e71e      	b.n	8022fbc <_vfiprintf_r+0x48>
 802317e:	ab03      	add	r3, sp, #12
 8023180:	9300      	str	r3, [sp, #0]
 8023182:	462a      	mov	r2, r5
 8023184:	4b05      	ldr	r3, [pc, #20]	@ (802319c <_vfiprintf_r+0x228>)
 8023186:	a904      	add	r1, sp, #16
 8023188:	4630      	mov	r0, r6
 802318a:	f000 f879 	bl	8023280 <_printf_i>
 802318e:	e7e4      	b.n	802315a <_vfiprintf_r+0x1e6>
 8023190:	08041ec8 	.word	0x08041ec8
 8023194:	08041ed2 	.word	0x08041ed2
 8023198:	00000000 	.word	0x00000000
 802319c:	08022f4f 	.word	0x08022f4f
 80231a0:	08041ece 	.word	0x08041ece

080231a4 <_printf_common>:
 80231a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80231a8:	4616      	mov	r6, r2
 80231aa:	4698      	mov	r8, r3
 80231ac:	688a      	ldr	r2, [r1, #8]
 80231ae:	690b      	ldr	r3, [r1, #16]
 80231b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80231b4:	4293      	cmp	r3, r2
 80231b6:	bfb8      	it	lt
 80231b8:	4613      	movlt	r3, r2
 80231ba:	6033      	str	r3, [r6, #0]
 80231bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80231c0:	4607      	mov	r7, r0
 80231c2:	460c      	mov	r4, r1
 80231c4:	b10a      	cbz	r2, 80231ca <_printf_common+0x26>
 80231c6:	3301      	adds	r3, #1
 80231c8:	6033      	str	r3, [r6, #0]
 80231ca:	6823      	ldr	r3, [r4, #0]
 80231cc:	0699      	lsls	r1, r3, #26
 80231ce:	bf42      	ittt	mi
 80231d0:	6833      	ldrmi	r3, [r6, #0]
 80231d2:	3302      	addmi	r3, #2
 80231d4:	6033      	strmi	r3, [r6, #0]
 80231d6:	6825      	ldr	r5, [r4, #0]
 80231d8:	f015 0506 	ands.w	r5, r5, #6
 80231dc:	d106      	bne.n	80231ec <_printf_common+0x48>
 80231de:	f104 0a19 	add.w	sl, r4, #25
 80231e2:	68e3      	ldr	r3, [r4, #12]
 80231e4:	6832      	ldr	r2, [r6, #0]
 80231e6:	1a9b      	subs	r3, r3, r2
 80231e8:	42ab      	cmp	r3, r5
 80231ea:	dc26      	bgt.n	802323a <_printf_common+0x96>
 80231ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80231f0:	6822      	ldr	r2, [r4, #0]
 80231f2:	3b00      	subs	r3, #0
 80231f4:	bf18      	it	ne
 80231f6:	2301      	movne	r3, #1
 80231f8:	0692      	lsls	r2, r2, #26
 80231fa:	d42b      	bmi.n	8023254 <_printf_common+0xb0>
 80231fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023200:	4641      	mov	r1, r8
 8023202:	4638      	mov	r0, r7
 8023204:	47c8      	blx	r9
 8023206:	3001      	adds	r0, #1
 8023208:	d01e      	beq.n	8023248 <_printf_common+0xa4>
 802320a:	6823      	ldr	r3, [r4, #0]
 802320c:	6922      	ldr	r2, [r4, #16]
 802320e:	f003 0306 	and.w	r3, r3, #6
 8023212:	2b04      	cmp	r3, #4
 8023214:	bf02      	ittt	eq
 8023216:	68e5      	ldreq	r5, [r4, #12]
 8023218:	6833      	ldreq	r3, [r6, #0]
 802321a:	1aed      	subeq	r5, r5, r3
 802321c:	68a3      	ldr	r3, [r4, #8]
 802321e:	bf0c      	ite	eq
 8023220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023224:	2500      	movne	r5, #0
 8023226:	4293      	cmp	r3, r2
 8023228:	bfc4      	itt	gt
 802322a:	1a9b      	subgt	r3, r3, r2
 802322c:	18ed      	addgt	r5, r5, r3
 802322e:	2600      	movs	r6, #0
 8023230:	341a      	adds	r4, #26
 8023232:	42b5      	cmp	r5, r6
 8023234:	d11a      	bne.n	802326c <_printf_common+0xc8>
 8023236:	2000      	movs	r0, #0
 8023238:	e008      	b.n	802324c <_printf_common+0xa8>
 802323a:	2301      	movs	r3, #1
 802323c:	4652      	mov	r2, sl
 802323e:	4641      	mov	r1, r8
 8023240:	4638      	mov	r0, r7
 8023242:	47c8      	blx	r9
 8023244:	3001      	adds	r0, #1
 8023246:	d103      	bne.n	8023250 <_printf_common+0xac>
 8023248:	f04f 30ff 	mov.w	r0, #4294967295
 802324c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023250:	3501      	adds	r5, #1
 8023252:	e7c6      	b.n	80231e2 <_printf_common+0x3e>
 8023254:	18e1      	adds	r1, r4, r3
 8023256:	1c5a      	adds	r2, r3, #1
 8023258:	2030      	movs	r0, #48	@ 0x30
 802325a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802325e:	4422      	add	r2, r4
 8023260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023268:	3302      	adds	r3, #2
 802326a:	e7c7      	b.n	80231fc <_printf_common+0x58>
 802326c:	2301      	movs	r3, #1
 802326e:	4622      	mov	r2, r4
 8023270:	4641      	mov	r1, r8
 8023272:	4638      	mov	r0, r7
 8023274:	47c8      	blx	r9
 8023276:	3001      	adds	r0, #1
 8023278:	d0e6      	beq.n	8023248 <_printf_common+0xa4>
 802327a:	3601      	adds	r6, #1
 802327c:	e7d9      	b.n	8023232 <_printf_common+0x8e>
	...

08023280 <_printf_i>:
 8023280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023284:	7e0f      	ldrb	r7, [r1, #24]
 8023286:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023288:	2f78      	cmp	r7, #120	@ 0x78
 802328a:	4691      	mov	r9, r2
 802328c:	4680      	mov	r8, r0
 802328e:	460c      	mov	r4, r1
 8023290:	469a      	mov	sl, r3
 8023292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023296:	d807      	bhi.n	80232a8 <_printf_i+0x28>
 8023298:	2f62      	cmp	r7, #98	@ 0x62
 802329a:	d80a      	bhi.n	80232b2 <_printf_i+0x32>
 802329c:	2f00      	cmp	r7, #0
 802329e:	f000 80d1 	beq.w	8023444 <_printf_i+0x1c4>
 80232a2:	2f58      	cmp	r7, #88	@ 0x58
 80232a4:	f000 80b8 	beq.w	8023418 <_printf_i+0x198>
 80232a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80232ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80232b0:	e03a      	b.n	8023328 <_printf_i+0xa8>
 80232b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80232b6:	2b15      	cmp	r3, #21
 80232b8:	d8f6      	bhi.n	80232a8 <_printf_i+0x28>
 80232ba:	a101      	add	r1, pc, #4	@ (adr r1, 80232c0 <_printf_i+0x40>)
 80232bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80232c0:	08023319 	.word	0x08023319
 80232c4:	0802332d 	.word	0x0802332d
 80232c8:	080232a9 	.word	0x080232a9
 80232cc:	080232a9 	.word	0x080232a9
 80232d0:	080232a9 	.word	0x080232a9
 80232d4:	080232a9 	.word	0x080232a9
 80232d8:	0802332d 	.word	0x0802332d
 80232dc:	080232a9 	.word	0x080232a9
 80232e0:	080232a9 	.word	0x080232a9
 80232e4:	080232a9 	.word	0x080232a9
 80232e8:	080232a9 	.word	0x080232a9
 80232ec:	0802342b 	.word	0x0802342b
 80232f0:	08023357 	.word	0x08023357
 80232f4:	080233e5 	.word	0x080233e5
 80232f8:	080232a9 	.word	0x080232a9
 80232fc:	080232a9 	.word	0x080232a9
 8023300:	0802344d 	.word	0x0802344d
 8023304:	080232a9 	.word	0x080232a9
 8023308:	08023357 	.word	0x08023357
 802330c:	080232a9 	.word	0x080232a9
 8023310:	080232a9 	.word	0x080232a9
 8023314:	080233ed 	.word	0x080233ed
 8023318:	6833      	ldr	r3, [r6, #0]
 802331a:	1d1a      	adds	r2, r3, #4
 802331c:	681b      	ldr	r3, [r3, #0]
 802331e:	6032      	str	r2, [r6, #0]
 8023320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023328:	2301      	movs	r3, #1
 802332a:	e09c      	b.n	8023466 <_printf_i+0x1e6>
 802332c:	6833      	ldr	r3, [r6, #0]
 802332e:	6820      	ldr	r0, [r4, #0]
 8023330:	1d19      	adds	r1, r3, #4
 8023332:	6031      	str	r1, [r6, #0]
 8023334:	0606      	lsls	r6, r0, #24
 8023336:	d501      	bpl.n	802333c <_printf_i+0xbc>
 8023338:	681d      	ldr	r5, [r3, #0]
 802333a:	e003      	b.n	8023344 <_printf_i+0xc4>
 802333c:	0645      	lsls	r5, r0, #25
 802333e:	d5fb      	bpl.n	8023338 <_printf_i+0xb8>
 8023340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023344:	2d00      	cmp	r5, #0
 8023346:	da03      	bge.n	8023350 <_printf_i+0xd0>
 8023348:	232d      	movs	r3, #45	@ 0x2d
 802334a:	426d      	negs	r5, r5
 802334c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023350:	4858      	ldr	r0, [pc, #352]	@ (80234b4 <_printf_i+0x234>)
 8023352:	230a      	movs	r3, #10
 8023354:	e011      	b.n	802337a <_printf_i+0xfa>
 8023356:	6821      	ldr	r1, [r4, #0]
 8023358:	6833      	ldr	r3, [r6, #0]
 802335a:	0608      	lsls	r0, r1, #24
 802335c:	f853 5b04 	ldr.w	r5, [r3], #4
 8023360:	d402      	bmi.n	8023368 <_printf_i+0xe8>
 8023362:	0649      	lsls	r1, r1, #25
 8023364:	bf48      	it	mi
 8023366:	b2ad      	uxthmi	r5, r5
 8023368:	2f6f      	cmp	r7, #111	@ 0x6f
 802336a:	4852      	ldr	r0, [pc, #328]	@ (80234b4 <_printf_i+0x234>)
 802336c:	6033      	str	r3, [r6, #0]
 802336e:	bf14      	ite	ne
 8023370:	230a      	movne	r3, #10
 8023372:	2308      	moveq	r3, #8
 8023374:	2100      	movs	r1, #0
 8023376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802337a:	6866      	ldr	r6, [r4, #4]
 802337c:	60a6      	str	r6, [r4, #8]
 802337e:	2e00      	cmp	r6, #0
 8023380:	db05      	blt.n	802338e <_printf_i+0x10e>
 8023382:	6821      	ldr	r1, [r4, #0]
 8023384:	432e      	orrs	r6, r5
 8023386:	f021 0104 	bic.w	r1, r1, #4
 802338a:	6021      	str	r1, [r4, #0]
 802338c:	d04b      	beq.n	8023426 <_printf_i+0x1a6>
 802338e:	4616      	mov	r6, r2
 8023390:	fbb5 f1f3 	udiv	r1, r5, r3
 8023394:	fb03 5711 	mls	r7, r3, r1, r5
 8023398:	5dc7      	ldrb	r7, [r0, r7]
 802339a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802339e:	462f      	mov	r7, r5
 80233a0:	42bb      	cmp	r3, r7
 80233a2:	460d      	mov	r5, r1
 80233a4:	d9f4      	bls.n	8023390 <_printf_i+0x110>
 80233a6:	2b08      	cmp	r3, #8
 80233a8:	d10b      	bne.n	80233c2 <_printf_i+0x142>
 80233aa:	6823      	ldr	r3, [r4, #0]
 80233ac:	07df      	lsls	r7, r3, #31
 80233ae:	d508      	bpl.n	80233c2 <_printf_i+0x142>
 80233b0:	6923      	ldr	r3, [r4, #16]
 80233b2:	6861      	ldr	r1, [r4, #4]
 80233b4:	4299      	cmp	r1, r3
 80233b6:	bfde      	ittt	le
 80233b8:	2330      	movle	r3, #48	@ 0x30
 80233ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80233be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80233c2:	1b92      	subs	r2, r2, r6
 80233c4:	6122      	str	r2, [r4, #16]
 80233c6:	f8cd a000 	str.w	sl, [sp]
 80233ca:	464b      	mov	r3, r9
 80233cc:	aa03      	add	r2, sp, #12
 80233ce:	4621      	mov	r1, r4
 80233d0:	4640      	mov	r0, r8
 80233d2:	f7ff fee7 	bl	80231a4 <_printf_common>
 80233d6:	3001      	adds	r0, #1
 80233d8:	d14a      	bne.n	8023470 <_printf_i+0x1f0>
 80233da:	f04f 30ff 	mov.w	r0, #4294967295
 80233de:	b004      	add	sp, #16
 80233e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80233e4:	6823      	ldr	r3, [r4, #0]
 80233e6:	f043 0320 	orr.w	r3, r3, #32
 80233ea:	6023      	str	r3, [r4, #0]
 80233ec:	4832      	ldr	r0, [pc, #200]	@ (80234b8 <_printf_i+0x238>)
 80233ee:	2778      	movs	r7, #120	@ 0x78
 80233f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80233f4:	6823      	ldr	r3, [r4, #0]
 80233f6:	6831      	ldr	r1, [r6, #0]
 80233f8:	061f      	lsls	r7, r3, #24
 80233fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80233fe:	d402      	bmi.n	8023406 <_printf_i+0x186>
 8023400:	065f      	lsls	r7, r3, #25
 8023402:	bf48      	it	mi
 8023404:	b2ad      	uxthmi	r5, r5
 8023406:	6031      	str	r1, [r6, #0]
 8023408:	07d9      	lsls	r1, r3, #31
 802340a:	bf44      	itt	mi
 802340c:	f043 0320 	orrmi.w	r3, r3, #32
 8023410:	6023      	strmi	r3, [r4, #0]
 8023412:	b11d      	cbz	r5, 802341c <_printf_i+0x19c>
 8023414:	2310      	movs	r3, #16
 8023416:	e7ad      	b.n	8023374 <_printf_i+0xf4>
 8023418:	4826      	ldr	r0, [pc, #152]	@ (80234b4 <_printf_i+0x234>)
 802341a:	e7e9      	b.n	80233f0 <_printf_i+0x170>
 802341c:	6823      	ldr	r3, [r4, #0]
 802341e:	f023 0320 	bic.w	r3, r3, #32
 8023422:	6023      	str	r3, [r4, #0]
 8023424:	e7f6      	b.n	8023414 <_printf_i+0x194>
 8023426:	4616      	mov	r6, r2
 8023428:	e7bd      	b.n	80233a6 <_printf_i+0x126>
 802342a:	6833      	ldr	r3, [r6, #0]
 802342c:	6825      	ldr	r5, [r4, #0]
 802342e:	6961      	ldr	r1, [r4, #20]
 8023430:	1d18      	adds	r0, r3, #4
 8023432:	6030      	str	r0, [r6, #0]
 8023434:	062e      	lsls	r6, r5, #24
 8023436:	681b      	ldr	r3, [r3, #0]
 8023438:	d501      	bpl.n	802343e <_printf_i+0x1be>
 802343a:	6019      	str	r1, [r3, #0]
 802343c:	e002      	b.n	8023444 <_printf_i+0x1c4>
 802343e:	0668      	lsls	r0, r5, #25
 8023440:	d5fb      	bpl.n	802343a <_printf_i+0x1ba>
 8023442:	8019      	strh	r1, [r3, #0]
 8023444:	2300      	movs	r3, #0
 8023446:	6123      	str	r3, [r4, #16]
 8023448:	4616      	mov	r6, r2
 802344a:	e7bc      	b.n	80233c6 <_printf_i+0x146>
 802344c:	6833      	ldr	r3, [r6, #0]
 802344e:	1d1a      	adds	r2, r3, #4
 8023450:	6032      	str	r2, [r6, #0]
 8023452:	681e      	ldr	r6, [r3, #0]
 8023454:	6862      	ldr	r2, [r4, #4]
 8023456:	2100      	movs	r1, #0
 8023458:	4630      	mov	r0, r6
 802345a:	f7ec fdf9 	bl	8010050 <memchr>
 802345e:	b108      	cbz	r0, 8023464 <_printf_i+0x1e4>
 8023460:	1b80      	subs	r0, r0, r6
 8023462:	6060      	str	r0, [r4, #4]
 8023464:	6863      	ldr	r3, [r4, #4]
 8023466:	6123      	str	r3, [r4, #16]
 8023468:	2300      	movs	r3, #0
 802346a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802346e:	e7aa      	b.n	80233c6 <_printf_i+0x146>
 8023470:	6923      	ldr	r3, [r4, #16]
 8023472:	4632      	mov	r2, r6
 8023474:	4649      	mov	r1, r9
 8023476:	4640      	mov	r0, r8
 8023478:	47d0      	blx	sl
 802347a:	3001      	adds	r0, #1
 802347c:	d0ad      	beq.n	80233da <_printf_i+0x15a>
 802347e:	6823      	ldr	r3, [r4, #0]
 8023480:	079b      	lsls	r3, r3, #30
 8023482:	d413      	bmi.n	80234ac <_printf_i+0x22c>
 8023484:	68e0      	ldr	r0, [r4, #12]
 8023486:	9b03      	ldr	r3, [sp, #12]
 8023488:	4298      	cmp	r0, r3
 802348a:	bfb8      	it	lt
 802348c:	4618      	movlt	r0, r3
 802348e:	e7a6      	b.n	80233de <_printf_i+0x15e>
 8023490:	2301      	movs	r3, #1
 8023492:	4632      	mov	r2, r6
 8023494:	4649      	mov	r1, r9
 8023496:	4640      	mov	r0, r8
 8023498:	47d0      	blx	sl
 802349a:	3001      	adds	r0, #1
 802349c:	d09d      	beq.n	80233da <_printf_i+0x15a>
 802349e:	3501      	adds	r5, #1
 80234a0:	68e3      	ldr	r3, [r4, #12]
 80234a2:	9903      	ldr	r1, [sp, #12]
 80234a4:	1a5b      	subs	r3, r3, r1
 80234a6:	42ab      	cmp	r3, r5
 80234a8:	dcf2      	bgt.n	8023490 <_printf_i+0x210>
 80234aa:	e7eb      	b.n	8023484 <_printf_i+0x204>
 80234ac:	2500      	movs	r5, #0
 80234ae:	f104 0619 	add.w	r6, r4, #25
 80234b2:	e7f5      	b.n	80234a0 <_printf_i+0x220>
 80234b4:	08041ed9 	.word	0x08041ed9
 80234b8:	08041eea 	.word	0x08041eea

080234bc <__sflush_r>:
 80234bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80234c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80234c4:	0716      	lsls	r6, r2, #28
 80234c6:	4605      	mov	r5, r0
 80234c8:	460c      	mov	r4, r1
 80234ca:	d454      	bmi.n	8023576 <__sflush_r+0xba>
 80234cc:	684b      	ldr	r3, [r1, #4]
 80234ce:	2b00      	cmp	r3, #0
 80234d0:	dc02      	bgt.n	80234d8 <__sflush_r+0x1c>
 80234d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80234d4:	2b00      	cmp	r3, #0
 80234d6:	dd48      	ble.n	802356a <__sflush_r+0xae>
 80234d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80234da:	2e00      	cmp	r6, #0
 80234dc:	d045      	beq.n	802356a <__sflush_r+0xae>
 80234de:	2300      	movs	r3, #0
 80234e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80234e4:	682f      	ldr	r7, [r5, #0]
 80234e6:	6a21      	ldr	r1, [r4, #32]
 80234e8:	602b      	str	r3, [r5, #0]
 80234ea:	d030      	beq.n	802354e <__sflush_r+0x92>
 80234ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80234ee:	89a3      	ldrh	r3, [r4, #12]
 80234f0:	0759      	lsls	r1, r3, #29
 80234f2:	d505      	bpl.n	8023500 <__sflush_r+0x44>
 80234f4:	6863      	ldr	r3, [r4, #4]
 80234f6:	1ad2      	subs	r2, r2, r3
 80234f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80234fa:	b10b      	cbz	r3, 8023500 <__sflush_r+0x44>
 80234fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80234fe:	1ad2      	subs	r2, r2, r3
 8023500:	2300      	movs	r3, #0
 8023502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023504:	6a21      	ldr	r1, [r4, #32]
 8023506:	4628      	mov	r0, r5
 8023508:	47b0      	blx	r6
 802350a:	1c43      	adds	r3, r0, #1
 802350c:	89a3      	ldrh	r3, [r4, #12]
 802350e:	d106      	bne.n	802351e <__sflush_r+0x62>
 8023510:	6829      	ldr	r1, [r5, #0]
 8023512:	291d      	cmp	r1, #29
 8023514:	d82b      	bhi.n	802356e <__sflush_r+0xb2>
 8023516:	4a2a      	ldr	r2, [pc, #168]	@ (80235c0 <__sflush_r+0x104>)
 8023518:	40ca      	lsrs	r2, r1
 802351a:	07d6      	lsls	r6, r2, #31
 802351c:	d527      	bpl.n	802356e <__sflush_r+0xb2>
 802351e:	2200      	movs	r2, #0
 8023520:	6062      	str	r2, [r4, #4]
 8023522:	04d9      	lsls	r1, r3, #19
 8023524:	6922      	ldr	r2, [r4, #16]
 8023526:	6022      	str	r2, [r4, #0]
 8023528:	d504      	bpl.n	8023534 <__sflush_r+0x78>
 802352a:	1c42      	adds	r2, r0, #1
 802352c:	d101      	bne.n	8023532 <__sflush_r+0x76>
 802352e:	682b      	ldr	r3, [r5, #0]
 8023530:	b903      	cbnz	r3, 8023534 <__sflush_r+0x78>
 8023532:	6560      	str	r0, [r4, #84]	@ 0x54
 8023534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023536:	602f      	str	r7, [r5, #0]
 8023538:	b1b9      	cbz	r1, 802356a <__sflush_r+0xae>
 802353a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802353e:	4299      	cmp	r1, r3
 8023540:	d002      	beq.n	8023548 <__sflush_r+0x8c>
 8023542:	4628      	mov	r0, r5
 8023544:	f7ff fb42 	bl	8022bcc <_free_r>
 8023548:	2300      	movs	r3, #0
 802354a:	6363      	str	r3, [r4, #52]	@ 0x34
 802354c:	e00d      	b.n	802356a <__sflush_r+0xae>
 802354e:	2301      	movs	r3, #1
 8023550:	4628      	mov	r0, r5
 8023552:	47b0      	blx	r6
 8023554:	4602      	mov	r2, r0
 8023556:	1c50      	adds	r0, r2, #1
 8023558:	d1c9      	bne.n	80234ee <__sflush_r+0x32>
 802355a:	682b      	ldr	r3, [r5, #0]
 802355c:	2b00      	cmp	r3, #0
 802355e:	d0c6      	beq.n	80234ee <__sflush_r+0x32>
 8023560:	2b1d      	cmp	r3, #29
 8023562:	d001      	beq.n	8023568 <__sflush_r+0xac>
 8023564:	2b16      	cmp	r3, #22
 8023566:	d11e      	bne.n	80235a6 <__sflush_r+0xea>
 8023568:	602f      	str	r7, [r5, #0]
 802356a:	2000      	movs	r0, #0
 802356c:	e022      	b.n	80235b4 <__sflush_r+0xf8>
 802356e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023572:	b21b      	sxth	r3, r3
 8023574:	e01b      	b.n	80235ae <__sflush_r+0xf2>
 8023576:	690f      	ldr	r7, [r1, #16]
 8023578:	2f00      	cmp	r7, #0
 802357a:	d0f6      	beq.n	802356a <__sflush_r+0xae>
 802357c:	0793      	lsls	r3, r2, #30
 802357e:	680e      	ldr	r6, [r1, #0]
 8023580:	bf08      	it	eq
 8023582:	694b      	ldreq	r3, [r1, #20]
 8023584:	600f      	str	r7, [r1, #0]
 8023586:	bf18      	it	ne
 8023588:	2300      	movne	r3, #0
 802358a:	eba6 0807 	sub.w	r8, r6, r7
 802358e:	608b      	str	r3, [r1, #8]
 8023590:	f1b8 0f00 	cmp.w	r8, #0
 8023594:	dde9      	ble.n	802356a <__sflush_r+0xae>
 8023596:	6a21      	ldr	r1, [r4, #32]
 8023598:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802359a:	4643      	mov	r3, r8
 802359c:	463a      	mov	r2, r7
 802359e:	4628      	mov	r0, r5
 80235a0:	47b0      	blx	r6
 80235a2:	2800      	cmp	r0, #0
 80235a4:	dc08      	bgt.n	80235b8 <__sflush_r+0xfc>
 80235a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80235aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80235ae:	81a3      	strh	r3, [r4, #12]
 80235b0:	f04f 30ff 	mov.w	r0, #4294967295
 80235b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80235b8:	4407      	add	r7, r0
 80235ba:	eba8 0800 	sub.w	r8, r8, r0
 80235be:	e7e7      	b.n	8023590 <__sflush_r+0xd4>
 80235c0:	20400001 	.word	0x20400001

080235c4 <_fflush_r>:
 80235c4:	b538      	push	{r3, r4, r5, lr}
 80235c6:	690b      	ldr	r3, [r1, #16]
 80235c8:	4605      	mov	r5, r0
 80235ca:	460c      	mov	r4, r1
 80235cc:	b913      	cbnz	r3, 80235d4 <_fflush_r+0x10>
 80235ce:	2500      	movs	r5, #0
 80235d0:	4628      	mov	r0, r5
 80235d2:	bd38      	pop	{r3, r4, r5, pc}
 80235d4:	b118      	cbz	r0, 80235de <_fflush_r+0x1a>
 80235d6:	6a03      	ldr	r3, [r0, #32]
 80235d8:	b90b      	cbnz	r3, 80235de <_fflush_r+0x1a>
 80235da:	f7ff f8bd 	bl	8022758 <__sinit>
 80235de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80235e2:	2b00      	cmp	r3, #0
 80235e4:	d0f3      	beq.n	80235ce <_fflush_r+0xa>
 80235e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80235e8:	07d0      	lsls	r0, r2, #31
 80235ea:	d404      	bmi.n	80235f6 <_fflush_r+0x32>
 80235ec:	0599      	lsls	r1, r3, #22
 80235ee:	d402      	bmi.n	80235f6 <_fflush_r+0x32>
 80235f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80235f2:	f7ff fada 	bl	8022baa <__retarget_lock_acquire_recursive>
 80235f6:	4628      	mov	r0, r5
 80235f8:	4621      	mov	r1, r4
 80235fa:	f7ff ff5f 	bl	80234bc <__sflush_r>
 80235fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023600:	07da      	lsls	r2, r3, #31
 8023602:	4605      	mov	r5, r0
 8023604:	d4e4      	bmi.n	80235d0 <_fflush_r+0xc>
 8023606:	89a3      	ldrh	r3, [r4, #12]
 8023608:	059b      	lsls	r3, r3, #22
 802360a:	d4e1      	bmi.n	80235d0 <_fflush_r+0xc>
 802360c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802360e:	f7ff facd 	bl	8022bac <__retarget_lock_release_recursive>
 8023612:	e7dd      	b.n	80235d0 <_fflush_r+0xc>

08023614 <__swhatbuf_r>:
 8023614:	b570      	push	{r4, r5, r6, lr}
 8023616:	460c      	mov	r4, r1
 8023618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802361c:	2900      	cmp	r1, #0
 802361e:	b096      	sub	sp, #88	@ 0x58
 8023620:	4615      	mov	r5, r2
 8023622:	461e      	mov	r6, r3
 8023624:	da0d      	bge.n	8023642 <__swhatbuf_r+0x2e>
 8023626:	89a3      	ldrh	r3, [r4, #12]
 8023628:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802362c:	f04f 0100 	mov.w	r1, #0
 8023630:	bf14      	ite	ne
 8023632:	2340      	movne	r3, #64	@ 0x40
 8023634:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023638:	2000      	movs	r0, #0
 802363a:	6031      	str	r1, [r6, #0]
 802363c:	602b      	str	r3, [r5, #0]
 802363e:	b016      	add	sp, #88	@ 0x58
 8023640:	bd70      	pop	{r4, r5, r6, pc}
 8023642:	466a      	mov	r2, sp
 8023644:	f000 f862 	bl	802370c <_fstat_r>
 8023648:	2800      	cmp	r0, #0
 802364a:	dbec      	blt.n	8023626 <__swhatbuf_r+0x12>
 802364c:	9901      	ldr	r1, [sp, #4]
 802364e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023652:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023656:	4259      	negs	r1, r3
 8023658:	4159      	adcs	r1, r3
 802365a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802365e:	e7eb      	b.n	8023638 <__swhatbuf_r+0x24>

08023660 <__smakebuf_r>:
 8023660:	898b      	ldrh	r3, [r1, #12]
 8023662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023664:	079d      	lsls	r5, r3, #30
 8023666:	4606      	mov	r6, r0
 8023668:	460c      	mov	r4, r1
 802366a:	d507      	bpl.n	802367c <__smakebuf_r+0x1c>
 802366c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023670:	6023      	str	r3, [r4, #0]
 8023672:	6123      	str	r3, [r4, #16]
 8023674:	2301      	movs	r3, #1
 8023676:	6163      	str	r3, [r4, #20]
 8023678:	b003      	add	sp, #12
 802367a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802367c:	ab01      	add	r3, sp, #4
 802367e:	466a      	mov	r2, sp
 8023680:	f7ff ffc8 	bl	8023614 <__swhatbuf_r>
 8023684:	9f00      	ldr	r7, [sp, #0]
 8023686:	4605      	mov	r5, r0
 8023688:	4639      	mov	r1, r7
 802368a:	4630      	mov	r0, r6
 802368c:	f7fe ff1e 	bl	80224cc <_malloc_r>
 8023690:	b948      	cbnz	r0, 80236a6 <__smakebuf_r+0x46>
 8023692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023696:	059a      	lsls	r2, r3, #22
 8023698:	d4ee      	bmi.n	8023678 <__smakebuf_r+0x18>
 802369a:	f023 0303 	bic.w	r3, r3, #3
 802369e:	f043 0302 	orr.w	r3, r3, #2
 80236a2:	81a3      	strh	r3, [r4, #12]
 80236a4:	e7e2      	b.n	802366c <__smakebuf_r+0xc>
 80236a6:	89a3      	ldrh	r3, [r4, #12]
 80236a8:	6020      	str	r0, [r4, #0]
 80236aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80236ae:	81a3      	strh	r3, [r4, #12]
 80236b0:	9b01      	ldr	r3, [sp, #4]
 80236b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80236b6:	b15b      	cbz	r3, 80236d0 <__smakebuf_r+0x70>
 80236b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80236bc:	4630      	mov	r0, r6
 80236be:	f000 f837 	bl	8023730 <_isatty_r>
 80236c2:	b128      	cbz	r0, 80236d0 <__smakebuf_r+0x70>
 80236c4:	89a3      	ldrh	r3, [r4, #12]
 80236c6:	f023 0303 	bic.w	r3, r3, #3
 80236ca:	f043 0301 	orr.w	r3, r3, #1
 80236ce:	81a3      	strh	r3, [r4, #12]
 80236d0:	89a3      	ldrh	r3, [r4, #12]
 80236d2:	431d      	orrs	r5, r3
 80236d4:	81a5      	strh	r5, [r4, #12]
 80236d6:	e7cf      	b.n	8023678 <__smakebuf_r+0x18>

080236d8 <memmove>:
 80236d8:	4288      	cmp	r0, r1
 80236da:	b510      	push	{r4, lr}
 80236dc:	eb01 0402 	add.w	r4, r1, r2
 80236e0:	d902      	bls.n	80236e8 <memmove+0x10>
 80236e2:	4284      	cmp	r4, r0
 80236e4:	4623      	mov	r3, r4
 80236e6:	d807      	bhi.n	80236f8 <memmove+0x20>
 80236e8:	1e43      	subs	r3, r0, #1
 80236ea:	42a1      	cmp	r1, r4
 80236ec:	d008      	beq.n	8023700 <memmove+0x28>
 80236ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80236f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80236f6:	e7f8      	b.n	80236ea <memmove+0x12>
 80236f8:	4402      	add	r2, r0
 80236fa:	4601      	mov	r1, r0
 80236fc:	428a      	cmp	r2, r1
 80236fe:	d100      	bne.n	8023702 <memmove+0x2a>
 8023700:	bd10      	pop	{r4, pc}
 8023702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802370a:	e7f7      	b.n	80236fc <memmove+0x24>

0802370c <_fstat_r>:
 802370c:	b538      	push	{r3, r4, r5, lr}
 802370e:	4d07      	ldr	r5, [pc, #28]	@ (802372c <_fstat_r+0x20>)
 8023710:	2300      	movs	r3, #0
 8023712:	4604      	mov	r4, r0
 8023714:	4608      	mov	r0, r1
 8023716:	4611      	mov	r1, r2
 8023718:	602b      	str	r3, [r5, #0]
 802371a:	f7ed f91c 	bl	8010956 <_fstat>
 802371e:	1c43      	adds	r3, r0, #1
 8023720:	d102      	bne.n	8023728 <_fstat_r+0x1c>
 8023722:	682b      	ldr	r3, [r5, #0]
 8023724:	b103      	cbz	r3, 8023728 <_fstat_r+0x1c>
 8023726:	6023      	str	r3, [r4, #0]
 8023728:	bd38      	pop	{r3, r4, r5, pc}
 802372a:	bf00      	nop
 802372c:	240045a4 	.word	0x240045a4

08023730 <_isatty_r>:
 8023730:	b538      	push	{r3, r4, r5, lr}
 8023732:	4d06      	ldr	r5, [pc, #24]	@ (802374c <_isatty_r+0x1c>)
 8023734:	2300      	movs	r3, #0
 8023736:	4604      	mov	r4, r0
 8023738:	4608      	mov	r0, r1
 802373a:	602b      	str	r3, [r5, #0]
 802373c:	f7ed f91b 	bl	8010976 <_isatty>
 8023740:	1c43      	adds	r3, r0, #1
 8023742:	d102      	bne.n	802374a <_isatty_r+0x1a>
 8023744:	682b      	ldr	r3, [r5, #0]
 8023746:	b103      	cbz	r3, 802374a <_isatty_r+0x1a>
 8023748:	6023      	str	r3, [r4, #0]
 802374a:	bd38      	pop	{r3, r4, r5, pc}
 802374c:	240045a4 	.word	0x240045a4

08023750 <_init>:
 8023750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023752:	bf00      	nop
 8023754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023756:	bc08      	pop	{r3}
 8023758:	469e      	mov	lr, r3
 802375a:	4770      	bx	lr

0802375c <_fini>:
 802375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802375e:	bf00      	nop
 8023760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023762:	bc08      	pop	{r3}
 8023764:	469e      	mov	lr, r3
 8023766:	4770      	bx	lr
