# -*- coding: utf-8 -*-
"""Module2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dwk0p0YVZ7ESwbIfLNIGloCuma9sAYT6
"""

import numpy as np
from tensorflow.keras.datasets import mnist

# Load MNIST test data
(_, _), (x_test, y_test) = mnist.load_data()

# Quantization parameters (replace with your actual values)
input_scale = 0.003921568859368563
input_zero_point = -128

# Write digits.h
with open("digits.h", "w") as f:
    f.write("// Sample MNIST digits 1 - 5 (quantized)\n")
    f.write("#ifndef DIGITS_H\n")
    f.write("#define DIGITS_H\n\n")
    f.write("// Quantization parameters\n")
    f.write(f"#define INPUT_SCALE {input_scale}f\n")
    f.write(f"#define INPUT_ZERO_POINT {input_zero_point}\n\n")

    for d in range(1, 6):
        # Find the first occurrence of digit 'd' in test set
        idx = np.where(y_test == d)[0][0]
        arr = x_test[idx].astype(np.float32).flatten() / 255.0

        # Quantize the data
        quantized_arr = np.round((arr / input_scale) + input_zero_point)
        quantized_arr = np.clip(quantized_arr, -128, 127).astype(np.int8)

        f.write(f"const int8_t digit{d}[28*28] = {{\n")
        for i, val in enumerate(quantized_arr):
            f.write(f"0x{int(val) & 0xFF:02X}, ")
            if (i + 1) % 28 == 0:
                f.write("\n")
        f.write("};\n\n")

    f.write("#endif // DIGITS_H\n")

from google.colab import files
files.download("/content/digits.h")
